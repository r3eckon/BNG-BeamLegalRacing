{
  "activeGraphId":1,
  "authors":"BeamLR",
  "currentGraphID":1,
  "date":1716797304,
  "debugEnabled":false,
  "description":"Beam Legal Racing Career",
  "difficulty":100,
  "frecency":{
    "node_10086":1696795779,
    "node_10094":1696795666,
    "node_1014":1715721396,
    "node_10257":1698480690,
    "node_1062":1715721509,
    "node_1105":1714596324,
    "node_1218":1709365744,
    "node_1225":1709366035,
    "node_1227":1709366179,
    "node_1228":1709366207,
    "node_1229":1709366236,
    "node_1230":1709366259,
    "node_1231":1709366296,
    "node_1232":1709366346,
    "node_1317":1699351847,
    "node_1407":1698480615,
    "node_1423":1705470015,
    "node_307":1712910874,
    "node_618":1709352847,
    "node_736":1709365780
  },
  "graphs":{
    "1":{
      "description":"This is the description for graph New State",
      "dirty":false,
      "links":[
        [
          118,
          "d",
          9,
          "flow",
          false
        ],
        [
          7,
          "flow",
          10,
          "flow",
          true
        ],
        [
          1286,
          "true",
          11,
          "flow",
          false
        ],
        [
          128,
          "flow",
          11,
          "reset",
          false
        ],
        [
          9887,
          "val",
          11,
          "position",
          false
        ],
        [
          320,
          "flow",
          12,
          "flow",
          false
        ],
        [
          1463,
          "True",
          13,
          "flow",
          false
        ],
        [
          94,
          "flow",
          14,
          "flow",
          false
        ],
        [
          121,
          "actual",
          14,
          "veid",
          false
        ],
        [
          14,
          "flow",
          15,
          "flow",
          false
        ],
        [
          14,
          "output",
          15,
          "fetch",
          false
        ],
        [
          118,
          "f",
          17,
          "flow",
          false
        ],
        [
          60,
          "flow",
          18,
          "flow",
          false
        ],
        [
          57,
          "false",
          18,
          "flow",
          false
        ],
        [
          106,
          "val",
          18,
          "A",
          false
        ],
        [
          38,
          "val",
          18,
          "B",
          false
        ],
        [
          9915,
          "flow",
          20,
          "flow",
          false
        ],
        [
          9915,
          "flow",
          20,
          "flow",
          false
        ],
        [
          9915,
          "flow",
          20,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          20,
          "veid",
          false
        ],
        [
          9915,
          "bsfile",
          20,
          "filename",
          false
        ],
        [
          1107,
          "flow",
          21,
          "flow",
          false
        ],
        [
          355,
          "spawnids",
          21,
          "idtable",
          false
        ],
        [
          7,
          "flow",
          22,
          "flow",
          true
        ],
        [
          1181,
          "down",
          22,
          "on",
          false
        ],
        [
          17,
          "flow",
          23,
          "flow",
          false
        ],
        [
          51,
          "flow",
          24,
          "flow",
          false
        ],
        [
          941,
          "val",
          24,
          "A",
          false
        ],
        [
          51,
          "output",
          24,
          "B",
          false
        ],
        [
          4986,
          "match_4",
          25,
          "flow",
          false
        ],
        [
          4986,
          "match_3",
          25,
          "flow",
          false
        ],
        [
          4986,
          "match_2",
          25,
          "flow",
          false
        ],
        [
          25,
          "flow",
          26,
          "flow",
          false
        ],
        [
          4995,
          "match_1",
          27,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          28,
          "flow",
          false
        ],
        [
          10227,
          "flow",
          29,
          "flow",
          false
        ],
        [
          494,
          "flow",
          30,
          "flow",
          false
        ],
        [
          979,
          "completed",
          30,
          "flow",
          false
        ],
        [
          58,
          "flow",
          31,
          "flow",
          false
        ],
        [
          446,
          "flow",
          32,
          "flow",
          false
        ],
        [
          446,
          "w",
          32,
          "width",
          false
        ],
        [
          446,
          "h",
          32,
          "height",
          false
        ],
        [
          446,
          "x",
          32,
          "posX",
          false
        ],
        [
          446,
          "y",
          32,
          "posY",
          false
        ],
        [
          7,
          "enterState",
          33,
          "flow",
          true
        ],
        [
          1522,
          "flow",
          34,
          "flow",
          false
        ],
        [
          1521,
          "flow",
          34,
          "flow",
          false
        ],
        [
          910,
          "fueling",
          34,
          "condition",
          false
        ],
        [
          34,
          "False",
          35,
          "flow",
          false
        ],
        [
          391,
          "flow",
          36,
          "flow",
          false
        ],
        [
          899,
          "down",
          37,
          "flow",
          false
        ],
        [
          1389,
          "down",
          37,
          "flow",
          false
        ],
        [
          27,
          "down",
          37,
          "flow",
          false
        ],
        [
          112,
          "flow",
          38,
          "flow",
          false
        ],
        [
          35,
          "flow",
          39,
          "flow",
          false
        ],
        [
          35,
          "val",
          39,
          "money",
          false
        ],
        [
          1118,
          "flow",
          40,
          "flow",
          true
        ],
        [
          40,
          "flow",
          41,
          "flow",
          false
        ],
        [
          40,
          "val",
          41,
          "A",
          false
        ],
        [
          5002,
          "flow",
          43,
          "flow",
          false
        ],
        [
          433,
          "w",
          43,
          "width",
          false
        ],
        [
          433,
          "h",
          43,
          "height",
          false
        ],
        [
          433,
          "x",
          43,
          "posX",
          false
        ],
        [
          433,
          "y",
          43,
          "posY",
          false
        ],
        [
          526,
          "flow",
          44,
          "flow",
          true
        ],
        [
          342,
          "veid",
          44,
          "vehId",
          true
        ],
        [
          9870,
          "flow",
          45,
          "flow",
          false
        ],
        [
          9870,
          "val",
          45,
          "text",
          false
        ],
        [
          20,
          "flow",
          46,
          "flow",
          false
        ],
        [
          1210,
          "flow",
          47,
          "flow",
          false
        ],
        [
          653,
          "flow",
          48,
          "flow",
          false
        ],
        [
          846,
          "traffic",
          48,
          "A",
          true
        ],
        [
          1221,
          "True",
          49,
          "flow",
          false
        ],
        [
          969,
          "vehId",
          49,
          "current",
          false
        ],
        [
          1389,
          "flow",
          50,
          "flow",
          false
        ],
        [
          880,
          "flow",
          50,
          "flow",
          false
        ],
        [
          941,
          "flow",
          51,
          "flow",
          false
        ],
        [
          193,
          "down",
          51,
          "setA",
          false
        ],
        [
          918,
          "flow",
          51,
          "setB",
          false
        ],
        [
          940,
          "val",
          51,
          "input",
          false
        ],
        [
          7,
          "flow",
          52,
          "flow",
          true
        ],
        [
          105,
          "flow",
          53,
          "flow",
          false
        ],
        [
          38,
          "val",
          53,
          "A",
          false
        ],
        [
          105,
          "Y",
          53,
          "B",
          false
        ],
        [
          10210,
          "match_2",
          54,
          "flow",
          false
        ],
        [
          5006,
          "flow",
          55,
          "flow",
          false
        ],
        [
          53,
          "false",
          57,
          "flow",
          false
        ],
        [
          64,
          "flow",
          57,
          "flow",
          false
        ],
        [
          38,
          "val",
          57,
          "A",
          false
        ],
        [
          118,
          "e",
          58,
          "flow",
          false
        ],
        [
          31,
          "flow",
          59,
          "flow",
          false
        ],
        [
          57,
          "true",
          60,
          "flow",
          false
        ],
        [
          544,
          "False",
          61,
          "flow",
          false
        ],
        [
          53,
          "true",
          64,
          "flow",
          false
        ],
        [
          114,
          "btn",
          64,
          "text",
          false
        ],
        [
          879,
          "down",
          65,
          "flow",
          false
        ],
        [
          958,
          "true",
          66,
          "flow",
          false
        ],
        [
          910,
          "fueling",
          66,
          "condition",
          false
        ],
        [
          364,
          "flow",
          67,
          "flow",
          false
        ],
        [
          364,
          "val",
          67,
          "carid",
          false
        ],
        [
          546,
          "flow",
          68,
          "flow",
          false
        ],
        [
          546,
          "output",
          68,
          "dataTable",
          false
        ],
        [
          1510,
          "flow",
          69,
          "flow",
          false
        ],
        [
          10295,
          "flow",
          69,
          "flow",
          false
        ],
        [
          121,
          "flow",
          72,
          "flow",
          false
        ],
        [
          121,
          "actual",
          72,
          "veid",
          false
        ],
        [
          121,
          "nocar",
          72,
          "nocar",
          false
        ],
        [
          129,
          "rdy",
          72,
          "vehRdy",
          true
        ],
        [
          174,
          "flow",
          74,
          "flow",
          false
        ],
        [
          180,
          "actual",
          74,
          "vehid",
          false
        ],
        [
          9901,
          "config",
          74,
          "filename",
          true
        ],
        [
          99,
          "match_5",
          75,
          "flow_1",
          false
        ],
        [
          59,
          "flow",
          75,
          "flow_2",
          false
        ],
        [
          99,
          "match_2",
          76,
          "flow_1",
          false
        ],
        [
          99,
          "match_3",
          76,
          "flow_1",
          false
        ],
        [
          59,
          "flow",
          76,
          "flow_2",
          false
        ],
        [
          471,
          "False",
          77,
          "flow",
          false
        ],
        [
          613,
          "flow",
          77,
          "flow",
          false
        ],
        [
          585,
          "false",
          77,
          "flow",
          false
        ],
        [
          10235,
          "flow",
          78,
          "flow_1",
          false
        ],
        [
          1112,
          "match_3",
          78,
          "flow_2",
          false
        ],
        [
          306,
          "flow",
          79,
          "flow",
          false
        ],
        [
          306,
          "w",
          79,
          "width",
          false
        ],
        [
          306,
          "h",
          79,
          "height",
          false
        ],
        [
          306,
          "x",
          79,
          "posX",
          false
        ],
        [
          306,
          "y",
          79,
          "posY",
          false
        ],
        [
          99,
          "match_4",
          80,
          "flow_1",
          false
        ],
        [
          59,
          "flow",
          80,
          "flow_2",
          false
        ],
        [
          92,
          "flow",
          82,
          "flow",
          false
        ],
        [
          92,
          "Y",
          82,
          "val",
          false
        ],
        [
          1322,
          "False",
          83,
          "flow",
          false
        ],
        [
          38,
          "val",
          83,
          "X",
          false
        ],
        [
          96,
          "value",
          83,
          "DX",
          false
        ],
        [
          1086,
          "flow",
          84,
          "flow",
          false
        ],
        [
          516,
          "veid",
          84,
          "veid",
          true
        ],
        [
          68,
          "carUsed",
          84,
          "gid",
          true
        ],
        [
          61,
          "flow",
          85,
          "flow",
          false
        ],
        [
          61,
          "val",
          85,
          "value",
          false
        ],
        [
          87,
          "value",
          85,
          "value_1",
          false
        ],
        [
          9892,
          "value",
          85,
          "value_2",
          false
        ],
        [
          7,
          "flow",
          89,
          "flow",
          true
        ],
        [
          409,
          "flow",
          90,
          "flow",
          false
        ],
        [
          409,
          "w",
          90,
          "width",
          false
        ],
        [
          409,
          "h",
          90,
          "height",
          false
        ],
        [
          409,
          "x",
          90,
          "posX",
          false
        ],
        [
          409,
          "y",
          90,
          "posY",
          false
        ],
        [
          10053,
          "flow",
          91,
          "flow",
          false
        ],
        [
          9915,
          "config",
          91,
          "filename",
          false
        ],
        [
          1324,
          "False",
          92,
          "flow",
          false
        ],
        [
          38,
          "val",
          92,
          "X",
          false
        ],
        [
          96,
          "value",
          92,
          "DX",
          false
        ],
        [
          85,
          "match_1",
          93,
          "flow",
          false
        ],
        [
          79,
          "flow",
          94,
          "flow",
          false
        ],
        [
          98,
          "formatted",
          94,
          "text",
          false
        ],
        [
          1251,
          "flow",
          95,
          "flow",
          false
        ],
        [
          109,
          "flow",
          95,
          "flow",
          false
        ],
        [
          1178,
          "flow",
          95,
          "flow",
          false
        ],
        [
          1543,
          "flow",
          95,
          "flow",
          false
        ],
        [
          943,
          "true",
          95,
          "flow",
          false
        ],
        [
          52,
          "flow",
          97,
          "flow",
          true
        ],
        [
          12,
          "flow",
          98,
          "flow",
          false
        ],
        [
          149,
          "val",
          98,
          "money",
          false
        ],
        [
          1121,
          "val",
          98,
          "carCount",
          false
        ],
        [
          72,
          "fuelVal",
          98,
          "fuelVal",
          false
        ],
        [
          12,
          "val",
          98,
          "damage",
          false
        ],
        [
          479,
          "num",
          98,
          "accel",
          false
        ],
        [
          10077,
          "val",
          98,
          "health",
          false
        ],
        [
          10076,
          "val",
          98,
          "rep",
          false
        ],
        [
          72,
          "fuelCap",
          98,
          "fuelCap",
          false
        ],
        [
          72,
          "oilVal",
          98,
          "oilval",
          false
        ],
        [
          72,
          "oilCap",
          98,
          "oilcap",
          false
        ],
        [
          436,
          "flow",
          99,
          "flow",
          false
        ],
        [
          55,
          "val",
          99,
          "value",
          false
        ],
        [
          542,
          "flow",
          100,
          "flow",
          false
        ],
        [
          44,
          "flow",
          102,
          "flow",
          false
        ],
        [
          97,
          "flow",
          103,
          "flow",
          false
        ],
        [
          643,
          "flow",
          103,
          "on",
          false
        ],
        [
          135,
          "flow",
          104,
          "flow",
          false
        ],
        [
          238,
          "stock",
          104,
          "input",
          false
        ],
        [
          135,
          "val",
          104,
          "selected",
          false
        ],
        [
          117,
          "flow",
          105,
          "flow",
          false
        ],
        [
          112,
          "val",
          105,
          "X",
          false
        ],
        [
          96,
          "value",
          105,
          "DX",
          false
        ],
        [
          38,
          "flow",
          106,
          "flow",
          false
        ],
        [
          624,
          "false",
          107,
          "flow",
          false
        ],
        [
          93,
          "down",
          108,
          "flow",
          false
        ],
        [
          107,
          "flow",
          109,
          "flow",
          false
        ],
        [
          18,
          "false",
          109,
          "flow",
          false
        ],
        [
          10130,
          "flow",
          109,
          "flow",
          false
        ],
        [
          943,
          "false",
          110,
          "flow",
          false
        ],
        [
          68,
          "flow",
          111,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          111,
          "val",
          false
        ],
        [
          85,
          "match_2",
          112,
          "flow",
          false
        ],
        [
          107,
          "down",
          113,
          "flow",
          false
        ],
        [
          38,
          "val",
          113,
          "val",
          false
        ],
        [
          515,
          "true",
          114,
          "flow",
          false
        ],
        [
          418,
          "flow",
          114,
          "flow",
          false
        ],
        [
          112,
          "val",
          114,
          "carCount",
          false
        ],
        [
          38,
          "val",
          114,
          "shownCar",
          false
        ],
        [
          418,
          "output",
          114,
          "carTable",
          false
        ],
        [
          106,
          "val",
          114,
          "currentCar",
          false
        ],
        [
          874,
          "flow",
          115,
          "flow",
          false
        ],
        [
          104,
          "output",
          115,
          "data",
          false
        ],
        [
          355,
          "rpaints",
          115,
          "rpaints",
          false
        ],
        [
          355,
          "randpaint",
          115,
          "randpaint",
          false
        ],
        [
          104,
          "sid",
          115,
          "sid",
          false
        ],
        [
          355,
          "seed",
          115,
          "seed",
          false
        ],
        [
          355,
          "rconfigs",
          115,
          "rconfigs",
          false
        ],
        [
          187,
          "flow",
          116,
          "flow",
          false
        ],
        [
          238,
          "slotCount",
          116,
          "X",
          false
        ],
        [
          114,
          "flow",
          117,
          "flow",
          false
        ],
        [
          114,
          "str",
          117,
          "text",
          false
        ],
        [
          77,
          "flow",
          118,
          "flow",
          false
        ],
        [
          358,
          "flow",
          118,
          "enableA",
          false
        ],
        [
          1122,
          "flow",
          118,
          "enableB",
          false
        ],
        [
          78,
          "flow",
          118,
          "enableC",
          false
        ],
        [
          119,
          "flow",
          118,
          "enableD",
          false
        ],
        [
          41,
          "false",
          118,
          "enableE",
          false
        ],
        [
          9891,
          "flow",
          118,
          "enableF",
          false
        ],
        [
          10008,
          "flow",
          118,
          "enableG",
          false
        ],
        [
          10234,
          "flow",
          118,
          "enableH",
          false
        ],
        [
          844,
          "mflow",
          119,
          "flow_1",
          false
        ],
        [
          10235,
          "flow",
          119,
          "flow_1",
          false
        ],
        [
          1112,
          "match_4",
          119,
          "flow_2",
          false
        ],
        [
          844,
          "mflow",
          119,
          "flow_2",
          false
        ],
        [
          1118,
          "flow",
          121,
          "flow",
          false
        ],
        [
          81,
          "vehId",
          121,
          "current",
          false
        ],
        [
          7,
          "flow",
          122,
          "flow",
          true
        ],
        [
          183,
          "flow",
          123,
          "flow",
          false
        ],
        [
          9879,
          "flow",
          123,
          "flow",
          false
        ],
        [
          9885,
          "flow",
          123,
          "flow",
          false
        ],
        [
          9884,
          "flow",
          123,
          "flow",
          false
        ],
        [
          292,
          "flow",
          124,
          "flow",
          false
        ],
        [
          292,
          "val",
          124,
          "count",
          false
        ],
        [
          115,
          "type",
          124,
          "model",
          false
        ],
        [
          115,
          "config",
          124,
          "config",
          false
        ],
        [
          115,
          "baseprice",
          124,
          "baseprice",
          false
        ],
        [
          115,
          "partprice",
          124,
          "partprice",
          false
        ],
        [
          115,
          "scrapval",
          124,
          "scrapval",
          false
        ],
        [
          115,
          "paintdata",
          124,
          "paintdata",
          false
        ],
        [
          115,
          "odometer",
          124,
          "odometer",
          false
        ],
        [
          160,
          "flow",
          125,
          "flow",
          false
        ],
        [
          160,
          "val",
          125,
          "value",
          false
        ],
        [
          1319,
          "True",
          126,
          "flow",
          false
        ],
        [
          122,
          "flow",
          127,
          "flow",
          false
        ],
        [
          295,
          "flow",
          127,
          "on",
          false
        ],
        [
          123,
          "flow",
          128,
          "flow",
          false
        ],
        [
          7,
          "flow",
          129,
          "flow",
          true
        ],
        [
          10044,
          "flow",
          130,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          130,
          "reset",
          false
        ],
        [
          220,
          "flow",
          131,
          "flow",
          false
        ],
        [
          220,
          "val",
          131,
          "A",
          false
        ],
        [
          115,
          "cost",
          131,
          "B",
          false
        ],
        [
          355,
          "flow",
          132,
          "flow",
          false
        ],
        [
          355,
          "spawnids",
          132,
          "idtable",
          false
        ],
        [
          591,
          "true",
          133,
          "flow",
          false
        ],
        [
          233,
          "flow",
          135,
          "flow",
          false
        ],
        [
          1302,
          "flow",
          136,
          "flow",
          false
        ],
        [
          354,
          "flow",
          137,
          "flow",
          false
        ],
        [
          354,
          "vehid",
          137,
          "veid",
          false
        ],
        [
          266,
          "flow",
          138,
          "flow",
          false
        ],
        [
          10210,
          "match_1",
          139,
          "flow",
          false
        ],
        [
          10209,
          "extras",
          139,
          "filename",
          false
        ],
        [
          150,
          "completed",
          140,
          "flow",
          false
        ],
        [
          347,
          "flow",
          142,
          "flow",
          false
        ],
        [
          7,
          "flow",
          143,
          "flow",
          false
        ],
        [
          793,
          "time",
          143,
          "time",
          false
        ],
        [
          68,
          "flow",
          145,
          "flow",
          false
        ],
        [
          68,
          "money",
          145,
          "val",
          false
        ],
        [
          1253,
          "False",
          146,
          "flow",
          false
        ],
        [
          254,
          "true",
          148,
          "flow",
          false
        ],
        [
          1118,
          "flow",
          149,
          "flow",
          true
        ],
        [
          7,
          "flow",
          150,
          "flow",
          true
        ],
        [
          10086,
          "flow",
          151,
          "flow",
          false
        ],
        [
          512,
          "false",
          151,
          "flow",
          false
        ],
        [
          129,
          "model",
          151,
          "val",
          false
        ],
        [
          1179,
          "flow",
          152,
          "flow",
          false
        ],
        [
          234,
          "flow",
          152,
          "flow",
          false
        ],
        [
          346,
          "loaded",
          153,
          "flow",
          false
        ],
        [
          591,
          "false",
          153,
          "reset",
          true
        ],
        [
          346,
          "vehicleIds",
          153,
          "vehicleIds",
          false
        ],
        [
          7,
          "flow",
          155,
          "flow",
          false
        ],
        [
          383,
          "flow",
          156,
          "flow",
          false
        ],
        [
          383,
          "count",
          156,
          "rangeEnd",
          false
        ],
        [
          452,
          "flow",
          157,
          "flow",
          false
        ],
        [
          452,
          "output",
          157,
          "mdata",
          false
        ],
        [
          908,
          "val",
          157,
          "mtype",
          false
        ],
        [
          1127,
          "flow",
          158,
          "flow",
          false
        ],
        [
          1127,
          "txt",
          158,
          "text",
          false
        ],
        [
          10206,
          "flow",
          159,
          "flow",
          false
        ],
        [
          241,
          "psscl",
          159,
          "val",
          false
        ],
        [
          90,
          "flow",
          160,
          "flow",
          false
        ],
        [
          274,
          "flow",
          161,
          "flow",
          false
        ],
        [
          274,
          "val",
          161,
          "type",
          false
        ],
        [
          947,
          "flow",
          162,
          "flow",
          false
        ],
        [
          877,
          "flow",
          162,
          "flow",
          false
        ],
        [
          591,
          "false",
          162,
          "reset",
          true
        ],
        [
          846,
          "risk",
          162,
          "risk",
          false
        ],
        [
          846,
          "pool",
          162,
          "poolActiveAmount",
          false
        ],
        [
          97,
          "flow",
          163,
          "flow",
          false
        ],
        [
          286,
          "flow",
          163,
          "on",
          false
        ],
        [
          157,
          "flow",
          164,
          "flow",
          false
        ],
        [
          157,
          "flow",
          164,
          "flow",
          false
        ],
        [
          157,
          "desc",
          164,
          "val",
          false
        ],
        [
          1444,
          "flow",
          165,
          "flow",
          false
        ],
        [
          163,
          "flow",
          166,
          "flow",
          false
        ],
        [
          286,
          "flow",
          166,
          "reset",
          false
        ],
        [
          281,
          "enter",
          167,
          "flow",
          false
        ],
        [
          168,
          "val",
          167,
          "A",
          false
        ],
        [
          281,
          "triggerID",
          167,
          "B",
          false
        ],
        [
          244,
          "flow",
          169,
          "flow",
          false
        ],
        [
          255,
          "true",
          171,
          "flow",
          false
        ],
        [
          76,
          "flow",
          172,
          "flow",
          false
        ],
        [
          436,
          "w",
          172,
          "width",
          true
        ],
        [
          436,
          "h",
          172,
          "height",
          true
        ],
        [
          436,
          "x",
          172,
          "posX",
          true
        ],
        [
          436,
          "y",
          172,
          "posY",
          true
        ],
        [
          165,
          "flow",
          173,
          "flow",
          false
        ],
        [
          248,
          "vehid",
          173,
          "veid",
          false
        ],
        [
          165,
          "devices",
          173,
          "devices",
          false
        ],
        [
          166,
          "flow",
          174,
          "flow",
          false
        ],
        [
          286,
          "flow",
          174,
          "reset",
          false
        ],
        [
          1175,
          "flow",
          175,
          "flow",
          false
        ],
        [
          1254,
          "flow",
          175,
          "flow",
          false
        ],
        [
          949,
          "false",
          175,
          "flow",
          false
        ],
        [
          1320,
          "flow",
          175,
          "flow",
          false
        ],
        [
          146,
          "flow",
          175,
          "flow",
          false
        ],
        [
          172,
          "flow",
          176,
          "flow",
          false
        ],
        [
          182,
          "val",
          176,
          "text",
          false
        ],
        [
          888,
          "flow",
          177,
          "flow",
          false
        ],
        [
          206,
          "flow",
          178,
          "flow",
          false
        ],
        [
          878,
          "flow",
          178,
          "flow",
          false
        ],
        [
          113,
          "flow",
          180,
          "flow",
          false
        ],
        [
          1579,
          "vehId",
          180,
          "current",
          false
        ],
        [
          878,
          "down",
          183,
          "flow",
          false
        ],
        [
          9876,
          "down",
          184,
          "flow",
          false
        ],
        [
          916,
          "flow",
          185,
          "flow",
          false
        ],
        [
          916,
          "output",
          185,
          "text",
          false
        ],
        [
          394,
          "down",
          186,
          "flow",
          false
        ],
        [
          457,
          "over",
          186,
          "condition",
          false
        ],
        [
          125,
          "match_2",
          187,
          "flow",
          false
        ],
        [
          118,
          "b",
          188,
          "flow",
          false
        ],
        [
          188,
          "flow",
          189,
          "flow",
          false
        ],
        [
          1182,
          "down",
          190,
          "flow",
          false
        ],
        [
          447,
          "flow",
          191,
          "flow",
          false
        ],
        [
          447,
          "w",
          191,
          "width",
          false
        ],
        [
          447,
          "h",
          191,
          "height",
          false
        ],
        [
          447,
          "x",
          191,
          "posX",
          false
        ],
        [
          447,
          "y",
          191,
          "posY",
          false
        ],
        [
          690,
          "flow",
          192,
          "flow",
          false
        ],
        [
          690,
          "output",
          192,
          "data",
          false
        ],
        [
          10188,
          "val",
          192,
          "id",
          false
        ],
        [
          235,
          "true",
          193,
          "flow",
          false
        ],
        [
          749,
          "flow",
          194,
          "flow",
          false
        ],
        [
          1096,
          "False",
          194,
          "flow",
          false
        ],
        [
          1094,
          "False",
          194,
          "flow",
          false
        ],
        [
          1095,
          "flow",
          194,
          "flow",
          false
        ],
        [
          1552,
          "flow",
          194,
          "flow",
          false
        ],
        [
          716,
          "flow",
          195,
          "flow",
          false
        ],
        [
          716,
          "flow",
          195,
          "reset",
          false
        ],
        [
          1627,
          "actual",
          195,
          "vehId",
          false
        ],
        [
          7,
          "flow",
          196,
          "flow",
          true
        ],
        [
          562,
          "flow",
          197,
          "flow",
          false
        ],
        [
          10095,
          "val",
          197,
          "X",
          false
        ],
        [
          557,
          "flow",
          198,
          "flow",
          false
        ],
        [
          560,
          "vehId",
          198,
          "current",
          false
        ],
        [
          10223,
          "flow",
          199,
          "flow",
          false
        ],
        [
          10223,
          "val",
          199,
          "A",
          false
        ],
        [
          388,
          "flow",
          200,
          "flow",
          false
        ],
        [
          413,
          "flow",
          201,
          "flow",
          false
        ],
        [
          15,
          "val",
          201,
          "odometer",
          true
        ],
        [
          413,
          "val",
          201,
          "reputation",
          false
        ],
        [
          425,
          "val",
          201,
          "repair",
          false
        ],
        [
          424,
          "scrapval",
          201,
          "scrapVal",
          false
        ],
        [
          555,
          "flow",
          203,
          "flow",
          false
        ],
        [
          555,
          "txt",
          203,
          "text",
          false
        ],
        [
          10014,
          "flow",
          204,
          "flow",
          false
        ],
        [
          457,
          "won",
          204,
          "condition",
          false
        ],
        [
          4986,
          "match_1",
          205,
          "flow",
          false
        ],
        [
          983,
          "true",
          206,
          "flow",
          false
        ],
        [
          9882,
          "flow",
          207,
          "flow",
          false
        ],
        [
          208,
          "val",
          207,
          "x",
          false
        ],
        [
          9882,
          "val",
          207,
          "dx",
          false
        ],
        [
          206,
          "down",
          208,
          "flow",
          false
        ],
        [
          75,
          "flow",
          209,
          "flow",
          false
        ],
        [
          436,
          "w",
          209,
          "width",
          true
        ],
        [
          436,
          "h",
          209,
          "height",
          true
        ],
        [
          436,
          "x",
          209,
          "posX",
          true
        ],
        [
          436,
          "y",
          209,
          "posY",
          true
        ],
        [
          211,
          "flow",
          210,
          "flow",
          false
        ],
        [
          216,
          "flow",
          211,
          "flow",
          false
        ],
        [
          216,
          "text",
          211,
          "text",
          false
        ],
        [
          1180,
          "down",
          212,
          "flow",
          false
        ],
        [
          1175,
          "down",
          212,
          "flow",
          false
        ],
        [
          1575,
          "flow",
          212,
          "flow",
          false
        ],
        [
          124,
          "flow",
          212,
          "flow",
          false
        ],
        [
          396,
          "flow",
          213,
          "flow",
          false
        ],
        [
          497,
          "veid",
          213,
          "veid",
          false
        ],
        [
          38,
          "val",
          213,
          "gid",
          false
        ],
        [
          783,
          "flow",
          214,
          "flow",
          false
        ],
        [
          783,
          "output",
          214,
          "data",
          false
        ],
        [
          38,
          "val",
          214,
          "id",
          false
        ],
        [
          209,
          "flow",
          215,
          "flow",
          false
        ],
        [
          215,
          "flow",
          216,
          "flow",
          false
        ],
        [
          215,
          "val",
          216,
          "rew",
          false
        ],
        [
          210,
          "flow",
          217,
          "flow",
          false
        ],
        [
          922,
          "flow",
          218,
          "flow",
          false
        ],
        [
          793,
          "time",
          218,
          "time",
          false
        ],
        [
          7,
          "flow",
          219,
          "flow",
          false
        ],
        [
          236,
          "flow",
          220,
          "flow",
          false
        ],
        [
          210,
          "down",
          221,
          "flow",
          false
        ],
        [
          10178,
          "flow",
          222,
          "flow",
          false
        ],
        [
          1621,
          "True",
          222,
          "flow",
          false
        ],
        [
          38,
          "val",
          222,
          "id",
          false
        ],
        [
          224,
          "flow",
          223,
          "flow",
          false
        ],
        [
          224,
          "val",
          223,
          "A",
          false
        ],
        [
          228,
          "value",
          223,
          "B",
          false
        ],
        [
          433,
          "flow",
          224,
          "flow",
          false
        ],
        [
          190,
          "flow",
          227,
          "flow",
          false
        ],
        [
          685,
          "rrange",
          227,
          "rangeEnd",
          false
        ],
        [
          253,
          "flow",
          229,
          "flow",
          false
        ],
        [
          173,
          "damageData",
          229,
          "dmgTable",
          false
        ],
        [
          1444,
          "chosen",
          229,
          "extDmg",
          false
        ],
        [
          204,
          "True",
          230,
          "flow",
          false
        ],
        [
          302,
          "flow",
          232,
          "flow",
          false
        ],
        [
          10003,
          "Y",
          232,
          "val",
          false
        ],
        [
          412,
          "flow",
          233,
          "flow",
          false
        ],
        [
          412,
          "w",
          233,
          "width",
          false
        ],
        [
          412,
          "h",
          233,
          "height",
          false
        ],
        [
          412,
          "x",
          233,
          "posX",
          false
        ],
        [
          412,
          "y",
          233,
          "posY",
          false
        ],
        [
          1400,
          "flow",
          234,
          "flow",
          false
        ],
        [
          1400,
          "output",
          234,
          "text",
          false
        ],
        [
          9931,
          "flow",
          235,
          "flow",
          false
        ],
        [
          267,
          "val",
          235,
          "A",
          false
        ],
        [
          270,
          "val",
          235,
          "B",
          false
        ],
        [
          104,
          "flow",
          236,
          "flow",
          false
        ],
        [
          115,
          "fulldesc",
          236,
          "text",
          false
        ],
        [
          259,
          "flow",
          237,
          "flow",
          false
        ],
        [
          173,
          "ready",
          237,
          "condition",
          false
        ],
        [
          242,
          "flow",
          238,
          "flow",
          false
        ],
        [
          242,
          "output",
          238,
          "shopData",
          false
        ],
        [
          740,
          "dayData",
          238,
          "dayData",
          false
        ],
        [
          223,
          "true",
          240,
          "flow_1",
          false
        ],
        [
          4988,
          "flow",
          240,
          "flow_2",
          false
        ],
        [
          139,
          "flow",
          241,
          "flow",
          false
        ],
        [
          139,
          "output",
          241,
          "dtable",
          false
        ],
        [
          245,
          "flow",
          242,
          "flow",
          false
        ],
        [
          245,
          "file",
          242,
          "filename",
          false
        ],
        [
          230,
          "flow",
          243,
          "flow",
          false
        ],
        [
          230,
          "val",
          243,
          "X",
          false
        ],
        [
          10029,
          "val",
          243,
          "DX",
          false
        ],
        [
          856,
          "flow",
          244,
          "flow",
          false
        ],
        [
          740,
          "flow",
          245,
          "flow",
          false
        ],
        [
          740,
          "shopFile",
          245,
          "name",
          false
        ],
        [
          122,
          "flow",
          246,
          "flow",
          false
        ],
        [
          46,
          "flow",
          246,
          "on",
          false
        ],
        [
          387,
          "flow",
          247,
          "flow",
          false
        ],
        [
          291,
          "canPay",
          247,
          "condition",
          false
        ],
        [
          257,
          "flow",
          248,
          "flow",
          false
        ],
        [
          226,
          "vehId",
          248,
          "current",
          false
        ],
        [
          10054,
          "flow",
          249,
          "flow",
          false
        ],
        [
          137,
          "active",
          250,
          "flow",
          false
        ],
        [
          137,
          "active",
          250,
          "flowA",
          false
        ],
        [
          137,
          "enter",
          250,
          "flowB",
          false
        ],
        [
          137,
          "exit",
          250,
          "flowC",
          false
        ],
        [
          241,
          "flow",
          251,
          "flow",
          false
        ],
        [
          241,
          "club",
          251,
          "club",
          false
        ],
        [
          229,
          "flow",
          252,
          "flow",
          false
        ],
        [
          229,
          "totalCost",
          252,
          "val",
          false
        ],
        [
          237,
          "True",
          253,
          "flow",
          false
        ],
        [
          173,
          "flow",
          253,
          "reset",
          false
        ],
        [
          116,
          "flow",
          254,
          "flow",
          false
        ],
        [
          187,
          "val",
          254,
          "A",
          false
        ],
        [
          116,
          "Y",
          254,
          "B",
          false
        ],
        [
          254,
          "false",
          255,
          "flow",
          false
        ],
        [
          148,
          "flow",
          255,
          "flow",
          false
        ],
        [
          187,
          "val",
          255,
          "A",
          false
        ],
        [
          148,
          "down",
          256,
          "flow",
          false
        ],
        [
          187,
          "val",
          256,
          "X",
          false
        ],
        [
          260,
          "value",
          256,
          "DX",
          false
        ],
        [
          259,
          "flow",
          257,
          "flow",
          false
        ],
        [
          1098,
          "flow",
          258,
          "flow",
          false
        ],
        [
          1376,
          "flow",
          258,
          "reset",
          false
        ],
        [
          4994,
          "flow",
          259,
          "flow",
          false
        ],
        [
          171,
          "down",
          261,
          "flow",
          false
        ],
        [
          187,
          "val",
          261,
          "X",
          false
        ],
        [
          260,
          "value",
          261,
          "DX",
          false
        ],
        [
          256,
          "flow",
          262,
          "flow",
          false
        ],
        [
          256,
          "Y",
          262,
          "val",
          false
        ],
        [
          1180,
          "flow",
          263,
          "flow",
          false
        ],
        [
          275,
          "flow",
          265,
          "flow",
          false
        ],
        [
          275,
          "destid",
          265,
          "val",
          true
        ],
        [
          267,
          "flow",
          266,
          "flow",
          false
        ],
        [
          270,
          "val",
          266,
          "value",
          false
        ],
        [
          270,
          "flow",
          267,
          "flow",
          false
        ],
        [
          10177,
          "flow",
          268,
          "flow",
          false
        ],
        [
          180,
          "actual",
          268,
          "veid",
          false
        ],
        [
          10177,
          "devices",
          268,
          "devices",
          false
        ],
        [
          10224,
          "flow",
          269,
          "flow",
          false
        ],
        [
          10224,
          "val",
          269,
          "A",
          false
        ],
        [
          1548,
          "False",
          270,
          "flow",
          false
        ],
        [
          235,
          "false",
          271,
          "flow",
          false
        ],
        [
          24,
          "true",
          272,
          "flow",
          false
        ],
        [
          941,
          "val",
          272,
          "X",
          false
        ],
        [
          51,
          "output",
          272,
          "DX",
          false
        ],
        [
          762,
          "flow",
          273,
          "flow",
          false
        ],
        [
          10217,
          "false",
          273,
          "flow",
          false
        ],
        [
          763,
          "false",
          273,
          "flow",
          false
        ],
        [
          497,
          "veid",
          273,
          "veid",
          false
        ],
        [
          214,
          "ifile",
          273,
          "file",
          false
        ],
        [
          250,
          "flowA",
          274,
          "flow",
          false
        ],
        [
          329,
          "flow",
          275,
          "flow",
          false
        ],
        [
          329,
          "output",
          275,
          "raceData",
          false
        ],
        [
          313,
          "flow",
          275,
          "reload",
          false
        ],
        [
          511,
          "flow",
          276,
          "flow",
          false
        ],
        [
          497,
          "veid",
          276,
          "veid",
          false
        ],
        [
          214,
          "bsfile",
          276,
          "filename",
          false
        ],
        [
          1112,
          "match_4",
          278,
          "flow",
          false
        ],
        [
          1112,
          "match_3",
          278,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          279,
          "flow",
          false
        ],
        [
          861,
          "none",
          281,
          "flow",
          false
        ],
        [
          790,
          "vehId",
          281,
          "veid",
          false
        ],
        [
          272,
          "flow",
          282,
          "flow",
          false
        ],
        [
          272,
          "Y",
          282,
          "val",
          false
        ],
        [
          282,
          "flow",
          283,
          "flow",
          false
        ],
        [
          272,
          "Y",
          283,
          "money",
          false
        ],
        [
          305,
          "flow",
          284,
          "flow",
          false
        ],
        [
          9901,
          "flow",
          286,
          "flow",
          false
        ],
        [
          180,
          "actual",
          286,
          "veid",
          false
        ],
        [
          9901,
          "bsfile",
          286,
          "filename",
          false
        ],
        [
          637,
          "false",
          288,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          288,
          "id",
          false
        ],
        [
          102,
          "flow",
          289,
          "flow",
          false
        ],
        [
          102,
          "val",
          289,
          "A",
          false
        ],
        [
          445,
          "enter",
          290,
          "flow",
          false
        ],
        [
          10106,
          "flow",
          291,
          "flow",
          false
        ],
        [
          296,
          "val",
          291,
          "desc",
          false
        ],
        [
          10029,
          "val",
          291,
          "wager",
          false
        ],
        [
          10030,
          "val",
          291,
          "slips",
          false
        ],
        [
          10035,
          "val",
          291,
          "pcash",
          false
        ],
        [
          10105,
          "val",
          291,
          "ebp",
          false
        ],
        [
          10106,
          "val",
          291,
          "epp",
          false
        ],
        [
          275,
          "laps",
          291,
          "laps",
          true
        ],
        [
          275,
          "cpcount",
          291,
          "cpc",
          true
        ],
        [
          275,
          "reputation",
          291,
          "reputation",
          false
        ],
        [
          275,
          "parts",
          291,
          "parts",
          false
        ],
        [
          275,
          "opModel",
          291,
          "opmodel",
          false
        ],
        [
          275,
          "useTraffic",
          291,
          "traffic",
          false
        ],
        [
          1179,
          "down",
          292,
          "flow",
          false
        ],
        [
          1333,
          "flow",
          293,
          "flow",
          false
        ],
        [
          1529,
          "flow",
          294,
          "flow",
          false
        ],
        [
          784,
          "flow",
          295,
          "flow",
          false
        ],
        [
          784,
          "output",
          295,
          "data",
          false
        ],
        [
          68,
          "carUsed",
          295,
          "id",
          false
        ],
        [
          377,
          "match_2",
          296,
          "flow",
          false
        ],
        [
          289,
          "true",
          297,
          "flow",
          false
        ],
        [
          124,
          "flow",
          298,
          "flow",
          false
        ],
        [
          292,
          "val",
          298,
          "X",
          false
        ],
        [
          300,
          "value",
          298,
          "DX",
          false
        ],
        [
          72,
          "flow",
          299,
          "flow",
          false
        ],
        [
          72,
          "fuelVal",
          299,
          "val",
          true
        ],
        [
          284,
          "flow",
          301,
          "flow",
          false
        ],
        [
          284,
          "flag",
          301,
          "condition",
          false
        ],
        [
          10003,
          "flow",
          302,
          "flow",
          false
        ],
        [
          10003,
          "flow",
          302,
          "flow",
          false
        ],
        [
          298,
          "Y",
          302,
          "val",
          false
        ],
        [
          1430,
          "True",
          303,
          "flow",
          false
        ],
        [
          1187,
          "flow",
          304,
          "flow",
          false
        ],
        [
          7,
          "flow",
          305,
          "flow",
          false
        ],
        [
          1346,
          "False",
          306,
          "flow",
          false
        ],
        [
          407,
          "output",
          306,
          "data",
          true
        ],
        [
          7,
          "flow",
          307,
          "flow",
          false
        ],
        [
          679,
          "vehId",
          307,
          "current",
          false
        ],
        [
          664,
          "flow",
          308,
          "flow",
          false
        ],
        [
          1442,
          "False",
          309,
          "flow",
          false
        ],
        [
          248,
          "vehid",
          309,
          "vehId",
          false
        ],
        [
          250,
          "flowC",
          310,
          "flow",
          false
        ],
        [
          552,
          "flow",
          311,
          "flow",
          false
        ],
        [
          552,
          "flag",
          311,
          "condition",
          false
        ],
        [
          7,
          "flow",
          312,
          "flow",
          true
        ],
        [
          301,
          "True",
          313,
          "flow",
          false
        ],
        [
          301,
          "False",
          313,
          "reset",
          false
        ],
        [
          685,
          "flow",
          314,
          "flow",
          false
        ],
        [
          700,
          "flow",
          315,
          "flow",
          false
        ],
        [
          702,
          "false",
          315,
          "reset",
          false
        ],
        [
          384,
          "flow",
          316,
          "flow",
          false
        ],
        [
          313,
          "flow",
          317,
          "flow",
          false
        ],
        [
          7,
          "flow",
          318,
          "flow",
          true
        ],
        [
          952,
          "flow",
          319,
          "flow",
          false
        ],
        [
          785,
          "output",
          319,
          "vehId",
          false
        ],
        [
          72,
          "flow",
          320,
          "flow",
          false
        ],
        [
          121,
          "actual",
          320,
          "vehId",
          false
        ],
        [
          1580,
          "flow",
          321,
          "flow",
          false
        ],
        [
          1580,
          "actual",
          321,
          "vehId",
          false
        ],
        [
          325,
          "true",
          322,
          "flow",
          false
        ],
        [
          275,
          "wager",
          322,
          "val",
          false
        ],
        [
          7,
          "flow",
          323,
          "flow",
          true
        ],
        [
          275,
          "reload",
          324,
          "flow",
          false
        ],
        [
          324,
          "flow",
          325,
          "flow",
          false
        ],
        [
          324,
          "val",
          325,
          "A",
          false
        ],
        [
          330,
          "flow",
          327,
          "flow",
          false
        ],
        [
          330,
          "val",
          327,
          "val",
          false
        ],
        [
          341,
          "flow",
          328,
          "flow",
          false
        ],
        [
          1115,
          "True",
          328,
          "clear",
          false
        ],
        [
          568,
          "vehId",
          328,
          "vehId",
          false
        ],
        [
          356,
          "val",
          328,
          "position",
          false
        ],
        [
          336,
          "val",
          328,
          "rotation",
          false
        ],
        [
          341,
          "val",
          328,
          "scale",
          false
        ],
        [
          691,
          "flow",
          329,
          "flow",
          false
        ],
        [
          691,
          "fullpath",
          329,
          "filename",
          false
        ],
        [
          381,
          "flow",
          330,
          "flow",
          false
        ],
        [
          327,
          "flow",
          331,
          "flow",
          false
        ],
        [
          334,
          "flow",
          333,
          "flow",
          false
        ],
        [
          334,
          "val",
          333,
          "A",
          false
        ],
        [
          555,
          "cost",
          333,
          "B",
          false
        ],
        [
          891,
          "True",
          334,
          "flow",
          false
        ],
        [
          910,
          "flow",
          335,
          "flow",
          false
        ],
        [
          10060,
          "w",
          335,
          "width",
          false
        ],
        [
          10060,
          "h",
          335,
          "height",
          false
        ],
        [
          10060,
          "x",
          335,
          "posX",
          false
        ],
        [
          10060,
          "y",
          335,
          "posY",
          false
        ],
        [
          356,
          "flow",
          336,
          "flow",
          false
        ],
        [
          769,
          "false",
          337,
          "flow",
          false
        ],
        [
          10218,
          "false",
          337,
          "flow",
          false
        ],
        [
          758,
          "flow",
          337,
          "flow",
          false
        ],
        [
          516,
          "veid",
          337,
          "veid",
          false
        ],
        [
          295,
          "ifile",
          337,
          "file",
          false
        ],
        [
          1181,
          "down",
          339,
          "flow",
          false
        ],
        [
          336,
          "flow",
          341,
          "flow",
          false
        ],
        [
          470,
          "flow",
          342,
          "flow",
          false
        ],
        [
          10041,
          "val",
          342,
          "model",
          false
        ],
        [
          10042,
          "val",
          342,
          "config",
          false
        ],
        [
          10201,
          "val",
          342,
          "pos",
          false
        ],
        [
          10202,
          "val",
          342,
          "rot",
          false
        ],
        [
          10204,
          "val",
          342,
          "paintdata",
          false
        ],
        [
          846,
          "raceRandPaint",
          342,
          "randPaint",
          false
        ],
        [
          1541,
          "done",
          343,
          "flow",
          false
        ],
        [
          334,
          "val",
          343,
          "X",
          false
        ],
        [
          555,
          "cost",
          343,
          "DX",
          true
        ],
        [
          349,
          "flow",
          344,
          "flow",
          false
        ],
        [
          604,
          "flow",
          346,
          "flow",
          false
        ],
        [
          591,
          "false",
          346,
          "reset",
          false
        ],
        [
          604,
          "data",
          346,
          "group",
          false
        ],
        [
          846,
          "traffic",
          346,
          "quantity",
          false
        ],
        [
          343,
          "flow",
          347,
          "flow",
          false
        ],
        [
          343,
          "Y",
          347,
          "val",
          false
        ],
        [
          262,
          "flow",
          348,
          "flow",
          false
        ],
        [
          256,
          "Y",
          348,
          "slot",
          false
        ],
        [
          355,
          "spawnids",
          348,
          "idtable",
          false
        ],
        [
          374,
          "flow",
          349,
          "flow",
          false
        ],
        [
          174,
          "flow",
          349,
          "on",
          false
        ],
        [
          351,
          "flow",
          349,
          "off",
          false
        ],
        [
          380,
          "flow",
          350,
          "flow",
          false
        ],
        [
          374,
          "flow",
          351,
          "flow",
          false
        ],
        [
          174,
          "flow",
          351,
          "reset",
          false
        ],
        [
          348,
          "flow",
          352,
          "flow",
          false
        ],
        [
          348,
          "vehid",
          352,
          "A",
          false
        ],
        [
          1538,
          "flow",
          353,
          "flow",
          false
        ],
        [
          7,
          "flow",
          354,
          "flow",
          false
        ],
        [
          280,
          "vehId",
          354,
          "current",
          false
        ],
        [
          238,
          "flow",
          355,
          "flow",
          false
        ],
        [
          238,
          "stock",
          355,
          "stock",
          false
        ],
        [
          238,
          "slotCount",
          355,
          "slotCount",
          false
        ],
        [
          238,
          "slots",
          355,
          "slots",
          false
        ],
        [
          238,
          "shopID",
          355,
          "shopID",
          false
        ],
        [
          238,
          "rpresult",
          355,
          "rpresult",
          false
        ],
        [
          1124,
          "true",
          356,
          "flow",
          false
        ],
        [
          352,
          "false",
          357,
          "flow",
          false
        ],
        [
          348,
          "vehid",
          357,
          "vehId",
          false
        ],
        [
          10235,
          "flow",
          358,
          "flow_1",
          false
        ],
        [
          1112,
          "match_1",
          358,
          "flow_2",
          false
        ],
        [
          906,
          "flow",
          360,
          "flow",
          false
        ],
        [
          355,
          "spawnids",
          360,
          "idtable",
          false
        ],
        [
          675,
          "flow",
          361,
          "flow",
          false
        ],
        [
          142,
          "flow",
          361,
          "reset",
          false
        ],
        [
          10049,
          "flow",
          362,
          "flow",
          false
        ],
        [
          174,
          "flow",
          362,
          "reset",
          false
        ],
        [
          744,
          "flow",
          363,
          "flow",
          false
        ],
        [
          1600,
          "flow",
          364,
          "flow",
          false
        ],
        [
          1507,
          "true",
          365,
          "flow",
          false
        ],
        [
          158,
          "flow",
          365,
          "flow",
          false
        ],
        [
          910,
          "btntxt",
          365,
          "text",
          false
        ],
        [
          118,
          "g",
          366,
          "flow",
          false
        ],
        [
          594,
          "True",
          367,
          "flow",
          false
        ],
        [
          609,
          "btntxt",
          367,
          "text",
          true
        ],
        [
          1148,
          "flow",
          368,
          "flow",
          false
        ],
        [
          366,
          "flow",
          369,
          "flow",
          false
        ],
        [
          443,
          "flow",
          371,
          "flow",
          false
        ],
        [
          443,
          "w",
          371,
          "width",
          true
        ],
        [
          443,
          "h",
          371,
          "height",
          true
        ],
        [
          443,
          "x",
          371,
          "posX",
          true
        ],
        [
          443,
          "y",
          371,
          "posY",
          true
        ],
        [
          66,
          "True",
          372,
          "flow",
          false
        ],
        [
          56,
          "vehId",
          372,
          "veid",
          false
        ],
        [
          362,
          "flow",
          373,
          "flow",
          false
        ],
        [
          174,
          "flow",
          373,
          "reset",
          false
        ],
        [
          97,
          "flow",
          374,
          "flow",
          true
        ],
        [
          483,
          "flow",
          375,
          "flow",
          false
        ],
        [
          471,
          "True",
          376,
          "flow",
          false
        ],
        [
          382,
          "flow",
          377,
          "flow",
          false
        ],
        [
          382,
          "val",
          377,
          "value",
          false
        ],
        [
          1182,
          "flow",
          378,
          "flow",
          false
        ],
        [
          1332,
          "False",
          378,
          "flow",
          false
        ],
        [
          394,
          "flow",
          378,
          "flow",
          false
        ],
        [
          10017,
          "flow",
          378,
          "flow",
          false
        ],
        [
          10011,
          "flow",
          378,
          "flow",
          false
        ],
        [
          377,
          "none",
          378,
          "flow",
          false
        ],
        [
          961,
          "flow",
          378,
          "flow",
          false
        ],
        [
          966,
          "flow",
          378,
          "flow",
          false
        ],
        [
          246,
          "flow",
          380,
          "flow",
          false
        ],
        [
          318,
          "flow",
          381,
          "flow",
          false
        ],
        [
          371,
          "flow",
          382,
          "flow",
          false
        ],
        [
          908,
          "flow",
          383,
          "flow",
          false
        ],
        [
          775,
          "missionFile",
          383,
          "gid",
          false
        ],
        [
          908,
          "val",
          383,
          "type",
          false
        ],
        [
          1240,
          "flow",
          384,
          "flow",
          false
        ],
        [
          10158,
          "flow",
          385,
          "flow",
          false
        ],
        [
          776,
          "flow",
          386,
          "flow",
          false
        ],
        [
          782,
          "output",
          386,
          "current",
          false
        ],
        [
          72,
          "fuelVal",
          386,
          "gas",
          true
        ],
        [
          776,
          "val",
          386,
          "damage",
          false
        ],
        [
          455,
          "mass",
          386,
          "nos",
          false
        ],
        [
          72,
          "oilVal",
          386,
          "oil",
          false
        ],
        [
          291,
          "flow",
          387,
          "flow",
          false
        ],
        [
          291,
          "full",
          387,
          "text",
          false
        ],
        [
          386,
          "flow",
          388,
          "flow",
          false
        ],
        [
          386,
          "output",
          388,
          "data",
          false
        ],
        [
          9909,
          "filename",
          388,
          "filename",
          true
        ],
        [
          780,
          "flow",
          389,
          "flow",
          false
        ],
        [
          9914,
          "output",
          389,
          "current",
          false
        ],
        [
          72,
          "fuelVal",
          389,
          "gas",
          true
        ],
        [
          780,
          "val",
          389,
          "damage",
          false
        ],
        [
          455,
          "mass",
          389,
          "nos",
          false
        ],
        [
          72,
          "oilVal",
          389,
          "oil",
          false
        ],
        [
          1197,
          "true",
          390,
          "flow",
          false
        ],
        [
          1073,
          "flow",
          391,
          "flow",
          false
        ],
        [
          591,
          "false",
          391,
          "reset",
          true
        ],
        [
          389,
          "flow",
          392,
          "flow",
          false
        ],
        [
          389,
          "output",
          392,
          "data",
          false
        ],
        [
          9913,
          "filename",
          392,
          "filename",
          false
        ],
        [
          457,
          "flow",
          393,
          "flow",
          false
        ],
        [
          457,
          "text",
          393,
          "text",
          false
        ],
        [
          393,
          "flow",
          394,
          "flow",
          false
        ],
        [
          457,
          "btntxt",
          394,
          "text",
          false
        ],
        [
          377,
          "match_4",
          395,
          "flow",
          false
        ],
        [
          273,
          "flow",
          396,
          "flow",
          false
        ],
        [
          497,
          "veid",
          396,
          "vid",
          false
        ],
        [
          214,
          "mfile",
          396,
          "file",
          false
        ],
        [
          9928,
          "flow",
          397,
          "flow",
          false
        ],
        [
          261,
          "Y",
          397,
          "slot",
          false
        ],
        [
          355,
          "spawnids",
          397,
          "idtable",
          false
        ],
        [
          397,
          "flow",
          398,
          "flow",
          false
        ],
        [
          397,
          "vehid",
          398,
          "A",
          false
        ],
        [
          337,
          "flow",
          399,
          "flow",
          false
        ],
        [
          516,
          "veid",
          399,
          "vid",
          false
        ],
        [
          295,
          "mfile",
          399,
          "file",
          false
        ],
        [
          398,
          "false",
          400,
          "flow",
          false
        ],
        [
          397,
          "vehid",
          400,
          "vehId",
          false
        ],
        [
          1482,
          "out",
          402,
          "flow",
          false
        ],
        [
          24,
          "true",
          402,
          "flow",
          false
        ],
        [
          72,
          "fuelVal",
          402,
          "input",
          true
        ],
        [
          7,
          "enterState",
          403,
          "flow",
          false
        ],
        [
          125,
          "match_3",
          404,
          "flow",
          false
        ],
        [
          428,
          "output",
          404,
          "text",
          false
        ],
        [
          1635,
          "flow",
          405,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          407,
          "flow",
          true
        ],
        [
          118,
          "c",
          409,
          "flow",
          false
        ],
        [
          407,
          "output",
          409,
          "data",
          true
        ],
        [
          953,
          "flow",
          410,
          "flow",
          false
        ],
        [
          294,
          "flow",
          411,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          411,
          "veid",
          false
        ],
        [
          294,
          "val",
          411,
          "gid",
          false
        ],
        [
          263,
          "flow",
          412,
          "flow",
          false
        ],
        [
          407,
          "output",
          412,
          "data",
          true
        ],
        [
          425,
          "flow",
          413,
          "flow",
          false
        ],
        [
          416,
          "flow",
          414,
          "flow",
          false
        ],
        [
          416,
          "val",
          414,
          "carid",
          false
        ],
        [
          331,
          "flow",
          415,
          "flow",
          false
        ],
        [
          331,
          "flag",
          415,
          "condition",
          false
        ],
        [
          429,
          "flow",
          416,
          "flow",
          false
        ],
        [
          414,
          "flow",
          417,
          "flow",
          false
        ],
        [
          414,
          "filename",
          417,
          "filename",
          false
        ],
        [
          420,
          "flow",
          418,
          "flow",
          false
        ],
        [
          420,
          "filename",
          418,
          "filename",
          false
        ],
        [
          10017,
          "down",
          419,
          "flow",
          false
        ],
        [
          342,
          "veid",
          419,
          "id",
          false
        ],
        [
          515,
          "false",
          420,
          "flow",
          false
        ],
        [
          38,
          "val",
          420,
          "carid",
          false
        ],
        [
          437,
          "flow",
          421,
          "flow",
          false
        ],
        [
          137,
          "enter",
          422,
          "flow",
          false
        ],
        [
          137,
          "triggerID",
          422,
          "val",
          false
        ],
        [
          250,
          "flowC",
          423,
          "flow",
          false
        ],
        [
          417,
          "flow",
          424,
          "flow",
          false
        ],
        [
          417,
          "output",
          424,
          "data",
          false
        ],
        [
          424,
          "flow",
          425,
          "flow",
          false
        ],
        [
          415,
          "True",
          426,
          "flow",
          false
        ],
        [
          331,
          "val",
          426,
          "val",
          false
        ],
        [
          721,
          "flow",
          427,
          "flow",
          false
        ],
        [
          10190,
          "flow",
          427,
          "reset",
          false
        ],
        [
          201,
          "flow",
          428,
          "flow",
          false
        ],
        [
          201,
          "val",
          428,
          "value",
          false
        ],
        [
          201,
          "scrap",
          428,
          "showSuf",
          false
        ],
        [
          125,
          "match_3",
          429,
          "flow",
          false
        ],
        [
          146,
          "down",
          429,
          "reset",
          false
        ],
        [
          7,
          "flow",
          430,
          "flow",
          true
        ],
        [
          636,
          "flow",
          431,
          "flow",
          false
        ],
        [
          636,
          "val",
          431,
          "A",
          false
        ],
        [
          430,
          "flow",
          432,
          "flow",
          false
        ],
        [
          459,
          "flow",
          432,
          "on",
          false
        ],
        [
          10017,
          "down",
          432,
          "off",
          false
        ],
        [
          4988,
          "flow",
          433,
          "flow",
          false
        ],
        [
          407,
          "output",
          433,
          "data",
          true
        ],
        [
          47,
          "flow",
          434,
          "flow",
          false
        ],
        [
          10017,
          "down",
          435,
          "flow",
          false
        ],
        [
          55,
          "flow",
          436,
          "flow",
          false
        ],
        [
          407,
          "output",
          436,
          "data",
          true
        ],
        [
          250,
          "flowA",
          437,
          "flow",
          false
        ],
        [
          250,
          "flowB",
          437,
          "on",
          false
        ],
        [
          250,
          "flowC",
          437,
          "off",
          false
        ],
        [
          982,
          "true",
          438,
          "flow",
          false
        ],
        [
          797,
          "vehId",
          438,
          "veid",
          false
        ],
        [
          290,
          "flow",
          440,
          "flow",
          false
        ],
        [
          445,
          "triggerID",
          440,
          "A",
          false
        ],
        [
          290,
          "val",
          440,
          "B",
          false
        ],
        [
          328,
          "stopped",
          441,
          "flow",
          false
        ],
        [
          1115,
          "True",
          441,
          "reset",
          false
        ],
        [
          232,
          "flow",
          442,
          "flow",
          false
        ],
        [
          10003,
          "Y",
          442,
          "money",
          false
        ],
        [
          298,
          "Y",
          442,
          "carCount",
          false
        ],
        [
          369,
          "flow",
          443,
          "flow",
          false
        ],
        [
          407,
          "output",
          443,
          "data",
          true
        ],
        [
          451,
          "true",
          445,
          "flow",
          false
        ],
        [
          444,
          "vehId",
          445,
          "veid",
          false
        ],
        [
          23,
          "flow",
          446,
          "flow",
          false
        ],
        [
          407,
          "output",
          446,
          "data",
          true
        ],
        [
          189,
          "flow",
          447,
          "flow",
          false
        ],
        [
          407,
          "output",
          447,
          "data",
          false
        ],
        [
          794,
          "flow",
          448,
          "flow",
          false
        ],
        [
          794,
          "val",
          448,
          "veid",
          false
        ],
        [
          199,
          "true",
          450,
          "flow",
          false
        ],
        [
          10023,
          "flow",
          451,
          "flow",
          false
        ],
        [
          10023,
          "val",
          451,
          "A",
          false
        ],
        [
          460,
          "flow",
          452,
          "flow",
          false
        ],
        [
          460,
          "filename",
          452,
          "filename",
          false
        ],
        [
          7,
          "flow",
          453,
          "flow",
          false
        ],
        [
          743,
          "vehId",
          453,
          "vid",
          false
        ],
        [
          462,
          "flow",
          454,
          "flow",
          false
        ],
        [
          462,
          "val",
          454,
          "A",
          false
        ],
        [
          1627,
          "flow",
          455,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          455,
          "veid",
          false
        ],
        [
          466,
          "flag",
          455,
          "hasNos",
          false
        ],
        [
          377,
          "match_3",
          456,
          "flow",
          false
        ],
        [
          10163,
          "flow",
          457,
          "flow",
          false
        ],
        [
          456,
          "val",
          457,
          "winner",
          false
        ],
        [
          10068,
          "val",
          457,
          "plyrdy",
          false
        ],
        [
          10030,
          "val",
          457,
          "slips",
          false
        ],
        [
          10163,
          "val",
          457,
          "clap",
          false
        ],
        [
          275,
          "laps",
          457,
          "laps",
          true
        ],
        [
          652,
          "nextId",
          457,
          "cpid",
          false
        ],
        [
          275,
          "cpcount",
          457,
          "cpc",
          true
        ],
        [
          10067,
          "flow",
          458,
          "flow",
          false
        ],
        [
          342,
          "veid",
          458,
          "val",
          false
        ],
        [
          10065,
          "flow",
          459,
          "flow",
          false
        ],
        [
          566,
          "output",
          459,
          "vehId",
          false
        ],
        [
          156,
          "flow",
          460,
          "flow",
          false
        ],
        [
          383,
          "missions",
          460,
          "missions",
          false
        ],
        [
          156,
          "random",
          460,
          "mid",
          false
        ],
        [
          7,
          "flow",
          461,
          "flow",
          false
        ],
        [
          10107,
          "True",
          462,
          "flow",
          true
        ],
        [
          1344,
          "flow",
          463,
          "flow",
          false
        ],
        [
          465,
          "flow",
          464,
          "flow",
          false
        ],
        [
          459,
          "flow",
          464,
          "reset",
          false
        ],
        [
          432,
          "flow",
          465,
          "flow",
          true
        ],
        [
          44,
          "flow",
          465,
          "on",
          false
        ],
        [
          459,
          "flow",
          465,
          "off",
          false
        ],
        [
          461,
          "flow",
          466,
          "flow",
          false
        ],
        [
          1000,
          "flow",
          467,
          "flow",
          false
        ],
        [
          432,
          "flow",
          470,
          "flow",
          false
        ],
        [
          1181,
          "down",
          470,
          "reset",
          false
        ],
        [
          609,
          "flow",
          471,
          "flow",
          false
        ],
        [
          609,
          "uiactive",
          471,
          "condition",
          false
        ],
        [
          323,
          "flow",
          472,
          "flow",
          false
        ],
        [
          323,
          "flag",
          472,
          "condition",
          false
        ],
        [
          494,
          "flow",
          473,
          "flow",
          false
        ],
        [
          980,
          "flow",
          474,
          "flow",
          false
        ],
        [
          7,
          "flow",
          477,
          "flow",
          true
        ],
        [
          478,
          "vehId",
          477,
          "veid",
          false
        ],
        [
          477,
          "flow",
          479,
          "flow",
          false
        ],
        [
          477,
          "output",
          479,
          "str",
          false
        ],
        [
          680,
          "True",
          480,
          "flow",
          false
        ],
        [
          479,
          "num",
          480,
          "force",
          false
        ],
        [
          480,
          "flow",
          481,
          "flow",
          false
        ],
        [
          480,
          "death",
          481,
          "condition",
          false
        ],
        [
          481,
          "True",
          482,
          "flow",
          false
        ],
        [
          467,
          "flow",
          483,
          "flow",
          false
        ],
        [
          467,
          "hasNos",
          483,
          "flag",
          false
        ],
        [
          999,
          "flow",
          484,
          "flow",
          false
        ],
        [
          484,
          "flow",
          485,
          "flow",
          false
        ],
        [
          484,
          "hasNos",
          485,
          "flag",
          false
        ],
        [
          45,
          "flow",
          486,
          "flow",
          false
        ],
        [
          7,
          "flow",
          487,
          "flow",
          true
        ],
        [
          432,
          "flow",
          488,
          "flow",
          false
        ],
        [
          470,
          "flow",
          488,
          "reset",
          false
        ],
        [
          1326,
          "flow",
          490,
          "flow",
          false
        ],
        [
          500,
          "flow",
          491,
          "flow",
          false
        ],
        [
          502,
          "flow",
          491,
          "reset",
          false
        ],
        [
          1230,
          "flow",
          492,
          "flow",
          false
        ],
        [
          10080,
          "flow",
          493,
          "flow",
          false
        ],
        [
          10080,
          "val",
          493,
          "A",
          false
        ],
        [
          500,
          "flow",
          494,
          "flow",
          false
        ],
        [
          502,
          "flow",
          494,
          "reset",
          false
        ],
        [
          693,
          "flow",
          495,
          "flow",
          false
        ],
        [
          38,
          "val",
          495,
          "carUsed",
          true
        ],
        [
          791,
          "flow",
          496,
          "flow",
          false
        ],
        [
          342,
          "veid",
          496,
          "vid",
          false
        ],
        [
          506,
          "flow",
          497,
          "flow",
          false
        ],
        [
          214,
          "type",
          497,
          "model",
          false
        ],
        [
          214,
          "config",
          497,
          "config",
          false
        ],
        [
          321,
          "position",
          497,
          "pos",
          false
        ],
        [
          321,
          "rotation",
          497,
          "rot",
          false
        ],
        [
          214,
          "paintdata",
          497,
          "paintdata",
          false
        ],
        [
          214,
          "avbrdy",
          497,
          "avbrdy",
          false
        ],
        [
          465,
          "flow",
          498,
          "flow",
          false
        ],
        [
          44,
          "flow",
          498,
          "reset",
          false
        ],
        [
          924,
          "flow",
          499,
          "flow",
          false
        ],
        [
          923,
          "False",
          499,
          "flow",
          false
        ],
        [
          503,
          "ot",
          499,
          "time",
          false
        ],
        [
          846,
          "daytime",
          499,
          "dayLength",
          false
        ],
        [
          7,
          "flow",
          500,
          "flow",
          true
        ],
        [
          502,
          "flow",
          500,
          "on",
          false
        ],
        [
          1337,
          "completed",
          502,
          "flow",
          false
        ],
        [
          533,
          "completed",
          503,
          "flow",
          false
        ],
        [
          501,
          "time",
          503,
          "ct",
          false
        ],
        [
          846,
          "sleepTime",
          503,
          "oh",
          true
        ],
        [
          30,
          "flow",
          504,
          "flow",
          false
        ],
        [
          476,
          "vehId",
          504,
          "vehId",
          false
        ],
        [
          30,
          "pos",
          504,
          "pos",
          false
        ],
        [
          30,
          "rot",
          504,
          "rot",
          false
        ],
        [
          7,
          "flow",
          505,
          "flow",
          true
        ],
        [
          644,
          "flow",
          506,
          "flow",
          false
        ],
        [
          643,
          "flow",
          506,
          "reset",
          false
        ],
        [
          103,
          "flow",
          507,
          "flow",
          false
        ],
        [
          497,
          "flow",
          507,
          "on",
          false
        ],
        [
          499,
          "flow",
          508,
          "flow",
          false
        ],
        [
          507,
          "flow",
          509,
          "flow",
          false
        ],
        [
          497,
          "flow",
          509,
          "reset",
          false
        ],
        [
          504,
          "flow",
          510,
          "flow",
          false
        ],
        [
          509,
          "flow",
          511,
          "flow",
          false
        ],
        [
          497,
          "flow",
          511,
          "reset",
          false
        ],
        [
          10087,
          "flow",
          512,
          "flow",
          false
        ],
        [
          129,
          "walking",
          512,
          "A",
          false
        ],
        [
          10087,
          "val",
          512,
          "B",
          false
        ],
        [
          129,
          "model",
          513,
          "message",
          false
        ],
        [
          106,
          "flow",
          515,
          "flow",
          false
        ],
        [
          38,
          "val",
          515,
          "A",
          false
        ],
        [
          517,
          "flow",
          516,
          "flow",
          false
        ],
        [
          295,
          "type",
          516,
          "model",
          false
        ],
        [
          295,
          "config",
          516,
          "config",
          false
        ],
        [
          952,
          "pos",
          516,
          "pos",
          false
        ],
        [
          952,
          "rot",
          516,
          "rot",
          false
        ],
        [
          295,
          "paintdata",
          516,
          "paintdata",
          false
        ],
        [
          295,
          "avbrdy",
          516,
          "avbrdy",
          false
        ],
        [
          127,
          "flow",
          517,
          "flow",
          false
        ],
        [
          295,
          "flow",
          517,
          "reset",
          false
        ],
        [
          527,
          "flow",
          518,
          "flow",
          false
        ],
        [
          416,
          "val",
          518,
          "carid",
          true
        ],
        [
          527,
          "val",
          518,
          "count",
          false
        ],
        [
          127,
          "flow",
          519,
          "flow",
          false
        ],
        [
          516,
          "flow",
          519,
          "reset",
          false
        ],
        [
          519,
          "flow",
          520,
          "flow",
          false
        ],
        [
          516,
          "flow",
          520,
          "reset",
          false
        ],
        [
          405,
          "flow",
          521,
          "flow",
          false
        ],
        [
          1635,
          "output",
          521,
          "vehId",
          false
        ],
        [
          1171,
          "flow",
          522,
          "flow",
          false
        ],
        [
          524,
          "flow",
          523,
          "flow",
          false
        ],
        [
          524,
          "val",
          523,
          "X",
          false
        ],
        [
          201,
          "val",
          523,
          "DX",
          false
        ],
        [
          405,
          "flow",
          524,
          "flow",
          false
        ],
        [
          10058,
          "flow",
          525,
          "flow",
          false
        ],
        [
          523,
          "Y",
          525,
          "money",
          false
        ],
        [
          528,
          "Y",
          525,
          "carCount",
          false
        ],
        [
          488,
          "flow",
          526,
          "flow",
          false
        ],
        [
          470,
          "flow",
          526,
          "reset",
          false
        ],
        [
          1134,
          "down",
          527,
          "flow",
          false
        ],
        [
          523,
          "flow",
          528,
          "flow",
          false
        ],
        [
          527,
          "val",
          528,
          "X",
          false
        ],
        [
          529,
          "value",
          528,
          "DX",
          false
        ],
        [
          138,
          "flow",
          530,
          "flow",
          false
        ],
        [
          138,
          "val",
          530,
          "A",
          false
        ],
        [
          10274,
          "flow",
          531,
          "flow",
          false
        ],
        [
          438,
          "triggerName",
          531,
          "ctrig",
          false
        ],
        [
          798,
          "val",
          531,
          "ccp",
          false
        ],
        [
          829,
          "type",
          531,
          "type",
          false
        ],
        [
          829,
          "trigs",
          531,
          "triggers",
          false
        ],
        [
          829,
          "targetSpd",
          531,
          "targetSpd",
          false
        ],
        [
          829,
          "driftPoints",
          531,
          "driftPoints",
          false
        ],
        [
          829,
          "targetTime",
          531,
          "targetTime",
          false
        ],
        [
          10254,
          "val",
          531,
          "completed",
          false
        ],
        [
          10272,
          "val",
          531,
          "startTime",
          false
        ],
        [
          10274,
          "val",
          531,
          "failed",
          false
        ],
        [
          67,
          "flow",
          532,
          "flow",
          false
        ],
        [
          67,
          "filename",
          532,
          "filename",
          false
        ],
        [
          534,
          "flow",
          533,
          "flow",
          false
        ],
        [
          539,
          "flow",
          533,
          "reset",
          false
        ],
        [
          505,
          "flow",
          533,
          "reset",
          false
        ],
        [
          7,
          "flow",
          534,
          "flow",
          true
        ],
        [
          539,
          "flow",
          534,
          "on",
          false
        ],
        [
          505,
          "flow",
          534,
          "on",
          false
        ],
        [
          533,
          "flow",
          535,
          "flow",
          false
        ],
        [
          662,
          "flow",
          535,
          "on",
          false
        ],
        [
          535,
          "flow",
          536,
          "flow",
          false
        ],
        [
          508,
          "flow",
          536,
          "reset",
          false
        ],
        [
          539,
          "flow",
          537,
          "flow",
          false
        ],
        [
          505,
          "flow",
          537,
          "flow",
          false
        ],
        [
          538,
          "vehId",
          537,
          "vehId",
          false
        ],
        [
          542,
          "down",
          539,
          "flow",
          true
        ],
        [
          167,
          "true",
          540,
          "flow",
          false
        ],
        [
          1298,
          "flow",
          540,
          "flow",
          false
        ],
        [
          32,
          "flow",
          541,
          "flow",
          false
        ],
        [
          998,
          "flow",
          542,
          "flow",
          false
        ],
        [
          998,
          "output",
          542,
          "text",
          false
        ],
        [
          10091,
          "flow",
          543,
          "flow",
          false
        ],
        [
          547,
          "val",
          543,
          "money",
          false
        ],
        [
          10089,
          "val",
          543,
          "carCount",
          false
        ],
        [
          10091,
          "val",
          543,
          "health",
          false
        ],
        [
          10090,
          "val",
          543,
          "carUsed",
          false
        ],
        [
          548,
          "time",
          543,
          "time",
          false
        ],
        [
          541,
          "flow",
          544,
          "flow",
          false
        ],
        [
          541,
          "flag",
          544,
          "condition",
          false
        ],
        [
          333,
          "true",
          545,
          "flow",
          false
        ],
        [
          332,
          "vehId",
          545,
          "vehId",
          false
        ],
        [
          363,
          "flow",
          546,
          "flow",
          false
        ],
        [
          392,
          "flow",
          547,
          "flow",
          false
        ],
        [
          9883,
          "flow",
          549,
          "flow",
          false
        ],
        [
          207,
          "y",
          549,
          "money",
          false
        ],
        [
          10032,
          "flow",
          550,
          "flow",
          false
        ],
        [
          10037,
          "Y",
          550,
          "money",
          false
        ],
        [
          9929,
          "flow",
          551,
          "flow",
          false
        ],
        [
          7,
          "flow",
          552,
          "flow",
          true
        ],
        [
          1551,
          "true",
          553,
          "flow",
          false
        ],
        [
          508,
          "flow",
          554,
          "flow",
          false
        ],
        [
          503,
          "ot",
          554,
          "time",
          false
        ],
        [
          551,
          "flow",
          555,
          "flow",
          false
        ],
        [
          551,
          "val",
          555,
          "walking",
          false
        ],
        [
          10095,
          "flow",
          557,
          "flow",
          false
        ],
        [
          558,
          "val",
          557,
          "carid",
          false
        ],
        [
          10095,
          "val",
          557,
          "count",
          false
        ],
        [
          454,
          "false",
          558,
          "flow",
          false
        ],
        [
          561,
          "flow",
          559,
          "flow",
          false
        ],
        [
          641,
          "True",
          559,
          "flow",
          false
        ],
        [
          198,
          "actual",
          559,
          "vehId",
          false
        ],
        [
          641,
          "False",
          561,
          "flow",
          false
        ],
        [
          559,
          "flow",
          562,
          "flow",
          false
        ],
        [
          608,
          "arrest",
          563,
          "flow",
          true
        ],
        [
          10228,
          "flow",
          564,
          "flow",
          false
        ],
        [
          10096,
          "val",
          564,
          "count",
          false
        ],
        [
          10041,
          "val",
          564,
          "model",
          true
        ],
        [
          10042,
          "val",
          564,
          "config",
          true
        ],
        [
          10101,
          "val",
          564,
          "baseprice",
          true
        ],
        [
          10102,
          "val",
          564,
          "partprice",
          true
        ],
        [
          10104,
          "val",
          564,
          "scrapval",
          false
        ],
        [
          10228,
          "val",
          564,
          "paintdata",
          false
        ],
        [
          10181,
          "val",
          564,
          "ifile",
          false
        ],
        [
          846,
          "raceRandPaint",
          564,
          "randpaint",
          false
        ],
        [
          339,
          "flow",
          566,
          "flow",
          true
        ],
        [
          568,
          "vehId",
          566,
          "input",
          false
        ],
        [
          563,
          "flow",
          567,
          "flow",
          false
        ],
        [
          608,
          "offensesList",
          567,
          "olist",
          false
        ],
        [
          10124,
          "output",
          567,
          "cdata",
          true
        ],
        [
          10127,
          "output",
          567,
          "nlib",
          true
        ],
        [
          564,
          "flow",
          569,
          "flow",
          false
        ],
        [
          10096,
          "val",
          569,
          "X",
          false
        ],
        [
          569,
          "flow",
          570,
          "flow",
          false
        ],
        [
          569,
          "Y",
          570,
          "val",
          false
        ],
        [
          570,
          "flow",
          571,
          "flow",
          false
        ],
        [
          569,
          "Y",
          571,
          "carCount",
          false
        ],
        [
          585,
          "flow",
          572,
          "flow",
          false
        ],
        [
          367,
          "down",
          573,
          "flow",
          false
        ],
        [
          572,
          "val",
          573,
          "A",
          false
        ],
        [
          575,
          "flow",
          574,
          "flow",
          false
        ],
        [
          575,
          "val",
          574,
          "A",
          false
        ],
        [
          567,
          "cost",
          574,
          "B",
          false
        ],
        [
          573,
          "true",
          575,
          "flow",
          false
        ],
        [
          472,
          "True",
          576,
          "flow",
          false
        ],
        [
          574,
          "true",
          577,
          "flow",
          false
        ],
        [
          575,
          "val",
          577,
          "X",
          false
        ],
        [
          567,
          "cost",
          577,
          "DX",
          false
        ],
        [
          577,
          "flow",
          578,
          "flow",
          false
        ],
        [
          577,
          "Y",
          578,
          "val",
          false
        ],
        [
          578,
          "flow",
          579,
          "flow",
          false
        ],
        [
          577,
          "Y",
          579,
          "money",
          false
        ],
        [
          631,
          "flow",
          580,
          "flow",
          false
        ],
        [
          10131,
          "Y",
          580,
          "val",
          false
        ],
        [
          1145,
          "True",
          581,
          "flow",
          false
        ],
        [
          136,
          "flow",
          582,
          "flow",
          false
        ],
        [
          581,
          "flow",
          583,
          "flow",
          false
        ],
        [
          608,
          "flow",
          584,
          "flow",
          false
        ],
        [
          584,
          "flow",
          585,
          "flow",
          false
        ],
        [
          584,
          "val",
          585,
          "A",
          false
        ],
        [
          155,
          "flow",
          586,
          "flow",
          false
        ],
        [
          10153,
          "flow",
          586,
          "on",
          false
        ],
        [
          10017,
          "down",
          586,
          "off",
          true
        ],
        [
          608,
          "active",
          587,
          "flow",
          false
        ],
        [
          608,
          "arrest",
          587,
          "reset",
          false
        ],
        [
          608,
          "evade",
          587,
          "reset",
          false
        ],
        [
          719,
          "flow",
          588,
          "flow",
          false
        ],
        [
          582,
          "flag",
          588,
          "A",
          false
        ],
        [
          719,
          "val",
          588,
          "B",
          false
        ],
        [
          582,
          "flow",
          589,
          "flow",
          false
        ],
        [
          588,
          "false",
          590,
          "flow",
          false
        ],
        [
          588,
          "true",
          590,
          "reset",
          false
        ],
        [
          1512,
          "False",
          591,
          "flow",
          false
        ],
        [
          582,
          "flag",
          591,
          "A",
          false
        ],
        [
          10125,
          "flow",
          593,
          "flow",
          false
        ],
        [
          612,
          "flow",
          594,
          "flow",
          false
        ],
        [
          609,
          "oticket",
          594,
          "condition",
          true
        ],
        [
          598,
          "true",
          596,
          "flow",
          false
        ],
        [
          81,
          "vehId",
          596,
          "vehId",
          false
        ],
        [
          602,
          "flow",
          597,
          "flow",
          false
        ],
        [
          614,
          "output",
          597,
          "veid",
          false
        ],
        [
          602,
          "bsfile",
          597,
          "filename",
          false
        ],
        [
          572,
          "flow",
          598,
          "flow",
          false
        ],
        [
          572,
          "val",
          598,
          "A",
          false
        ],
        [
          608,
          "evade",
          599,
          "flow",
          false
        ],
        [
          645,
          "flow",
          600,
          "flow",
          false
        ],
        [
          619,
          "damageData",
          600,
          "dmg",
          false
        ],
        [
          602,
          "mfile",
          600,
          "file",
          false
        ],
        [
          606,
          "flow",
          601,
          "flow",
          false
        ],
        [
          606,
          "val",
          601,
          "carid",
          false
        ],
        [
          603,
          "flow",
          602,
          "flow",
          false
        ],
        [
          603,
          "output",
          602,
          "data",
          false
        ],
        [
          606,
          "val",
          602,
          "id",
          false
        ],
        [
          614,
          "flow",
          603,
          "flow",
          false
        ],
        [
          601,
          "filename",
          603,
          "filename",
          false
        ],
        [
          48,
          "true",
          604,
          "flow",
          false
        ],
        [
          759,
          "traffic",
          604,
          "file",
          false
        ],
        [
          1631,
          "flow",
          605,
          "flow",
          false
        ],
        [
          1631,
          "walk",
          605,
          "condition",
          false
        ],
        [
          553,
          "down",
          606,
          "flow",
          false
        ],
        [
          653,
          "flow",
          607,
          "flow",
          false
        ],
        [
          48,
          "false",
          607,
          "on",
          false
        ],
        [
          153,
          "flow",
          607,
          "on",
          false
        ],
        [
          591,
          "false",
          607,
          "off",
          false
        ],
        [
          100,
          "flow",
          608,
          "flow",
          false
        ],
        [
          81,
          "vehId",
          608,
          "vehId",
          false
        ],
        [
          583,
          "flow",
          609,
          "flow",
          false
        ],
        [
          608,
          "mode",
          609,
          "mode",
          false
        ],
        [
          608,
          "score",
          609,
          "score",
          false
        ],
        [
          608,
          "sightValue",
          609,
          "sight",
          false
        ],
        [
          608,
          "offenses",
          609,
          "offenses",
          false
        ],
        [
          608,
          "offensesList",
          609,
          "olist",
          false
        ],
        [
          572,
          "val",
          609,
          "gottkt",
          false
        ],
        [
          608,
          "timeElapsed",
          609,
          "time",
          false
        ],
        [
          581,
          "val",
          609,
          "tktcost",
          false
        ],
        [
          583,
          "val",
          609,
          "tkttxt",
          false
        ],
        [
          611,
          "flow",
          610,
          "flow",
          false
        ],
        [
          611,
          "w",
          610,
          "width",
          true
        ],
        [
          611,
          "h",
          610,
          "height",
          true
        ],
        [
          611,
          "x",
          610,
          "posX",
          true
        ],
        [
          611,
          "y",
          610,
          "posY",
          true
        ],
        [
          471,
          "True",
          611,
          "flow",
          false
        ],
        [
          407,
          "output",
          611,
          "data",
          true
        ],
        [
          610,
          "flow",
          612,
          "flow",
          false
        ],
        [
          609,
          "text",
          612,
          "text",
          true
        ],
        [
          553,
          "flow",
          613,
          "flow",
          false
        ],
        [
          594,
          "False",
          613,
          "flow",
          false
        ],
        [
          1551,
          "false",
          613,
          "flow",
          false
        ],
        [
          1537,
          "flow",
          614,
          "flow",
          false
        ],
        [
          615,
          "vehId",
          614,
          "input",
          false
        ],
        [
          10184,
          "flow",
          616,
          "flow",
          false
        ],
        [
          616,
          "flow",
          617,
          "flow",
          false
        ],
        [
          614,
          "output",
          617,
          "vehId",
          false
        ],
        [
          634,
          "flow",
          618,
          "flow",
          false
        ],
        [
          618,
          "flow",
          619,
          "flow",
          false
        ],
        [
          614,
          "output",
          619,
          "veid",
          false
        ],
        [
          618,
          "devices",
          619,
          "devices",
          false
        ],
        [
          10141,
          "False",
          620,
          "flow",
          false
        ],
        [
          10150,
          "val",
          620,
          "A",
          false
        ],
        [
          10140,
          "nextId",
          620,
          "B",
          true
        ],
        [
          617,
          "flow",
          622,
          "flow",
          false
        ],
        [
          10129,
          "flow",
          623,
          "flow",
          false
        ],
        [
          18,
          "true",
          624,
          "flow",
          false
        ],
        [
          114,
          "imcost",
          624,
          "A",
          false
        ],
        [
          626,
          "flow",
          625,
          "flow",
          false
        ],
        [
          626,
          "val",
          625,
          "A",
          false
        ],
        [
          114,
          "imcost",
          625,
          "B",
          false
        ],
        [
          10130,
          "down",
          626,
          "flow",
          false
        ],
        [
          652,
          "flow",
          627,
          "flow",
          false
        ],
        [
          652,
          "finished",
          627,
          "condition",
          false
        ],
        [
          629,
          "flow",
          628,
          "flow",
          false
        ],
        [
          629,
          "filename",
          628,
          "file",
          false
        ],
        [
          625,
          "true",
          629,
          "flow",
          false
        ],
        [
          38,
          "val",
          629,
          "carid",
          false
        ],
        [
          781,
          "flow",
          630,
          "flow",
          false
        ],
        [
          601,
          "filename",
          630,
          "file",
          false
        ],
        [
          567,
          "cost",
          630,
          "tval",
          false
        ],
        [
          10131,
          "flow",
          631,
          "flow",
          false
        ],
        [
          10131,
          "Y",
          631,
          "money",
          false
        ],
        [
          635,
          "flow",
          632,
          "flow",
          false
        ],
        [
          597,
          "flow",
          632,
          "on",
          false
        ],
        [
          652,
          "nextTrig",
          633,
          "name",
          false
        ],
        [
          777,
          "flow",
          634,
          "flow",
          false
        ],
        [
          597,
          "flow",
          634,
          "reset",
          false
        ],
        [
          52,
          "flow",
          635,
          "flow",
          true
        ],
        [
          657,
          "flow",
          636,
          "flow",
          false
        ],
        [
          68,
          "flow",
          637,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          637,
          "A",
          false
        ],
        [
          635,
          "flow",
          638,
          "flow",
          false
        ],
        [
          619,
          "flow",
          638,
          "on",
          false
        ],
        [
          640,
          "flow",
          639,
          "flow",
          false
        ],
        [
          637,
          "true",
          640,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          640,
          "input",
          true
        ],
        [
          198,
          "flow",
          641,
          "flow",
          false
        ],
        [
          198,
          "walk",
          641,
          "condition",
          false
        ],
        [
          638,
          "flow",
          642,
          "flow",
          false
        ],
        [
          619,
          "flow",
          642,
          "reset",
          false
        ],
        [
          1583,
          "flow",
          643,
          "flow",
          false
        ],
        [
          1582,
          "False",
          643,
          "flow",
          false
        ],
        [
          1580,
          "actual",
          643,
          "id",
          false
        ],
        [
          103,
          "flow",
          644,
          "flow",
          false
        ],
        [
          643,
          "flow",
          644,
          "reset",
          false
        ],
        [
          642,
          "flow",
          645,
          "flow",
          false
        ],
        [
          619,
          "flow",
          645,
          "reset",
          false
        ],
        [
          204,
          "True",
          647,
          "flow",
          false
        ],
        [
          10222,
          "flow",
          648,
          "flow",
          false
        ],
        [
          342,
          "veid",
          648,
          "vehId",
          false
        ],
        [
          10222,
          "path",
          648,
          "points",
          false
        ],
        [
          10043,
          "val",
          648,
          "risk",
          false
        ],
        [
          10227,
          "val",
          648,
          "avoid",
          false
        ],
        [
          275,
          "wpspd",
          648,
          "wpspd",
          false
        ],
        [
          586,
          "flow",
          649,
          "flow",
          false
        ],
        [
          10017,
          "down",
          649,
          "reset",
          true
        ],
        [
          10153,
          "pos",
          649,
          "position",
          false
        ],
        [
          464,
          "finished",
          651,
          "flow",
          true
        ],
        [
          10167,
          "flow",
          652,
          "flow",
          false
        ],
        [
          275,
          "cpcount",
          652,
          "cpc",
          true
        ],
        [
          275,
          "triggers",
          652,
          "trigs",
          true
        ],
        [
          275,
          "wayps",
          652,
          "wps",
          true
        ],
        [
          10136,
          "val",
          652,
          "current",
          false
        ],
        [
          10137,
          "val",
          652,
          "clap",
          false
        ],
        [
          275,
          "laps",
          652,
          "laps",
          true
        ],
        [
          10167,
          "val",
          652,
          "status",
          false
        ],
        [
          444,
          "vehId",
          652,
          "vid",
          false
        ],
        [
          717,
          "flow",
          653,
          "flow",
          false
        ],
        [
          431,
          "true",
          654,
          "flow",
          false
        ],
        [
          663,
          "true",
          654,
          "reset",
          false
        ],
        [
          647,
          "flow",
          655,
          "flow",
          false
        ],
        [
          655,
          "flow",
          656,
          "flow",
          false
        ],
        [
          655,
          "val",
          656,
          "A",
          false
        ],
        [
          155,
          "flow",
          657,
          "flow",
          false
        ],
        [
          663,
          "true",
          657,
          "on",
          false
        ],
        [
          155,
          "flow",
          658,
          "flow",
          false
        ],
        [
          450,
          "flow",
          658,
          "on",
          false
        ],
        [
          649,
          "flow",
          659,
          "flow",
          false
        ],
        [
          10166,
          "flow",
          659,
          "on",
          false
        ],
        [
          661,
          "False",
          659,
          "off",
          false
        ],
        [
          155,
          "flow",
          660,
          "flow",
          false
        ],
        [
          10022,
          "flow",
          660,
          "on",
          false
        ],
        [
          10153,
          "flow",
          661,
          "flow",
          false
        ],
        [
          652,
          "showft",
          661,
          "condition",
          false
        ],
        [
          669,
          "flow",
          662,
          "flow",
          false
        ],
        [
          669,
          "val",
          662,
          "extras",
          false
        ],
        [
          10153,
          "flow",
          663,
          "flow",
          false
        ],
        [
          10167,
          "val",
          663,
          "A",
          false
        ],
        [
          665,
          "flow",
          664,
          "flow",
          false
        ],
        [
          311,
          "False",
          664,
          "reset",
          false
        ],
        [
          10172,
          "True",
          665,
          "flow",
          false
        ],
        [
          311,
          "False",
          665,
          "reset",
          false
        ],
        [
          308,
          "flow",
          666,
          "flow",
          false
        ],
        [
          666,
          "flow",
          668,
          "flow",
          false
        ],
        [
          508,
          "flow",
          669,
          "flow",
          false
        ],
        [
          735,
          "True",
          671,
          "flow",
          false
        ],
        [
          672,
          "true",
          671,
          "flow",
          false
        ],
        [
          229,
          "totalCost",
          671,
          "val",
          false
        ],
        [
          673,
          "flow",
          672,
          "flow",
          false
        ],
        [
          673,
          "val",
          672,
          "A",
          false
        ],
        [
          229,
          "totalCost",
          672,
          "B",
          false
        ],
        [
          229,
          "flow",
          673,
          "flow",
          true
        ],
        [
          987,
          "True",
          675,
          "flow",
          false
        ],
        [
          142,
          "flow",
          675,
          "on",
          false
        ],
        [
          129,
          "flow",
          676,
          "flow",
          false
        ],
        [
          129,
          "rdy",
          676,
          "condition",
          false
        ],
        [
          479,
          "flow",
          677,
          "flow",
          false
        ],
        [
          129,
          "walking",
          677,
          "A",
          true
        ],
        [
          350,
          "flow",
          678,
          "flow",
          false
        ],
        [
          677,
          "true",
          680,
          "flow",
          false
        ],
        [
          129,
          "rdy",
          680,
          "condition",
          true
        ],
        [
          895,
          "true",
          681,
          "flow",
          false
        ],
        [
          10195,
          "flow",
          682,
          "flow",
          false
        ],
        [
          681,
          "val",
          682,
          "league",
          false
        ],
        [
          10195,
          "val",
          682,
          "club",
          false
        ],
        [
          928,
          "flow",
          683,
          "flow",
          false
        ],
        [
          682,
          "flow",
          684,
          "flow",
          false
        ],
        [
          682,
          "folder",
          684,
          "folder",
          false
        ],
        [
          686,
          "flow",
          685,
          "flow",
          false
        ],
        [
          681,
          "val",
          685,
          "league",
          false
        ],
        [
          686,
          "output",
          685,
          "data",
          false
        ],
        [
          684,
          "raceCount",
          685,
          "count",
          false
        ],
        [
          684,
          "races",
          685,
          "races",
          false
        ],
        [
          684,
          "flow",
          686,
          "flow",
          false
        ],
        [
          682,
          "progress",
          686,
          "filename",
          false
        ],
        [
          251,
          "flow",
          687,
          "flow",
          false
        ],
        [
          251,
          "progress",
          687,
          "filename",
          false
        ],
        [
          678,
          "flow",
          688,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          688,
          "veid",
          false
        ],
        [
          678,
          "devices",
          688,
          "devices",
          false
        ],
        [
          227,
          "flow",
          689,
          "flow",
          false
        ],
        [
          685,
          "remain",
          689,
          "value",
          false
        ],
        [
          227,
          "random",
          689,
          "key",
          false
        ],
        [
          10187,
          "flow",
          690,
          "flow",
          false
        ],
        [
          10187,
          "filename",
          690,
          "filename",
          false
        ],
        [
          689,
          "flow",
          691,
          "flow",
          false
        ],
        [
          682,
          "folder",
          691,
          "folder",
          false
        ],
        [
          689,
          "value",
          691,
          "file",
          false
        ],
        [
          1128,
          "flow",
          693,
          "flow",
          false
        ],
        [
          497,
          "veid",
          693,
          "veid",
          false
        ],
        [
          214,
          "nos",
          693,
          "mass",
          false
        ],
        [
          550,
          "flow",
          694,
          "flow",
          false
        ],
        [
          685,
          "rcount",
          694,
          "rcount",
          true
        ],
        [
          681,
          "val",
          694,
          "league",
          true
        ],
        [
          685,
          "prog",
          694,
          "prog",
          true
        ],
        [
          686,
          "output",
          694,
          "full",
          false
        ],
        [
          689,
          "value",
          694,
          "crace",
          false
        ],
        [
          195,
          "flow",
          695,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          695,
          "veid",
          false
        ],
        [
          192,
          "ifile",
          695,
          "file",
          false
        ],
        [
          694,
          "flow",
          696,
          "flow",
          false
        ],
        [
          694,
          "newfull",
          696,
          "data",
          false
        ],
        [
          682,
          "progress",
          696,
          "filename",
          false
        ],
        [
          192,
          "flow",
          697,
          "flow",
          false
        ],
        [
          711,
          "flow",
          698,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          698,
          "veid",
          false
        ],
        [
          697,
          "devices",
          698,
          "devices",
          false
        ],
        [
          1488,
          "true",
          699,
          "flow",
          false
        ],
        [
          694,
          "league",
          699,
          "val",
          false
        ],
        [
          702,
          "flow",
          700,
          "flow",
          false
        ],
        [
          702,
          "true",
          700,
          "on",
          false
        ],
        [
          702,
          "false",
          700,
          "off",
          false
        ],
        [
          930,
          "flow",
          701,
          "flow",
          false
        ],
        [
          1566,
          "vehId",
          701,
          "current",
          false
        ],
        [
          704,
          "flow",
          702,
          "flow",
          false
        ],
        [
          704,
          "val",
          702,
          "A",
          false
        ],
        [
          7,
          "flow",
          703,
          "flow",
          false
        ],
        [
          703,
          "flow",
          704,
          "flow",
          false
        ],
        [
          707,
          "flow",
          706,
          "flow",
          false
        ],
        [
          707,
          "text",
          706,
          "text",
          false
        ],
        [
          1331,
          "flow",
          707,
          "flow",
          false
        ],
        [
          681,
          "val",
          707,
          "league",
          false
        ],
        [
          10212,
          "val",
          707,
          "club",
          false
        ],
        [
          684,
          "raceCount",
          707,
          "lcount",
          false
        ],
        [
          685,
          "rcount",
          707,
          "rcount",
          false
        ],
        [
          1331,
          "val",
          707,
          "hours",
          false
        ],
        [
          7,
          "flow",
          708,
          "flow",
          true
        ],
        [
          698,
          "flow",
          709,
          "flow",
          false
        ],
        [
          697,
          "flow",
          709,
          "reset",
          false
        ],
        [
          709,
          "flow",
          710,
          "flow",
          false
        ],
        [
          697,
          "flow",
          710,
          "reset",
          false
        ],
        [
          708,
          "flow",
          711,
          "flow",
          false
        ],
        [
          697,
          "flow",
          711,
          "on",
          false
        ],
        [
          713,
          "flow",
          711,
          "off",
          false
        ],
        [
          710,
          "flow",
          712,
          "flow",
          false
        ],
        [
          698,
          "integrityData",
          712,
          "iteg",
          false
        ],
        [
          192,
          "ifile",
          712,
          "file",
          false
        ],
        [
          708,
          "flow",
          713,
          "flow",
          false
        ],
        [
          1482,
          "out",
          713,
          "reset",
          false
        ],
        [
          24,
          "true",
          713,
          "reset",
          false
        ],
        [
          708,
          "flow",
          714,
          "flow",
          false
        ],
        [
          712,
          "flow",
          714,
          "on",
          false
        ],
        [
          714,
          "flow",
          715,
          "flow",
          false
        ],
        [
          712,
          "flow",
          715,
          "reset",
          false
        ],
        [
          715,
          "flow",
          716,
          "flow",
          false
        ],
        [
          712,
          "flow",
          716,
          "reset",
          false
        ],
        [
          136,
          "flow",
          717,
          "flow",
          false
        ],
        [
          591,
          "true",
          717,
          "on",
          true
        ],
        [
          1516,
          "flow",
          717,
          "on",
          false
        ],
        [
          591,
          "false",
          717,
          "off",
          true
        ],
        [
          1514,
          "False",
          717,
          "off",
          false
        ],
        [
          591,
          "flow",
          718,
          "flow",
          false
        ],
        [
          591,
          "value",
          718,
          "flag",
          false
        ],
        [
          589,
          "flow",
          719,
          "flow",
          false
        ],
        [
          589,
          "val",
          719,
          "num",
          false
        ],
        [
          718,
          "flow",
          720,
          "flow",
          false
        ],
        [
          591,
          "value",
          720,
          "val",
          false
        ],
        [
          421,
          "flow",
          721,
          "flow",
          false
        ],
        [
          1457,
          "True",
          722,
          "flow",
          false
        ],
        [
          722,
          "flow",
          723,
          "flow",
          false
        ],
        [
          722,
          "file",
          723,
          "filename",
          false
        ],
        [
          723,
          "flow",
          724,
          "flow",
          false
        ],
        [
          723,
          "output",
          724,
          "markers",
          false
        ],
        [
          532,
          "flow",
          725,
          "flow",
          false
        ],
        [
          532,
          "output",
          725,
          "data",
          false
        ],
        [
          364,
          "val",
          725,
          "id",
          false
        ],
        [
          725,
          "flow",
          726,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          726,
          "veid",
          false
        ],
        [
          725,
          "ifile",
          726,
          "file",
          false
        ],
        [
          726,
          "flow",
          727,
          "flow",
          false
        ],
        [
          727,
          "flow",
          728,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          728,
          "veid",
          false
        ],
        [
          727,
          "val",
          728,
          "odo",
          false
        ],
        [
          728,
          "flow",
          729,
          "flow",
          false
        ],
        [
          725,
          "config",
          729,
          "filename",
          false
        ],
        [
          729,
          "flow",
          730,
          "flow",
          false
        ],
        [
          415,
          "True",
          731,
          "flow",
          false
        ],
        [
          415,
          "True",
          732,
          "flow",
          false
        ],
        [
          331,
          "val",
          732,
          "money",
          false
        ],
        [
          410,
          "flow",
          733,
          "flow",
          false
        ],
        [
          410,
          "val",
          733,
          "extras",
          false
        ],
        [
          953,
          "val",
          733,
          "walking",
          false
        ],
        [
          673,
          "flow",
          734,
          "flow",
          false
        ],
        [
          734,
          "flow",
          735,
          "flow",
          false
        ],
        [
          734,
          "flag",
          735,
          "condition",
          false
        ],
        [
          735,
          "True",
          736,
          "flow",
          false
        ],
        [
          836,
          "flow",
          737,
          "flow",
          false
        ],
        [
          836,
          "extras",
          737,
          "val",
          false
        ],
        [
          739,
          "flow",
          738,
          "flow",
          false
        ],
        [
          739,
          "val",
          738,
          "filename",
          false
        ],
        [
          856,
          "flow",
          739,
          "flow",
          false
        ],
        [
          738,
          "flow",
          740,
          "flow",
          false
        ],
        [
          738,
          "output",
          740,
          "tdata",
          false
        ],
        [
          687,
          "flow",
          741,
          "flow",
          false
        ],
        [
          687,
          "output",
          741,
          "dtable",
          false
        ],
        [
          219,
          "flow",
          742,
          "flow",
          false
        ],
        [
          219,
          "flag",
          742,
          "val",
          false
        ],
        [
          319,
          "flow",
          744,
          "flow",
          false
        ],
        [
          742,
          "flow",
          745,
          "flow",
          false
        ],
        [
          745,
          "flow",
          746,
          "flow",
          false
        ],
        [
          742,
          "num",
          746,
          "A",
          false
        ],
        [
          745,
          "val",
          746,
          "B",
          false
        ],
        [
          746,
          "false",
          747,
          "flow",
          false
        ],
        [
          219,
          "flag",
          747,
          "val",
          false
        ],
        [
          785,
          "flow",
          748,
          "flow",
          false
        ],
        [
          785,
          "output",
          748,
          "vehId",
          false
        ],
        [
          530,
          "false",
          749,
          "flow",
          false
        ],
        [
          576,
          "flow",
          750,
          "flow",
          false
        ],
        [
          323,
          "flow",
          752,
          "flow",
          false
        ],
        [
          750,
          "flow",
          752,
          "on",
          false
        ],
        [
          10215,
          "flow",
          753,
          "flow",
          false
        ],
        [
          10215,
          "val",
          753,
          "val",
          false
        ],
        [
          656,
          "true",
          754,
          "flow",
          false
        ],
        [
          753,
          "flow",
          755,
          "flow",
          false
        ],
        [
          129,
          "walking",
          755,
          "val",
          false
        ],
        [
          754,
          "flow",
          756,
          "flow",
          false
        ],
        [
          754,
          "val",
          756,
          "X",
          false
        ],
        [
          655,
          "val",
          756,
          "DX",
          false
        ],
        [
          10217,
          "true",
          757,
          "flow",
          false
        ],
        [
          497,
          "veid",
          757,
          "veid",
          false
        ],
        [
          10218,
          "true",
          758,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          758,
          "vehId",
          false
        ],
        [
          862,
          "flow",
          759,
          "flow",
          false
        ],
        [
          789,
          "flow",
          760,
          "flow",
          false
        ],
        [
          756,
          "Y",
          760,
          "reputation",
          false
        ],
        [
          1258,
          "flow",
          761,
          "flow",
          false
        ],
        [
          1259,
          "flow",
          761,
          "flow",
          false
        ],
        [
          1388,
          "flow",
          761,
          "flow",
          false
        ],
        [
          763,
          "true",
          762,
          "flow",
          false
        ],
        [
          497,
          "flow",
          762,
          "reset",
          false
        ],
        [
          497,
          "veid",
          762,
          "vehId",
          false
        ],
        [
          757,
          "flow",
          763,
          "flow",
          false
        ],
        [
          757,
          "damage",
          763,
          "A",
          false
        ],
        [
          509,
          "flow",
          764,
          "flow",
          false
        ],
        [
          276,
          "flow",
          764,
          "on",
          false
        ],
        [
          7,
          "enterState",
          765,
          "flow",
          false
        ],
        [
          764,
          "flow",
          766,
          "flow",
          false
        ],
        [
          276,
          "flow",
          766,
          "reset",
          false
        ],
        [
          766,
          "flow",
          767,
          "flow",
          false
        ],
        [
          276,
          "flow",
          767,
          "reset",
          false
        ],
        [
          760,
          "flow",
          768,
          "flow",
          false
        ],
        [
          656,
          "false",
          768,
          "flow",
          false
        ],
        [
          772,
          "flow",
          769,
          "flow",
          false
        ],
        [
          295,
          "damage",
          769,
          "A",
          false
        ],
        [
          769,
          "true",
          770,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          770,
          "veid",
          false
        ],
        [
          10219,
          "flow",
          771,
          "flow",
          false
        ],
        [
          771,
          "flow",
          772,
          "flow",
          false
        ],
        [
          10022,
          "flow",
          773,
          "flow",
          false
        ],
        [
          269,
          "false",
          773,
          "flow",
          false
        ],
        [
          10141,
          "False",
          773,
          "reset",
          false
        ],
        [
          342,
          "veid",
          773,
          "aiVehId",
          true
        ],
        [
          761,
          "flow",
          774,
          "flow",
          false
        ],
        [
          761,
          "val",
          774,
          "filename",
          false
        ],
        [
          774,
          "flow",
          775,
          "flow",
          false
        ],
        [
          774,
          "output",
          775,
          "data",
          false
        ],
        [
          174,
          "flow",
          776,
          "flow",
          false
        ],
        [
          632,
          "flow",
          777,
          "flow",
          false
        ],
        [
          597,
          "flow",
          777,
          "on",
          false
        ],
        [
          778,
          "flow",
          777,
          "off",
          false
        ],
        [
          632,
          "flow",
          778,
          "flow",
          false
        ],
        [
          597,
          "flow",
          778,
          "reset",
          false
        ],
        [
          9915,
          "flow",
          780,
          "flow",
          false
        ],
        [
          601,
          "flow",
          781,
          "flow",
          false
        ],
        [
          9909,
          "flow",
          782,
          "flow",
          false
        ],
        [
          9909,
          "filename",
          782,
          "filename",
          false
        ],
        [
          222,
          "flow",
          783,
          "flow",
          false
        ],
        [
          222,
          "filename",
          783,
          "filename",
          false
        ],
        [
          288,
          "flow",
          784,
          "flow",
          false
        ],
        [
          288,
          "filename",
          784,
          "filename",
          false
        ],
        [
          1424,
          "False",
          785,
          "flow",
          false
        ],
        [
          743,
          "vehId",
          785,
          "input",
          false
        ],
        [
          787,
          "flow",
          786,
          "flow",
          false
        ],
        [
          65,
          "flow",
          786,
          "reset",
          false
        ],
        [
          5006,
          "flow",
          787,
          "flow",
          false
        ],
        [
          1298,
          "flow",
          787,
          "on",
          false
        ],
        [
          167,
          "true",
          787,
          "on",
          false
        ],
        [
          210,
          "down",
          787,
          "off",
          false
        ],
        [
          768,
          "flow",
          788,
          "flow",
          false
        ],
        [
          768,
          "val",
          788,
          "parts",
          false
        ],
        [
          756,
          "flow",
          789,
          "flow",
          false
        ],
        [
          756,
          "Y",
          789,
          "val",
          false
        ],
        [
          648,
          "flow",
          791,
          "flow",
          false
        ],
        [
          342,
          "veid",
          791,
          "vid",
          false
        ],
        [
          451,
          "true",
          794,
          "flow",
          false
        ],
        [
          796,
          "flow",
          795,
          "flow",
          false
        ],
        [
          796,
          "outTime",
          795,
          "value",
          false
        ],
        [
          1020,
          "False",
          796,
          "flow",
          false
        ],
        [
          793,
          "time",
          796,
          "inTime",
          false
        ],
        [
          438,
          "enter",
          798,
          "flow",
          false
        ],
        [
          815,
          "flow",
          798,
          "flow",
          false
        ],
        [
          7,
          "flow",
          799,
          "flow",
          false
        ],
        [
          801,
          "flow",
          800,
          "flow",
          false
        ],
        [
          531,
          "finished",
          800,
          "condition",
          false
        ],
        [
          1005,
          "False",
          801,
          "flow",
          false
        ],
        [
          1007,
          "flow",
          801,
          "flow",
          false
        ],
        [
          531,
          "nextcp",
          801,
          "val",
          false
        ],
        [
          800,
          "False",
          802,
          "flow",
          false
        ],
        [
          531,
          "nexttrigid",
          802,
          "newPin",
          false
        ],
        [
          807,
          "true",
          803,
          "flow",
          false
        ],
        [
          843,
          "down",
          803,
          "reset",
          false
        ],
        [
          800,
          "True",
          803,
          "reset",
          false
        ],
        [
          10245,
          "down",
          803,
          "reset",
          false
        ],
        [
          802,
          "pos",
          803,
          "position",
          false
        ],
        [
          799,
          "flow",
          804,
          "flow",
          false
        ],
        [
          800,
          "True",
          804,
          "on",
          false
        ],
        [
          804,
          "flow",
          805,
          "flow",
          false
        ],
        [
          812,
          "flow",
          805,
          "reset",
          false
        ],
        [
          7,
          "flow",
          806,
          "flow",
          true
        ],
        [
          10244,
          "flow",
          807,
          "flow",
          false
        ],
        [
          10244,
          "val",
          807,
          "A",
          false
        ],
        [
          10273,
          "flow",
          808,
          "flow",
          false
        ],
        [
          995,
          "False",
          808,
          "flow",
          false
        ],
        [
          531,
          "finished",
          808,
          "condition",
          false
        ],
        [
          802,
          "flow",
          809,
          "flow",
          false
        ],
        [
          531,
          "cpsound",
          809,
          "condition",
          false
        ],
        [
          799,
          "flow",
          810,
          "flow",
          false
        ],
        [
          810,
          "flow",
          811,
          "flow",
          false
        ],
        [
          810,
          "val",
          811,
          "A",
          false
        ],
        [
          800,
          "True",
          812,
          "flow",
          false
        ],
        [
          10245,
          "down",
          812,
          "reset",
          false
        ],
        [
          843,
          "down",
          812,
          "reset",
          false
        ],
        [
          10275,
          "flow",
          813,
          "flow",
          false
        ],
        [
          813,
          "flow",
          814,
          "flow",
          false
        ],
        [
          813,
          "val",
          814,
          "X",
          false
        ],
        [
          829,
          "wager",
          814,
          "DX",
          false
        ],
        [
          814,
          "flow",
          815,
          "flow",
          false
        ],
        [
          814,
          "Y",
          815,
          "val",
          false
        ],
        [
          10245,
          "down",
          816,
          "flow",
          false
        ],
        [
          818,
          "flow",
          817,
          "flow",
          false
        ],
        [
          818,
          "w",
          817,
          "width",
          false
        ],
        [
          818,
          "h",
          817,
          "height",
          false
        ],
        [
          818,
          "x",
          817,
          "posX",
          false
        ],
        [
          818,
          "y",
          817,
          "posY",
          false
        ],
        [
          118,
          "h",
          818,
          "flow",
          false
        ],
        [
          407,
          "output",
          818,
          "data",
          false
        ],
        [
          10250,
          "flow",
          819,
          "flow",
          false
        ],
        [
          816,
          "val",
          819,
          "X",
          false
        ],
        [
          829,
          "wager",
          819,
          "DX",
          false
        ],
        [
          821,
          "flow",
          820,
          "flow",
          false
        ],
        [
          821,
          "val",
          820,
          "value",
          false
        ],
        [
          955,
          "true",
          821,
          "flow",
          false
        ],
        [
          1417,
          "flow",
          822,
          "flow",
          false
        ],
        [
          1131,
          "flow",
          823,
          "flow",
          false
        ],
        [
          843,
          "flow",
          823,
          "flow",
          false
        ],
        [
          1149,
          "flow",
          823,
          "flow",
          false
        ],
        [
          10245,
          "flow",
          823,
          "flow",
          false
        ],
        [
          956,
          "flow",
          823,
          "flow",
          false
        ],
        [
          820,
          "match_2",
          824,
          "flow",
          false
        ],
        [
          829,
          "infotxt",
          824,
          "text",
          false
        ],
        [
          840,
          "true",
          825,
          "flow",
          false
        ],
        [
          827,
          "flow",
          826,
          "flow",
          false
        ],
        [
          827,
          "val",
          826,
          "filename",
          false
        ],
        [
          1131,
          "down",
          827,
          "flow",
          false
        ],
        [
          826,
          "flow",
          828,
          "flow",
          false
        ],
        [
          826,
          "output",
          828,
          "data",
          false
        ],
        [
          832,
          "flow",
          829,
          "flow",
          false
        ],
        [
          828,
          "cfiles",
          829,
          "cfiles",
          false
        ],
        [
          832,
          "random",
          829,
          "pick",
          false
        ],
        [
          865,
          "flow",
          830,
          "flow",
          false
        ],
        [
          865,
          "flag",
          830,
          "condition",
          false
        ],
        [
          1411,
          "flow",
          831,
          "flow",
          false
        ],
        [
          828,
          "flow",
          832,
          "flow",
          false
        ],
        [
          828,
          "count",
          832,
          "rangeEnd",
          false
        ],
        [
          607,
          "flow",
          833,
          "flow",
          false
        ],
        [
          846,
          "police",
          833,
          "A",
          true
        ],
        [
          7,
          "enterState",
          834,
          "flow",
          false
        ],
        [
          834,
          "flow",
          835,
          "flow",
          false
        ],
        [
          834,
          "file",
          835,
          "filename",
          false
        ],
        [
          427,
          "flow",
          836,
          "flow",
          false
        ],
        [
          721,
          "val",
          836,
          "name",
          false
        ],
        [
          835,
          "output",
          836,
          "tdata",
          true
        ],
        [
          10252,
          "flow",
          837,
          "flow",
          false
        ],
        [
          10251,
          "Y",
          837,
          "val",
          false
        ],
        [
          812,
          "flow",
          838,
          "flow",
          false
        ],
        [
          824,
          "flow",
          839,
          "flow",
          false
        ],
        [
          839,
          "flow",
          840,
          "flow",
          false
        ],
        [
          839,
          "val",
          840,
          "A",
          false
        ],
        [
          829,
          "wager",
          840,
          "B",
          false
        ],
        [
          829,
          "flow",
          841,
          "flow",
          false
        ],
        [
          1008,
          "false",
          842,
          "flow",
          false
        ],
        [
          829,
          "infotxt",
          842,
          "text",
          false
        ],
        [
          808,
          "False",
          843,
          "flow",
          false
        ],
        [
          1010,
          "flow",
          843,
          "flow",
          false
        ],
        [
          10237,
          "flow",
          844,
          "flow",
          false
        ],
        [
          10236,
          "val",
          844,
          "mstatus",
          true
        ],
        [
          487,
          "val",
          844,
          "rstatus",
          true
        ],
        [
          10237,
          "val",
          844,
          "cstatus",
          true
        ],
        [
          844,
          "mflow_not",
          845,
          "flow_1",
          false
        ],
        [
          844,
          "rflow_not",
          845,
          "flow_2",
          false
        ],
        [
          7,
          "enterState",
          846,
          "flow",
          false
        ],
        [
          996,
          "flow",
          846,
          "flow",
          false
        ],
        [
          1482,
          "out",
          847,
          "flow",
          false
        ],
        [
          24,
          "true",
          847,
          "flow",
          false
        ],
        [
          1483,
          "flow",
          848,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          849,
          "flow",
          false
        ],
        [
          107,
          "down",
          850,
          "flow",
          false
        ],
        [
          213,
          "flow",
          851,
          "flow",
          false
        ],
        [
          126,
          "down",
          852,
          "flow",
          false
        ],
        [
          906,
          "flow",
          853,
          "flow",
          false
        ],
        [
          871,
          "flow",
          854,
          "flow",
          false
        ],
        [
          870,
          "False",
          854,
          "clear",
          false
        ],
        [
          1462,
          "flow",
          854,
          "clear",
          false
        ],
        [
          871,
          "val",
          854,
          "target",
          false
        ],
        [
          857,
          "flow",
          855,
          "flow",
          false
        ],
        [
          852,
          "flow",
          855,
          "reset",
          false
        ],
        [
          855,
          "flow",
          856,
          "flow",
          false
        ],
        [
          852,
          "flow",
          856,
          "reset",
          false
        ],
        [
          1118,
          "flow",
          857,
          "flow",
          true
        ],
        [
          852,
          "flow",
          857,
          "on",
          false
        ],
        [
          852,
          "flow",
          858,
          "flow",
          false
        ],
        [
          553,
          "down",
          859,
          "flow",
          false
        ],
        [
          623,
          "flow",
          860,
          "flow",
          false
        ],
        [
          1290,
          "flow",
          861,
          "flow",
          false
        ],
        [
          1290,
          "val",
          861,
          "value",
          false
        ],
        [
          136,
          "flow",
          862,
          "flow",
          false
        ],
        [
          1221,
          "False",
          863,
          "flow",
          false
        ],
        [
          968,
          "output",
          863,
          "vehId",
          false
        ],
        [
          1460,
          "True",
          865,
          "flow",
          false
        ],
        [
          865,
          "flow",
          866,
          "flow",
          false
        ],
        [
          812,
          "flow",
          867,
          "flow",
          false
        ],
        [
          843,
          "down",
          867,
          "flow",
          false
        ],
        [
          869,
          "flow",
          868,
          "flow",
          false
        ],
        [
          866,
          "val",
          868,
          "A",
          false
        ],
        [
          869,
          "num",
          868,
          "B",
          false
        ],
        [
          866,
          "flow",
          869,
          "flow",
          false
        ],
        [
          865,
          "flag",
          869,
          "val",
          false
        ],
        [
          868,
          "false",
          870,
          "flow",
          false
        ],
        [
          865,
          "flag",
          870,
          "condition",
          false
        ],
        [
          830,
          "True",
          871,
          "flow",
          false
        ],
        [
          822,
          "flow",
          872,
          "flow",
          false
        ],
        [
          206,
          "down",
          873,
          "flow",
          false
        ],
        [
          9876,
          "down",
          873,
          "flow",
          false
        ],
        [
          878,
          "down",
          873,
          "flow",
          false
        ],
        [
          104,
          "flow",
          874,
          "flow",
          false
        ],
        [
          171,
          "down",
          874,
          "reset",
          false
        ],
        [
          148,
          "down",
          874,
          "reset",
          false
        ],
        [
          1572,
          "True",
          874,
          "reset",
          false
        ],
        [
          126,
          "down",
          874,
          "reset",
          false
        ],
        [
          946,
          "true",
          875,
          "flow",
          false
        ],
        [
          759,
          "trucks",
          875,
          "file",
          false
        ],
        [
          653,
          "flow",
          876,
          "flow",
          false
        ],
        [
          833,
          "false",
          876,
          "on",
          false
        ],
        [
          10116,
          "flow",
          876,
          "on",
          false
        ],
        [
          591,
          "false",
          876,
          "off",
          false
        ],
        [
          10259,
          "loaded",
          877,
          "flow",
          false
        ],
        [
          591,
          "false",
          877,
          "reset",
          false
        ],
        [
          10259,
          "vehicleIds",
          877,
          "vehicleIds",
          false
        ],
        [
          983,
          "false",
          878,
          "flow",
          false
        ],
        [
          1385,
          "True",
          879,
          "flow",
          false
        ],
        [
          1382,
          "none",
          879,
          "flow",
          false
        ],
        [
          1226,
          "True",
          879,
          "flow",
          false
        ],
        [
          1257,
          "flow",
          880,
          "flow",
          false
        ],
        [
          1387,
          "flow",
          880,
          "flow",
          false
        ],
        [
          879,
          "flow",
          880,
          "flow",
          false
        ],
        [
          885,
          "flow",
          881,
          "flow",
          false
        ],
        [
          1536,
          "flow",
          882,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          882,
          "veid",
          false
        ],
        [
          364,
          "val",
          882,
          "gid",
          false
        ],
        [
          881,
          "flow",
          883,
          "flow",
          false
        ],
        [
          476,
          "vehId",
          883,
          "vehId",
          false
        ],
        [
          881,
          "pos",
          883,
          "pos",
          false
        ],
        [
          881,
          "rot",
          883,
          "rot",
          false
        ],
        [
          883,
          "flow",
          884,
          "flow",
          false
        ],
        [
          980,
          "flow",
          885,
          "flow",
          false
        ],
        [
          887,
          "flow",
          886,
          "flow",
          false
        ],
        [
          491,
          "flow",
          887,
          "flow",
          false
        ],
        [
          474,
          "flow",
          888,
          "flow",
          false
        ],
        [
          7,
          "flow",
          889,
          "flow",
          false
        ],
        [
          332,
          "vehId",
          889,
          "veid",
          false
        ],
        [
          1223,
          "out",
          890,
          "flow",
          false
        ],
        [
          889,
          "output",
          890,
          "fetchspd",
          false
        ],
        [
          890,
          "flow",
          891,
          "flow",
          false
        ],
        [
          890,
          "cantow",
          891,
          "condition",
          false
        ],
        [
          1172,
          "none",
          892,
          "flow",
          false
        ],
        [
          892,
          "flow",
          893,
          "flow",
          false
        ],
        [
          315,
          "flow",
          894,
          "flow",
          false
        ],
        [
          894,
          "flow",
          895,
          "flow",
          false
        ],
        [
          894,
          "val",
          895,
          "A",
          false
        ],
        [
          893,
          "flow",
          896,
          "flow",
          false
        ],
        [
          892,
          "gforce",
          896,
          "A",
          false
        ],
        [
          893,
          "val",
          896,
          "B",
          false
        ],
        [
          896,
          "true",
          897,
          "flow",
          false
        ],
        [
          1307,
          "true",
          897,
          "flow",
          false
        ],
        [
          1438,
          "true",
          897,
          "flow",
          false
        ],
        [
          157,
          "flow",
          898,
          "flow",
          false
        ],
        [
          157,
          "failg",
          898,
          "val",
          false
        ],
        [
          27,
          "flow",
          899,
          "flow",
          false
        ],
        [
          598,
          "flow",
          902,
          "flow",
          false
        ],
        [
          585,
          "value",
          902,
          "A",
          false
        ],
        [
          598,
          "value",
          902,
          "B",
          false
        ],
        [
          1296,
          "flow",
          903,
          "flow",
          false
        ],
        [
          1290,
          "val",
          903,
          "type",
          false
        ],
        [
          1179,
          "down",
          904,
          "flow",
          false
        ],
        [
          740,
          "shopFile",
          904,
          "shopFile",
          false
        ],
        [
          135,
          "val",
          904,
          "slot",
          false
        ],
        [
          10060,
          "flow",
          905,
          "flow",
          false
        ],
        [
          836,
          "extras",
          905,
          "filename",
          false
        ],
        [
          132,
          "flow",
          906,
          "flow",
          false
        ],
        [
          355,
          "spawnids",
          906,
          "idtable",
          false
        ],
        [
          775,
          "flow",
          908,
          "flow",
          false
        ],
        [
          68,
          "flow",
          909,
          "flow",
          false
        ],
        [
          68,
          "day",
          909,
          "day",
          false
        ],
        [
          846,
          "sseed",
          909,
          "sseed",
          false
        ],
        [
          905,
          "flow",
          910,
          "flow",
          false
        ],
        [
          905,
          "output",
          910,
          "input",
          false
        ],
        [
          1476,
          "False",
          911,
          "flow",
          false
        ],
        [
          365,
          "flow",
          912,
          "flow",
          false
        ],
        [
          910,
          "fueling",
          912,
          "condition",
          false
        ],
        [
          911,
          "flow",
          913,
          "flow",
          false
        ],
        [
          911,
          "val",
          913,
          "X",
          false
        ],
        [
          913,
          "flow",
          916,
          "flow",
          false
        ],
        [
          913,
          "Y",
          916,
          "value",
          false
        ],
        [
          520,
          "flow",
          917,
          "flow",
          false
        ],
        [
          516,
          "veid",
          917,
          "veid",
          false
        ],
        [
          295,
          "bsfile",
          917,
          "filename",
          false
        ],
        [
          185,
          "down",
          918,
          "flow",
          false
        ],
        [
          927,
          "flow",
          919,
          "flow",
          false
        ],
        [
          927,
          "output",
          919,
          "data",
          false
        ],
        [
          925,
          "val",
          919,
          "id",
          false
        ],
        [
          992,
          "True",
          920,
          "flow",
          false
        ],
        [
          990,
          "extras",
          920,
          "extras",
          false
        ],
        [
          490,
          "flow",
          921,
          "flow",
          false
        ],
        [
          143,
          "trigger",
          922,
          "flow",
          false
        ],
        [
          503,
          "flow",
          923,
          "flow",
          false
        ],
        [
          503,
          "dayChange",
          923,
          "condition",
          false
        ],
        [
          923,
          "True",
          924,
          "flow",
          false
        ],
        [
          185,
          "flow",
          925,
          "flow",
          false
        ],
        [
          1478,
          "flow",
          925,
          "flow",
          false
        ],
        [
          1634,
          "flow",
          925,
          "flow",
          false
        ],
        [
          925,
          "flow",
          926,
          "flow",
          false
        ],
        [
          925,
          "val",
          926,
          "id",
          false
        ],
        [
          926,
          "flow",
          927,
          "flow",
          false
        ],
        [
          926,
          "filename",
          927,
          "filename",
          false
        ],
        [
          919,
          "flow",
          928,
          "flow",
          false
        ],
        [
          919,
          "scrapVal",
          928,
          "value",
          false
        ],
        [
          10267,
          "flow",
          930,
          "flow",
          false
        ],
        [
          925,
          "val",
          930,
          "carid",
          false
        ],
        [
          10267,
          "val",
          930,
          "count",
          false
        ],
        [
          933,
          "flow",
          931,
          "flow",
          false
        ],
        [
          933,
          "Y",
          931,
          "val",
          false
        ],
        [
          1567,
          "False",
          932,
          "flow",
          false
        ],
        [
          701,
          "actual",
          932,
          "vehId",
          false
        ],
        [
          1577,
          "flow",
          933,
          "flow",
          false
        ],
        [
          934,
          "flow",
          933,
          "flow",
          false
        ],
        [
          10267,
          "val",
          933,
          "X",
          false
        ],
        [
          932,
          "flow",
          934,
          "flow",
          false
        ],
        [
          10268,
          "flow",
          935,
          "flow",
          false
        ],
        [
          10268,
          "val",
          935,
          "X",
          false
        ],
        [
          919,
          "scrapVal",
          935,
          "DX",
          false
        ],
        [
          935,
          "flow",
          936,
          "flow",
          false
        ],
        [
          935,
          "Y",
          936,
          "val",
          false
        ],
        [
          936,
          "flow",
          937,
          "flow",
          false
        ],
        [
          935,
          "Y",
          937,
          "money",
          false
        ],
        [
          933,
          "Y",
          937,
          "carCount",
          false
        ],
        [
          912,
          "True",
          938,
          "flow",
          false
        ],
        [
          1508,
          "flow",
          938,
          "flow",
          false
        ],
        [
          10292,
          "flow",
          938,
          "flow",
          false
        ],
        [
          937,
          "flow",
          939,
          "flow",
          false
        ],
        [
          918,
          "flow",
          940,
          "flow",
          false
        ],
        [
          193,
          "down",
          940,
          "flow",
          false
        ],
        [
          940,
          "flow",
          941,
          "flow",
          false
        ],
        [
          93,
          "flow",
          942,
          "flow",
          false
        ],
        [
          942,
          "flow",
          943,
          "flow",
          false
        ],
        [
          942,
          "val",
          943,
          "A",
          false
        ],
        [
          939,
          "flow",
          944,
          "flow",
          false
        ],
        [
          10094,
          "flow",
          945,
          "flow",
          false
        ],
        [
          876,
          "flow",
          946,
          "flow",
          false
        ],
        [
          846,
          "trucks",
          946,
          "A",
          true
        ],
        [
          946,
          "false",
          947,
          "flow",
          false
        ],
        [
          591,
          "false",
          947,
          "reset",
          false
        ],
        [
          126,
          "flow",
          948,
          "flow",
          false
        ],
        [
          948,
          "flow",
          949,
          "flow",
          false
        ],
        [
          948,
          "val",
          949,
          "A",
          false
        ],
        [
          945,
          "flow",
          950,
          "flow",
          false
        ],
        [
          817,
          "flow",
          951,
          "flow",
          false
        ],
        [
          748,
          "flow",
          952,
          "flow",
          false
        ],
        [
          748,
          "position",
          952,
          "pos",
          false
        ],
        [
          748,
          "rotation",
          952,
          "rot",
          false
        ],
        [
          735,
          "True",
          953,
          "flow",
          false
        ],
        [
          1211,
          "flow",
          954,
          "flow",
          false
        ],
        [
          951,
          "flow",
          955,
          "flow",
          false
        ],
        [
          951,
          "val",
          955,
          "A",
          false
        ],
        [
          955,
          "false",
          956,
          "flow",
          false
        ],
        [
          335,
          "flow",
          957,
          "flow",
          false
        ],
        [
          957,
          "flow",
          958,
          "flow",
          false
        ],
        [
          957,
          "val",
          958,
          "A",
          false
        ],
        [
          1332,
          "True",
          959,
          "flow",
          false
        ],
        [
          959,
          "flow",
          960,
          "flow",
          false
        ],
        [
          959,
          "val",
          960,
          "A",
          false
        ],
        [
          960,
          "false",
          961,
          "flow",
          false
        ],
        [
          249,
          "flow",
          962,
          "flow",
          false
        ],
        [
          958,
          "false",
          963,
          "flow",
          false
        ],
        [
          960,
          "true",
          964,
          "flow",
          false
        ],
        [
          964,
          "flow",
          965,
          "flow",
          false
        ],
        [
          964,
          "val",
          965,
          "A",
          false
        ],
        [
          965,
          "false",
          966,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          967,
          "flow",
          false
        ],
        [
          126,
          "down",
          968,
          "flow",
          false
        ],
        [
          969,
          "vehId",
          968,
          "input",
          false
        ],
        [
          7,
          "flow",
          971,
          "flow",
          true
        ],
        [
          971,
          "flow",
          972,
          "flow",
          false
        ],
        [
          972,
          "flow",
          973,
          "flow",
          false
        ],
        [
          972,
          "flag",
          973,
          "condition",
          false
        ],
        [
          971,
          "flow",
          974,
          "flow",
          false
        ],
        [
          973,
          "True",
          974,
          "on",
          false
        ],
        [
          1578,
          "False",
          975,
          "flow",
          false
        ],
        [
          1103,
          "vehid",
          975,
          "vehId",
          false
        ],
        [
          157,
          "flow",
          976,
          "flow",
          false
        ],
        [
          157,
          "trailer",
          976,
          "val",
          false
        ],
        [
          978,
          "flow",
          977,
          "flow",
          false
        ],
        [
          974,
          "flow",
          978,
          "flow",
          false
        ],
        [
          974,
          "flow",
          979,
          "flow",
          false
        ],
        [
          971,
          "flow",
          980,
          "flow",
          false
        ],
        [
          979,
          "completed",
          980,
          "on",
          false
        ],
        [
          811,
          "true",
          981,
          "flow",
          false
        ],
        [
          981,
          "flow",
          982,
          "flow",
          false
        ],
        [
          981,
          "val",
          982,
          "A",
          false
        ],
        [
          984,
          "flow",
          983,
          "flow",
          false
        ],
        [
          984,
          "val",
          983,
          "A",
          false
        ],
        [
          176,
          "flow",
          984,
          "flow",
          false
        ],
        [
          37,
          "flow",
          985,
          "flow",
          false
        ],
        [
          7,
          "flow",
          986,
          "flow",
          true
        ],
        [
          986,
          "flow",
          987,
          "flow",
          false
        ],
        [
          986,
          "flag",
          987,
          "condition",
          false
        ],
        [
          333,
          "true",
          988,
          "flow",
          false
        ],
        [
          10084,
          "flow",
          989,
          "flow",
          false
        ],
        [
          250,
          "flowB",
          990,
          "flow",
          false
        ],
        [
          137,
          "triggerName",
          990,
          "name",
          false
        ],
        [
          835,
          "output",
          990,
          "tdata",
          true
        ],
        [
          990,
          "flow",
          991,
          "flow",
          false
        ],
        [
          990,
          "typeID",
          991,
          "typeID",
          false
        ],
        [
          991,
          "flow",
          992,
          "flow",
          false
        ],
        [
          991,
          "result",
          992,
          "condition",
          false
        ],
        [
          7,
          "flow",
          993,
          "flow",
          false
        ],
        [
          993,
          "flow",
          994,
          "flow",
          false
        ],
        [
          993,
          "flag",
          994,
          "condition",
          false
        ],
        [
          842,
          "flow",
          995,
          "flow",
          false
        ],
        [
          531,
          "useExtraText",
          995,
          "condition",
          false
        ],
        [
          994,
          "True",
          996,
          "flow",
          false
        ],
        [
          994,
          "False",
          996,
          "reset",
          false
        ],
        [
          1424,
          "True",
          997,
          "flow",
          false
        ],
        [
          203,
          "flow",
          998,
          "flow",
          false
        ],
        [
          846,
          "sleepTime",
          998,
          "value",
          true
        ],
        [
          1001,
          "flow",
          999,
          "flow",
          false
        ],
        [
          497,
          "veid",
          999,
          "vehId",
          false
        ],
        [
          1004,
          "flow",
          1000,
          "flow",
          false
        ],
        [
          1004,
          "val",
          1000,
          "vehId",
          false
        ],
        [
          495,
          "flow",
          1001,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1001,
          "val",
          false
        ],
        [
          860,
          "flow",
          1002,
          "flow",
          false
        ],
        [
          516,
          "flow",
          1003,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1003,
          "val",
          false
        ],
        [
          1087,
          "flow",
          1004,
          "flow",
          false
        ],
        [
          531,
          "flow",
          1005,
          "flow",
          false
        ],
        [
          531,
          "setStartTime",
          1005,
          "condition",
          false
        ],
        [
          1005,
          "True",
          1006,
          "flow",
          false
        ],
        [
          531,
          "startTime",
          1006,
          "val",
          false
        ],
        [
          1006,
          "flow",
          1007,
          "flow",
          false
        ],
        [
          1009,
          "flow",
          1008,
          "flow",
          false
        ],
        [
          1009,
          "val",
          1008,
          "A",
          false
        ],
        [
          820,
          "match_3",
          1009,
          "flow",
          false
        ],
        [
          1008,
          "true",
          1010,
          "flow",
          false
        ],
        [
          1013,
          "flow",
          1011,
          "flow",
          false
        ],
        [
          1013,
          "failed",
          1011,
          "condition",
          false
        ],
        [
          1011,
          "True",
          1012,
          "flow",
          false
        ],
        [
          10276,
          "flow",
          1013,
          "flow",
          false
        ],
        [
          531,
          "startTime",
          1013,
          "startTime",
          false
        ],
        [
          531,
          "timerReady",
          1013,
          "ready",
          false
        ],
        [
          829,
          "targetTime",
          1013,
          "targetTime",
          false
        ],
        [
          531,
          "endTime",
          1013,
          "endTime",
          false
        ],
        [
          10276,
          "val",
          1013,
          "failed",
          false
        ],
        [
          531,
          "finished",
          1013,
          "finished",
          false
        ],
        [
          1023,
          "flow",
          1014,
          "flow",
          false
        ],
        [
          531,
          "nextcp",
          1014,
          "ccp",
          false
        ],
        [
          531,
          "tcount",
          1014,
          "cpc",
          false
        ],
        [
          988,
          "flow",
          1015,
          "flow",
          false
        ],
        [
          10278,
          "flow",
          1016,
          "flow",
          false
        ],
        [
          10278,
          "val",
          1016,
          "A",
          false
        ],
        [
          825,
          "down",
          1017,
          "flow",
          false
        ],
        [
          829,
          "type",
          1017,
          "value",
          false
        ],
        [
          989,
          "flow",
          1018,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1019,
          "flow",
          false
        ],
        [
          1019,
          "flow",
          1020,
          "flow",
          false
        ],
        [
          1019,
          "flag",
          1020,
          "condition",
          false
        ],
        [
          539,
          "flow",
          1021,
          "flow",
          false
        ],
        [
          10082,
          "flow",
          1022,
          "flow",
          false
        ],
        [
          1013,
          "flow",
          1023,
          "flow",
          false
        ],
        [
          1013,
          "time",
          1023,
          "value",
          false
        ],
        [
          1030,
          "flow",
          1024,
          "flow",
          false
        ],
        [
          146,
          "down",
          1025,
          "flow",
          false
        ],
        [
          1106,
          "flow",
          1025,
          "flow",
          false
        ],
        [
          1134,
          "down",
          1026,
          "flow",
          false
        ],
        [
          1107,
          "flow",
          1026,
          "flow",
          false
        ],
        [
          1175,
          "down",
          1026,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1027,
          "flow",
          false
        ],
        [
          799,
          "flow",
          1028,
          "flow",
          false
        ],
        [
          843,
          "down",
          1028,
          "on",
          false
        ],
        [
          10245,
          "down",
          1028,
          "on",
          false
        ],
        [
          1028,
          "flow",
          1029,
          "flow",
          false
        ],
        [
          10245,
          "down",
          1029,
          "reset",
          false
        ],
        [
          843,
          "down",
          1029,
          "reset",
          false
        ],
        [
          1029,
          "flow",
          1030,
          "flow",
          false
        ],
        [
          10245,
          "down",
          1030,
          "reset",
          false
        ],
        [
          843,
          "down",
          1030,
          "reset",
          false
        ],
        [
          1016,
          "true",
          1031,
          "flow",
          false
        ],
        [
          843,
          "down",
          1031,
          "reset",
          false
        ],
        [
          10245,
          "down",
          1031,
          "reset",
          false
        ],
        [
          1036,
          "flow",
          1032,
          "flow",
          false
        ],
        [
          1033,
          "False",
          1032,
          "reset",
          false
        ],
        [
          843,
          "down",
          1032,
          "reset",
          false
        ],
        [
          10245,
          "down",
          1032,
          "reset",
          false
        ],
        [
          1036,
          "pos",
          1032,
          "position",
          false
        ],
        [
          803,
          "flow",
          1033,
          "flow",
          false
        ],
        [
          531,
          "showbm",
          1033,
          "condition",
          false
        ],
        [
          1031,
          "flow",
          1034,
          "flow",
          false
        ],
        [
          10281,
          "flow",
          1035,
          "flow",
          false
        ],
        [
          1033,
          "True",
          1036,
          "flow",
          false
        ],
        [
          531,
          "bmid",
          1036,
          "newPin",
          false
        ],
        [
          1024,
          "flow",
          1037,
          "flow",
          false
        ],
        [
          130,
          "flow",
          1038,
          "flow",
          false
        ],
        [
          1037,
          "flow",
          1039,
          "flow",
          false
        ],
        [
          825,
          "down",
          1040,
          "flow",
          false
        ],
        [
          829,
          "traffic",
          1040,
          "condition",
          false
        ],
        [
          1040,
          "False",
          1041,
          "flow",
          false
        ],
        [
          1038,
          "flow",
          1042,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1044,
          "flow",
          false
        ],
        [
          1044,
          "flow",
          1045,
          "flow",
          false
        ],
        [
          1045,
          "flow",
          1046,
          "flow",
          false
        ],
        [
          1045,
          "val",
          1046,
          "A",
          false
        ],
        [
          1066,
          "flow",
          1047,
          "flow",
          false
        ],
        [
          1048,
          "val",
          1047,
          "startTime",
          false
        ],
        [
          1049,
          "val",
          1047,
          "endTime",
          false
        ],
        [
          1052,
          "val",
          1047,
          "winner",
          false
        ],
        [
          1066,
          "val",
          1047,
          "ready",
          false
        ],
        [
          1046,
          "true",
          1048,
          "flow",
          false
        ],
        [
          1048,
          "flow",
          1049,
          "flow",
          false
        ],
        [
          1035,
          "flow",
          1050,
          "flow",
          false
        ],
        [
          829,
          "traffic",
          1050,
          "condition",
          false
        ],
        [
          968,
          "flow",
          1051,
          "flow",
          false
        ],
        [
          1049,
          "flow",
          1052,
          "flow",
          false
        ],
        [
          1046,
          "true",
          1053,
          "flow",
          false
        ],
        [
          1046,
          "false",
          1053,
          "reset",
          false
        ],
        [
          1053,
          "flow",
          1054,
          "flow",
          false
        ],
        [
          1046,
          "false",
          1055,
          "flow",
          false
        ],
        [
          1046,
          "true",
          1055,
          "reset",
          false
        ],
        [
          1055,
          "flow",
          1056,
          "flow",
          false
        ],
        [
          464,
          "finished",
          1057,
          "flow",
          false
        ],
        [
          450,
          "flow",
          1058,
          "flow",
          false
        ],
        [
          10022,
          "flow",
          1058,
          "flow",
          false
        ],
        [
          1058,
          "flow",
          1059,
          "flow",
          false
        ],
        [
          1058,
          "time",
          1059,
          "val",
          false
        ],
        [
          1050,
          "False",
          1060,
          "flow",
          false
        ],
        [
          1047,
          "flow",
          1061,
          "flow",
          false
        ],
        [
          1047,
          "time",
          1061,
          "value",
          false
        ],
        [
          1065,
          "flow",
          1062,
          "flow",
          false
        ],
        [
          1065,
          "val",
          1062,
          "clap",
          false
        ],
        [
          275,
          "laps",
          1062,
          "laps",
          false
        ],
        [
          1062,
          "flow",
          1063,
          "flow",
          false
        ],
        [
          1064,
          "val",
          1063,
          "ccp",
          false
        ],
        [
          275,
          "cpcount",
          1063,
          "cpc",
          false
        ],
        [
          1061,
          "flow",
          1064,
          "flow",
          false
        ],
        [
          1064,
          "flow",
          1065,
          "flow",
          false
        ],
        [
          1052,
          "flow",
          1066,
          "flow",
          false
        ],
        [
          1181,
          "down",
          1067,
          "flow",
          false
        ],
        [
          1071,
          "flow",
          1068,
          "flow",
          false
        ],
        [
          1072,
          "flow",
          1070,
          "flow",
          false
        ],
        [
          10017,
          "down",
          1070,
          "reset",
          false
        ],
        [
          1070,
          "flow",
          1071,
          "flow",
          false
        ],
        [
          10017,
          "down",
          1071,
          "reset",
          false
        ],
        [
          7,
          "flow",
          1072,
          "flow",
          false
        ],
        [
          10017,
          "down",
          1072,
          "on",
          false
        ],
        [
          162,
          "flow",
          1073,
          "flow",
          false
        ],
        [
          1514,
          "True",
          1073,
          "flow",
          false
        ],
        [
          591,
          "false",
          1073,
          "reset",
          false
        ],
        [
          846,
          "copstrict",
          1073,
          "policeStrictness",
          false
        ],
        [
          10216,
          "flow",
          1074,
          "flow",
          false
        ],
        [
          601,
          "filename",
          1074,
          "file",
          false
        ],
        [
          455,
          "mass",
          1074,
          "tval",
          false
        ],
        [
          7,
          "flow",
          1075,
          "flow",
          true
        ],
        [
          1082,
          "flow",
          1076,
          "flow",
          false
        ],
        [
          1076,
          "flow",
          1077,
          "flow",
          false
        ],
        [
          1076,
          "val",
          1077,
          "A",
          false
        ],
        [
          1084,
          "true",
          1078,
          "flow",
          false
        ],
        [
          1076,
          "val",
          1078,
          "chp",
          false
        ],
        [
          455,
          "flow",
          1079,
          "flow",
          false
        ],
        [
          455,
          "mass",
          1079,
          "val",
          false
        ],
        [
          668,
          "flow",
          1080,
          "flow",
          false
        ],
        [
          402,
          "flow",
          1081,
          "flow",
          false
        ],
        [
          455,
          "mass",
          1081,
          "input",
          false
        ],
        [
          1075,
          "flow",
          1082,
          "flow",
          false
        ],
        [
          1078,
          "flow",
          1083,
          "flow",
          false
        ],
        [
          1078,
          "nhp",
          1083,
          "val",
          false
        ],
        [
          1077,
          "true",
          1084,
          "flow",
          false
        ],
        [
          1076,
          "val",
          1084,
          "A",
          false
        ],
        [
          411,
          "flow",
          1085,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          1085,
          "veid",
          false
        ],
        [
          1081,
          "output",
          1085,
          "mass",
          false
        ],
        [
          1132,
          "flow",
          1086,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1086,
          "veid",
          false
        ],
        [
          295,
          "nos",
          1086,
          "mass",
          false
        ],
        [
          882,
          "flow",
          1087,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          1087,
          "veid",
          false
        ],
        [
          1080,
          "val",
          1087,
          "mass",
          false
        ],
        [
          84,
          "flow",
          1088,
          "flow",
          false
        ],
        [
          1088,
          "flow",
          1089,
          "flow",
          false
        ],
        [
          1088,
          "hasNos",
          1089,
          "flag",
          false
        ],
        [
          944,
          "flow",
          1090,
          "flow",
          false
        ],
        [
          950,
          "flow",
          1091,
          "flow",
          false
        ],
        [
          561,
          "flow",
          1092,
          "flow",
          false
        ],
        [
          641,
          "True",
          1092,
          "flow",
          false
        ],
        [
          1094,
          "True",
          1093,
          "flow",
          false
        ],
        [
          1473,
          "flow",
          1094,
          "flow",
          false
        ],
        [
          193,
          "flow",
          1094,
          "flow",
          false
        ],
        [
          271,
          "flow",
          1094,
          "flow",
          false
        ],
        [
          466,
          "flag",
          1094,
          "condition",
          false
        ],
        [
          1096,
          "True",
          1095,
          "flow",
          false
        ],
        [
          455,
          "fillinfo",
          1095,
          "text",
          false
        ],
        [
          10287,
          "flow",
          1096,
          "flow",
          false
        ],
        [
          455,
          "canFill",
          1096,
          "condition",
          false
        ],
        [
          1095,
          "down",
          1097,
          "flow",
          false
        ],
        [
          267,
          "val",
          1097,
          "A",
          false
        ],
        [
          455,
          "fillCost",
          1097,
          "B",
          false
        ],
        [
          1557,
          "False",
          1098,
          "flow",
          false
        ],
        [
          968,
          "output",
          1098,
          "vehId",
          false
        ],
        [
          1097,
          "true",
          1099,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          1099,
          "veid",
          false
        ],
        [
          455,
          "mass",
          1099,
          "mass",
          false
        ],
        [
          455,
          "cap",
          1099,
          "cap",
          false
        ],
        [
          1099,
          "flow",
          1100,
          "flow",
          false
        ],
        [
          267,
          "val",
          1100,
          "X",
          false
        ],
        [
          1099,
          "paid",
          1100,
          "DX",
          false
        ],
        [
          1100,
          "flow",
          1101,
          "flow",
          false
        ],
        [
          1100,
          "Y",
          1101,
          "val",
          false
        ],
        [
          1101,
          "flow",
          1102,
          "flow",
          false
        ],
        [
          1100,
          "Y",
          1102,
          "money",
          false
        ],
        [
          853,
          "flow",
          1103,
          "flow",
          false
        ],
        [
          355,
          "spawnids",
          1103,
          "idtable",
          false
        ],
        [
          400,
          "flow",
          1104,
          "flow",
          false
        ],
        [
          1559,
          "False",
          1105,
          "flow",
          false
        ],
        [
          968,
          "output",
          1105,
          "val",
          false
        ],
        [
          1559,
          "True",
          1106,
          "flow",
          false
        ],
        [
          1105,
          "flow",
          1106,
          "flow",
          false
        ],
        [
          1379,
          "flow",
          1107,
          "flow",
          false
        ],
        [
          10271,
          "flow",
          1107,
          "flow",
          false
        ],
        [
          605,
          "True",
          1107,
          "flow",
          false
        ],
        [
          10171,
          "flow",
          1108,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1110,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1111,
          "flow",
          false
        ],
        [
          836,
          "flow",
          1112,
          "flow",
          false
        ],
        [
          836,
          "typeName",
          1112,
          "value",
          false
        ],
        [
          1435,
          "flow",
          1114,
          "flow",
          false
        ],
        [
          1108,
          "flow",
          1115,
          "flow",
          false
        ],
        [
          1108,
          "flag",
          1115,
          "condition",
          false
        ],
        [
          1510,
          "down",
          1116,
          "flow",
          false
        ],
        [
          1115,
          "True",
          1117,
          "flow",
          false
        ],
        [
          89,
          "flow",
          1118,
          "flow",
          false
        ],
        [
          526,
          "flow",
          1119,
          "flow",
          false
        ],
        [
          10017,
          "down",
          1119,
          "flow",
          false
        ],
        [
          68,
          "flow",
          1120,
          "flow",
          false
        ],
        [
          68,
          "carCount",
          1120,
          "val",
          false
        ],
        [
          1118,
          "flow",
          1121,
          "flow",
          true
        ],
        [
          10235,
          "flow",
          1122,
          "flow_1",
          false
        ],
        [
          1112,
          "match_2",
          1122,
          "flow_2",
          false
        ],
        [
          10171,
          "true",
          1123,
          "flow",
          false
        ],
        [
          1123,
          "flow",
          1124,
          "flow",
          false
        ],
        [
          1123,
          "val",
          1124,
          "A",
          false
        ],
        [
          1116,
          "flow",
          1125,
          "flow",
          false
        ],
        [
          56,
          "vehId",
          1125,
          "veid",
          false
        ],
        [
          7,
          "enterState",
          1126,
          "flow",
          false
        ],
        [
          372,
          "flow",
          1127,
          "flow",
          false
        ],
        [
          372,
          "output",
          1127,
          "total",
          false
        ],
        [
          910,
          "cost_selected",
          1127,
          "cost",
          false
        ],
        [
          396,
          "flow",
          1128,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1128,
          "veid",
          false
        ],
        [
          214,
          "gas",
          1128,
          "fuel",
          false
        ],
        [
          214,
          "fueltype",
          1128,
          "fueltype",
          false
        ],
        [
          214,
          "fuelratio",
          1128,
          "fuelratio",
          false
        ],
        [
          1382,
          "match_1",
          1129,
          "flow",
          false
        ],
        [
          146,
          "down",
          1130,
          "flow",
          false
        ],
        [
          820,
          "match_1",
          1131,
          "flow",
          false
        ],
        [
          399,
          "flow",
          1132,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1132,
          "veid",
          false
        ],
        [
          295,
          "gas",
          1132,
          "fuel",
          false
        ],
        [
          295,
          "fueltype",
          1132,
          "fueltype",
          false
        ],
        [
          295,
          "fuelratio",
          1132,
          "fuelratio",
          false
        ],
        [
          1605,
          "flow",
          1133,
          "flow",
          false
        ],
        [
          404,
          "flow",
          1134,
          "flow",
          false
        ],
        [
          1166,
          "True",
          1135,
          "flow",
          false
        ],
        [
          1153,
          "False",
          1135,
          "reset",
          false
        ],
        [
          1166,
          "False",
          1135,
          "reset",
          false
        ],
        [
          218,
          "flow",
          1137,
          "flow",
          false
        ],
        [
          1137,
          "flow",
          1138,
          "flow",
          false
        ],
        [
          1137,
          "val",
          1138,
          "extras",
          false
        ],
        [
          924,
          "flow",
          1139,
          "flow",
          false
        ],
        [
          1139,
          "flow",
          1140,
          "flow",
          false
        ],
        [
          1139,
          "val",
          1140,
          "rep",
          false
        ],
        [
          1140,
          "flow",
          1141,
          "flow",
          false
        ],
        [
          1140,
          "new",
          1141,
          "val",
          false
        ],
        [
          1138,
          "flow",
          1142,
          "flow",
          false
        ],
        [
          1142,
          "flow",
          1143,
          "flow",
          false
        ],
        [
          1142,
          "val",
          1143,
          "rep",
          false
        ],
        [
          1143,
          "flow",
          1144,
          "flow",
          false
        ],
        [
          1143,
          "new",
          1144,
          "val",
          false
        ],
        [
          902,
          "flow",
          1145,
          "flow",
          false
        ],
        [
          902,
          "C",
          1145,
          "condition",
          false
        ],
        [
          1188,
          "flow",
          1146,
          "flow",
          false
        ],
        [
          608,
          "active",
          1146,
          "gate",
          false
        ],
        [
          1146,
          "drain",
          1147,
          "flow",
          false
        ],
        [
          10126,
          "flow",
          1147,
          "reset",
          false
        ],
        [
          1147,
          "flow",
          1148,
          "flow",
          false
        ],
        [
          825,
          "flow",
          1149,
          "flow",
          false
        ],
        [
          840,
          "false",
          1149,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1150,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1152,
          "flow",
          false
        ],
        [
          1152,
          "flow",
          1153,
          "flow",
          false
        ],
        [
          1152,
          "flag",
          1153,
          "condition",
          false
        ],
        [
          1153,
          "True",
          1154,
          "flow",
          false
        ],
        [
          1153,
          "False",
          1154,
          "reset",
          false
        ],
        [
          1154,
          "flow",
          1155,
          "flow",
          false
        ],
        [
          1154,
          "flow",
          1155,
          "setVehId",
          false
        ],
        [
          1156,
          "vehId",
          1155,
          "vehId",
          false
        ],
        [
          1166,
          "True",
          1157,
          "flow",
          false
        ],
        [
          1157,
          "flow",
          1158,
          "flow",
          false
        ],
        [
          1157,
          "cachedScore",
          1158,
          "current",
          false
        ],
        [
          1157,
          "score",
          1158,
          "total",
          false
        ],
        [
          1155,
          "flow",
          1159,
          "flow",
          false
        ],
        [
          1153,
          "False",
          1160,
          "flow",
          false
        ],
        [
          1153,
          "True",
          1160,
          "reset",
          false
        ],
        [
          1164,
          "flow",
          1161,
          "flow",
          false
        ],
        [
          1135,
          "flow",
          1162,
          "flow",
          false
        ],
        [
          1135,
          "flow",
          1162,
          "resetDrift",
          false
        ],
        [
          1017,
          "match_2",
          1163,
          "flow",
          false
        ],
        [
          1160,
          "flow",
          1164,
          "flow",
          false
        ],
        [
          1160,
          "flow",
          1164,
          "resetDrift",
          false
        ],
        [
          1153,
          "True",
          1165,
          "flow",
          false
        ],
        [
          1165,
          "flow",
          1166,
          "flow",
          false
        ],
        [
          1165,
          "flag",
          1166,
          "condition",
          false
        ],
        [
          1157,
          "flow",
          1167,
          "flow",
          false
        ],
        [
          1157,
          "score",
          1167,
          "total",
          false
        ],
        [
          1157,
          "cachedScore",
          1167,
          "current",
          false
        ],
        [
          10245,
          "down",
          1168,
          "flow",
          false
        ],
        [
          843,
          "down",
          1168,
          "flow",
          false
        ],
        [
          1168,
          "flow",
          1169,
          "flow",
          false
        ],
        [
          1159,
          "flow",
          1170,
          "flow",
          false
        ],
        [
          1159,
          "flow",
          1170,
          "resetDrift",
          false
        ],
        [
          1164,
          "flow",
          1171,
          "flow",
          false
        ],
        [
          1170,
          "flow",
          1171,
          "flow",
          false
        ],
        [
          1301,
          "flow",
          1172,
          "flow",
          false
        ],
        [
          1301,
          "val",
          1172,
          "value",
          false
        ],
        [
          7,
          "enterState",
          1173,
          "flow",
          false
        ],
        [
          1173,
          "flow",
          1174,
          "flow",
          false
        ],
        [
          1134,
          "flow",
          1175,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1176,
          "flow",
          false
        ],
        [
          4986,
          "match_2",
          1177,
          "flow",
          false
        ],
        [
          4986,
          "match_1",
          1177,
          "flow",
          false
        ],
        [
          1250,
          "False",
          1178,
          "flow",
          false
        ],
        [
          928,
          "output",
          1178,
          "text",
          false
        ],
        [
          131,
          "true",
          1179,
          "flow",
          false
        ],
        [
          171,
          "flow",
          1180,
          "flow",
          false
        ],
        [
          255,
          "false",
          1180,
          "flow",
          false
        ],
        [
          247,
          "True",
          1181,
          "flow",
          false
        ],
        [
          965,
          "true",
          1182,
          "flow",
          false
        ],
        [
          10169,
          "flow",
          1183,
          "flow",
          false
        ],
        [
          10021,
          "flow",
          1184,
          "flow",
          false
        ],
        [
          1146,
          "drain",
          1185,
          "flow",
          false
        ],
        [
          368,
          "flow",
          1185,
          "reset",
          false
        ],
        [
          10128,
          "flow",
          1185,
          "reset",
          false
        ],
        [
          1185,
          "flow",
          1186,
          "flow",
          false
        ],
        [
          368,
          "flow",
          1186,
          "reset",
          false
        ],
        [
          10128,
          "flow",
          1186,
          "reset",
          false
        ],
        [
          36,
          "flow",
          1187,
          "flow",
          false
        ],
        [
          608,
          "flow",
          1188,
          "flow",
          false
        ],
        [
          608,
          "active",
          1188,
          "on",
          false
        ],
        [
          1186,
          "flow",
          1189,
          "flow",
          false
        ],
        [
          1189,
          "flow",
          1190,
          "flow",
          false
        ],
        [
          1189,
          "val",
          1190,
          "A",
          false
        ],
        [
          210,
          "down",
          1191,
          "flow",
          false
        ],
        [
          9876,
          "down",
          1191,
          "flow",
          false
        ],
        [
          867,
          "flow",
          1192,
          "flow",
          false
        ],
        [
          1375,
          "flow",
          1192,
          "flow",
          false
        ],
        [
          831,
          "flow",
          1193,
          "flow",
          false
        ],
        [
          1190,
          "true",
          1194,
          "flow",
          false
        ],
        [
          1194,
          "flow",
          1195,
          "flow",
          false
        ],
        [
          1194,
          "val",
          1195,
          "A",
          false
        ],
        [
          1195,
          "true",
          1196,
          "flow",
          false
        ],
        [
          1196,
          "flow",
          1197,
          "flow",
          false
        ],
        [
          1196,
          "val",
          1197,
          "A",
          false
        ],
        [
          485,
          "flow",
          1198,
          "flow",
          false
        ],
        [
          214,
          "damage",
          1198,
          "val",
          false
        ],
        [
          1089,
          "flow",
          1199,
          "flow",
          false
        ],
        [
          295,
          "damage",
          1199,
          "val",
          false
        ],
        [
          375,
          "flow",
          1200,
          "flow",
          false
        ],
        [
          1085,
          "flow",
          1201,
          "flow",
          false
        ],
        [
          1090,
          "flow",
          1202,
          "flow",
          false
        ],
        [
          1091,
          "flow",
          1203,
          "flow",
          false
        ],
        [
          10109,
          "flow",
          1204,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1206,
          "flow",
          false
        ],
        [
          1206,
          "flow",
          1207,
          "flow",
          false
        ],
        [
          1206,
          "flag",
          1207,
          "condition",
          false
        ],
        [
          1207,
          "True",
          1208,
          "flow",
          false
        ],
        [
          1553,
          "out",
          1209,
          "flow",
          false
        ],
        [
          1219,
          "vehId",
          1209,
          "veid",
          false
        ],
        [
          962,
          "flow",
          1210,
          "flow",
          false
        ],
        [
          10,
          "flow",
          1211,
          "flow",
          false
        ],
        [
          1214,
          "flow",
          1212,
          "flow",
          false
        ],
        [
          1209,
          "flow",
          1212,
          "reset",
          false
        ],
        [
          380,
          "flow",
          1213,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1214,
          "flow",
          false
        ],
        [
          1209,
          "flow",
          1214,
          "on",
          false
        ],
        [
          1103,
          "flow",
          1215,
          "flow",
          false
        ],
        [
          1217,
          "flow",
          1216,
          "flow",
          false
        ],
        [
          1217,
          "val",
          1216,
          "gid",
          false
        ],
        [
          1556,
          "flow",
          1217,
          "flow",
          false
        ],
        [
          1198,
          "flow",
          1218,
          "flow",
          false
        ],
        [
          1215,
          "flow",
          1221,
          "flow",
          false
        ],
        [
          1215,
          "flag",
          1221,
          "condition",
          false
        ],
        [
          203,
          "down",
          1222,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1223,
          "flow",
          false
        ],
        [
          1225,
          "flow",
          1224,
          "flow",
          false
        ],
        [
          1199,
          "flow",
          1225,
          "flow",
          false
        ],
        [
          1129,
          "flow",
          1226,
          "flow",
          false
        ],
        [
          1129,
          "result",
          1226,
          "condition",
          false
        ],
        [
          1002,
          "flow",
          1227,
          "flow",
          false
        ],
        [
          1203,
          "flow",
          1228,
          "flow",
          false
        ],
        [
          1202,
          "flow",
          1229,
          "flow",
          false
        ],
        [
          1200,
          "flow",
          1230,
          "flow",
          false
        ],
        [
          1204,
          "flow",
          1231,
          "flow",
          false
        ],
        [
          891,
          "True",
          1232,
          "flow",
          false
        ],
        [
          1237,
          "flow",
          1234,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1235,
          "flow",
          false
        ],
        [
          1235,
          "flow",
          1236,
          "flow",
          false
        ],
        [
          1235,
          "flag",
          1236,
          "condition",
          false
        ],
        [
          1236,
          "True",
          1237,
          "flow",
          false
        ],
        [
          1236,
          "False",
          1237,
          "reset",
          false
        ],
        [
          1234,
          "flow",
          1238,
          "flow",
          false
        ],
        [
          1234,
          "val",
          1238,
          "gid",
          false
        ],
        [
          1238,
          "flow",
          1239,
          "flow",
          false
        ],
        [
          1224,
          "flow",
          1240,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          1240,
          "gid",
          false
        ],
        [
          1218,
          "flow",
          1241,
          "flow",
          false
        ],
        [
          38,
          "val",
          1241,
          "gid",
          false
        ],
        [
          7,
          "flow",
          1243,
          "flow",
          false
        ],
        [
          1243,
          "flow",
          1244,
          "flow",
          false
        ],
        [
          1243,
          "flag",
          1244,
          "condition",
          false
        ],
        [
          1244,
          "True",
          1245,
          "flow",
          false
        ],
        [
          1244,
          "False",
          1245,
          "reset",
          false
        ],
        [
          1248,
          "flow",
          1246,
          "flow",
          false
        ],
        [
          1248,
          "val",
          1246,
          "gid",
          false
        ],
        [
          1246,
          "flow",
          1247,
          "flow",
          false
        ],
        [
          1245,
          "flow",
          1248,
          "flow",
          false
        ],
        [
          683,
          "flow",
          1249,
          "flow",
          false
        ],
        [
          1249,
          "flow",
          1250,
          "flow",
          false
        ],
        [
          1249,
          "flag",
          1250,
          "condition",
          false
        ],
        [
          1250,
          "True",
          1251,
          "flow",
          false
        ],
        [
          949,
          "true",
          1252,
          "flow",
          false
        ],
        [
          1252,
          "flow",
          1253,
          "flow",
          false
        ],
        [
          1252,
          "flag",
          1253,
          "condition",
          false
        ],
        [
          1255,
          "flow",
          1254,
          "flow",
          false
        ],
        [
          1253,
          "True",
          1255,
          "flow",
          false
        ],
        [
          1226,
          "False",
          1256,
          "flow",
          false
        ],
        [
          1256,
          "flow",
          1257,
          "flow",
          false
        ],
        [
          899,
          "down",
          1258,
          "flow",
          false
        ],
        [
          27,
          "down",
          1259,
          "flow",
          false
        ],
        [
          157,
          "flow",
          1260,
          "flow",
          false
        ],
        [
          157,
          "tdrot",
          1260,
          "val",
          false
        ],
        [
          157,
          "flow",
          1261,
          "flow",
          false
        ],
        [
          157,
          "tdpos",
          1261,
          "val",
          false
        ],
        [
          1263,
          "flow",
          1262,
          "flow",
          false
        ],
        [
          383,
          "tsrot",
          1262,
          "val",
          false
        ],
        [
          383,
          "flow",
          1263,
          "flow",
          false
        ],
        [
          383,
          "tspos",
          1263,
          "val",
          false
        ],
        [
          516,
          "flow",
          1264,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1264,
          "pid",
          false
        ],
        [
          497,
          "flow",
          1265,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1265,
          "pid",
          false
        ],
        [
          879,
          "down",
          1266,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1267,
          "flow",
          false
        ],
        [
          214,
          "flow",
          1268,
          "flow",
          false
        ],
        [
          38,
          "val",
          1268,
          "val",
          false
        ],
        [
          1383,
          "match_2",
          1269,
          "flow",
          false
        ],
        [
          1383,
          "match_1",
          1269,
          "flow",
          false
        ],
        [
          1269,
          "flow",
          1270,
          "flow",
          false
        ],
        [
          1270,
          "flow",
          1271,
          "flow",
          false
        ],
        [
          381,
          "flow",
          1273,
          "flow",
          false
        ],
        [
          1273,
          "flow",
          1274,
          "flow",
          false
        ],
        [
          1273,
          "val",
          1274,
          "val",
          false
        ],
        [
          1274,
          "flow",
          1275,
          "flow",
          false
        ],
        [
          1275,
          "flow",
          1276,
          "flow",
          false
        ],
        [
          1275,
          "flag",
          1276,
          "condition",
          false
        ],
        [
          1276,
          "True",
          1277,
          "flow",
          false
        ],
        [
          1275,
          "val",
          1277,
          "val",
          false
        ],
        [
          1276,
          "True",
          1278,
          "flow",
          false
        ],
        [
          1275,
          "val",
          1278,
          "reputation",
          false
        ],
        [
          381,
          "flow",
          1279,
          "flow",
          false
        ],
        [
          1279,
          "flow",
          1280,
          "flow",
          false
        ],
        [
          1279,
          "flag",
          1280,
          "condition",
          false
        ],
        [
          1280,
          "True",
          1281,
          "flow",
          false
        ],
        [
          1271,
          "flow",
          1282,
          "flow",
          false
        ],
        [
          1271,
          "val",
          1282,
          "config",
          false
        ],
        [
          1289,
          "flow",
          1283,
          "flow",
          false
        ],
        [
          1282,
          "model",
          1283,
          "model",
          false
        ],
        [
          1271,
          "val",
          1283,
          "config",
          false
        ],
        [
          1269,
          "val",
          1283,
          "pos",
          false
        ],
        [
          1270,
          "val",
          1283,
          "rot",
          false
        ],
        [
          1283,
          "flow",
          1284,
          "flow",
          false
        ],
        [
          1283,
          "veid",
          1284,
          "val",
          false
        ],
        [
          99,
          "match_3",
          1285,
          "flow",
          false
        ],
        [
          99,
          "match_2",
          1285,
          "flow",
          false
        ],
        [
          99,
          "match_4",
          1285,
          "flow",
          false
        ],
        [
          99,
          "match_5",
          1285,
          "flow",
          false
        ],
        [
          1285,
          "flow",
          1286,
          "flow",
          false
        ],
        [
          1285,
          "val",
          1286,
          "A",
          false
        ],
        [
          1284,
          "flow",
          1287,
          "flow",
          false
        ],
        [
          1289,
          "output",
          1287,
          "vehId",
          false
        ],
        [
          1282,
          "flow",
          1289,
          "flow",
          false
        ],
        [
          1288,
          "vehId",
          1289,
          "input",
          false
        ],
        [
          99,
          "match_2",
          1290,
          "flow",
          false
        ],
        [
          68,
          "flow",
          1291,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          1291,
          "val",
          false
        ],
        [
          128,
          "flow",
          1292,
          "flow",
          false
        ],
        [
          1296,
          "val",
          1292,
          "vehId",
          false
        ],
        [
          903,
          "flow",
          1293,
          "flow",
          false
        ],
        [
          128,
          "flow",
          1293,
          "clear",
          false
        ],
        [
          1296,
          "val",
          1293,
          "vehId",
          false
        ],
        [
          1294,
          "val",
          1293,
          "position",
          false
        ],
        [
          1295,
          "val",
          1293,
          "rotation",
          false
        ],
        [
          903,
          "scale",
          1293,
          "scale",
          false
        ],
        [
          861,
          "match_2",
          1294,
          "flow",
          false
        ],
        [
          861,
          "match_1",
          1294,
          "flow",
          false
        ],
        [
          1294,
          "flow",
          1295,
          "flow",
          false
        ],
        [
          1295,
          "flow",
          1296,
          "flow",
          false
        ],
        [
          1293,
          "stopped",
          1297,
          "flow",
          false
        ],
        [
          1300,
          "flow",
          1298,
          "flow",
          false
        ],
        [
          128,
          "flow",
          1298,
          "reset",
          false
        ],
        [
          1297,
          "flow",
          1299,
          "flow",
          false
        ],
        [
          1297,
          "hasTrailer",
          1299,
          "condition",
          false
        ],
        [
          1299,
          "False",
          1300,
          "flow",
          false
        ],
        [
          128,
          "flow",
          1300,
          "reset",
          false
        ],
        [
          1360,
          "true",
          1301,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1302,
          "flow",
          false
        ],
        [
          1304,
          "flow",
          1303,
          "flow",
          false
        ],
        [
          1304,
          "val",
          1303,
          "veid",
          false
        ],
        [
          1172,
          "match_1",
          1304,
          "flow",
          false
        ],
        [
          1172,
          "match_2",
          1304,
          "flow",
          false
        ],
        [
          1310,
          "flow",
          1305,
          "flow",
          false
        ],
        [
          1303,
          "output",
          1305,
          "fetch",
          false
        ],
        [
          1305,
          "flow",
          1306,
          "flow",
          false
        ],
        [
          1306,
          "flow",
          1307,
          "flow",
          false
        ],
        [
          1305,
          "gforce",
          1307,
          "A",
          false
        ],
        [
          1306,
          "val",
          1307,
          "B",
          false
        ],
        [
          7,
          "enterState",
          1308,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1309,
          "flow",
          false
        ],
        [
          1303,
          "flow",
          1310,
          "flow",
          false
        ],
        [
          128,
          "flow",
          1310,
          "reset",
          false
        ],
        [
          1314,
          "flow",
          1311,
          "flow",
          false
        ],
        [
          1445,
          "flow",
          1312,
          "flow",
          false
        ],
        [
          1447,
          "flow",
          1312,
          "flow",
          false
        ],
        [
          157,
          "failg",
          1312,
          "val",
          false
        ],
        [
          1309,
          "flow",
          1313,
          "flow",
          false
        ],
        [
          1309,
          "val",
          1313,
          "tid",
          false
        ],
        [
          1312,
          "flow",
          1314,
          "flow",
          false
        ],
        [
          892,
          "flow",
          1315,
          "flow",
          false
        ],
        [
          892,
          "gforce",
          1315,
          "val",
          false
        ],
        [
          1305,
          "flow",
          1316,
          "flow",
          false
        ],
        [
          1305,
          "gforce",
          1316,
          "val",
          false
        ],
        [
          210,
          "down",
          1317,
          "flow",
          false
        ],
        [
          9876,
          "down",
          1317,
          "flow",
          false
        ],
        [
          125,
          "match_1",
          1318,
          "flow",
          false
        ],
        [
          1318,
          "flow",
          1319,
          "flow",
          false
        ],
        [
          1318,
          "inside",
          1319,
          "condition",
          false
        ],
        [
          1319,
          "False",
          1320,
          "flow",
          false
        ],
        [
          60,
          "down",
          1321,
          "flow",
          false
        ],
        [
          1321,
          "flow",
          1322,
          "flow",
          false
        ],
        [
          1321,
          "flag",
          1322,
          "condition",
          false
        ],
        [
          64,
          "down",
          1323,
          "flow",
          false
        ],
        [
          1323,
          "flow",
          1324,
          "flow",
          false
        ],
        [
          1323,
          "flag",
          1324,
          "condition",
          false
        ],
        [
          107,
          "down",
          1325,
          "flow",
          false
        ],
        [
          1241,
          "flow",
          1326,
          "flow",
          false
        ],
        [
          109,
          "down",
          1327,
          "flow",
          false
        ],
        [
          1327,
          "flow",
          1328,
          "flow",
          false
        ],
        [
          1327,
          "flag",
          1328,
          "condition",
          false
        ],
        [
          1335,
          "true",
          1329,
          "flow",
          false
        ],
        [
          10213,
          "flow",
          1330,
          "flow",
          false
        ],
        [
          241,
          "hours",
          1330,
          "val",
          false
        ],
        [
          10212,
          "flow",
          1331,
          "flow",
          false
        ],
        [
          706,
          "flow",
          1332,
          "flow",
          false
        ],
        [
          707,
          "active",
          1332,
          "condition",
          false
        ],
        [
          7,
          "enterState",
          1333,
          "flow",
          false
        ],
        [
          1330,
          "flow",
          1334,
          "flow",
          false
        ],
        [
          1334,
          "flow",
          1335,
          "flow",
          false
        ],
        [
          1334,
          "val",
          1335,
          "A",
          false
        ],
        [
          752,
          "flow",
          1337,
          "flow",
          false
        ],
        [
          1118,
          "flow",
          1338,
          "flow",
          false
        ],
        [
          1342,
          "flow",
          1339,
          "flow",
          false
        ],
        [
          1340,
          "val",
          1339,
          "money",
          false
        ],
        [
          1341,
          "val",
          1339,
          "rep",
          false
        ],
        [
          1342,
          "val",
          1339,
          "cars",
          false
        ],
        [
          1353,
          "flow",
          1340,
          "flow",
          false
        ],
        [
          1340,
          "flow",
          1341,
          "flow",
          false
        ],
        [
          1341,
          "flow",
          1342,
          "flow",
          false
        ],
        [
          1356,
          "flow",
          1343,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1344,
          "flow",
          false
        ],
        [
          1357,
          "flow",
          1344,
          "on",
          false
        ],
        [
          1349,
          "flow",
          1345,
          "flow",
          false
        ],
        [
          1338,
          "flow",
          1346,
          "flow",
          false
        ],
        [
          1338,
          "flag",
          1346,
          "condition",
          false
        ],
        [
          493,
          "true",
          1347,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1348,
          "flow",
          false
        ],
        [
          1344,
          "flow",
          1349,
          "flow",
          false
        ],
        [
          1344,
          "flow",
          1350,
          "flow",
          false
        ],
        [
          1345,
          "out",
          1350,
          "A",
          false
        ],
        [
          1350,
          "true",
          1351,
          "flow",
          false
        ],
        [
          493,
          "true",
          1352,
          "flow",
          false
        ],
        [
          1352,
          "flow",
          1353,
          "flow",
          false
        ],
        [
          1358,
          "flow",
          1354,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1355,
          "flow",
          false
        ],
        [
          493,
          "true",
          1356,
          "flow",
          false
        ],
        [
          1339,
          "flow",
          1357,
          "flow",
          false
        ],
        [
          1351,
          "flow",
          1358,
          "flow",
          false
        ],
        [
          99,
          "match_2",
          1359,
          "flow",
          false
        ],
        [
          1359,
          "flow",
          1360,
          "flow",
          false
        ],
        [
          1359,
          "val",
          1360,
          "A",
          false
        ],
        [
          7,
          "flow",
          1362,
          "flow",
          false
        ],
        [
          1362,
          "flow",
          1363,
          "flow",
          false
        ],
        [
          1362,
          "flag",
          1363,
          "condition",
          false
        ],
        [
          1363,
          "True",
          1364,
          "flow",
          false
        ],
        [
          1363,
          "False",
          1364,
          "reset",
          false
        ],
        [
          1364,
          "flow",
          1365,
          "flow",
          false
        ],
        [
          1365,
          "flow",
          1366,
          "flow",
          false
        ],
        [
          1365,
          "val",
          1366,
          "file",
          false
        ],
        [
          1366,
          "flow",
          1367,
          "flow",
          false
        ],
        [
          232,
          "flow",
          1368,
          "flow",
          false
        ],
        [
          1228,
          "flow",
          1369,
          "flow",
          false
        ],
        [
          1229,
          "flow",
          1370,
          "flow",
          false
        ],
        [
          39,
          "flow",
          1371,
          "flow",
          false
        ],
        [
          56,
          "vehId",
          1371,
          "veid",
          false
        ],
        [
          39,
          "max",
          1371,
          "max",
          false
        ],
        [
          1097,
          "true",
          1372,
          "flow",
          false
        ],
        [
          24,
          "true",
          1372,
          "flow",
          false
        ],
        [
          549,
          "flow",
          1373,
          "flow",
          false
        ],
        [
          10032,
          "flow",
          1374,
          "flow",
          false
        ],
        [
          10253,
          "flow",
          1375,
          "flow",
          false
        ],
        [
          1180,
          "down",
          1376,
          "flow",
          false
        ],
        [
          124,
          "flow",
          1376,
          "flow",
          false
        ],
        [
          605,
          "False",
          1379,
          "flow",
          false
        ],
        [
          126,
          "down",
          1380,
          "flow",
          false
        ],
        [
          1380,
          "flow",
          1381,
          "flow",
          false
        ],
        [
          1380,
          "val",
          1381,
          "input",
          false
        ],
        [
          486,
          "flow",
          1382,
          "flow",
          false
        ],
        [
          486,
          "val",
          1382,
          "value",
          false
        ],
        [
          1266,
          "flow",
          1383,
          "flow",
          false
        ],
        [
          1266,
          "val",
          1383,
          "value",
          false
        ],
        [
          1382,
          "match_2",
          1384,
          "flow",
          false
        ],
        [
          1384,
          "flow",
          1385,
          "flow",
          false
        ],
        [
          1384,
          "result",
          1385,
          "condition",
          false
        ],
        [
          1385,
          "False",
          1386,
          "flow",
          false
        ],
        [
          1386,
          "flow",
          1387,
          "flow",
          false
        ],
        [
          1389,
          "down",
          1388,
          "flow",
          false
        ],
        [
          899,
          "flow",
          1389,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1391,
          "flow",
          false
        ],
        [
          1394,
          "True",
          1392,
          "flow",
          false
        ],
        [
          1394,
          "False",
          1392,
          "reset",
          false
        ],
        [
          1395,
          "flow",
          1393,
          "flow",
          false
        ],
        [
          1391,
          "flow",
          1394,
          "flow",
          false
        ],
        [
          1391,
          "flag",
          1394,
          "condition",
          false
        ],
        [
          1392,
          "flow",
          1395,
          "flow",
          false
        ],
        [
          1394,
          "False",
          1395,
          "reset",
          false
        ],
        [
          9876,
          "down",
          1396,
          "flow",
          false
        ],
        [
          1399,
          "flow",
          1397,
          "flow",
          false
        ],
        [
          1396,
          "val",
          1397,
          "rep",
          false
        ],
        [
          1399,
          "val",
          1397,
          "mtype",
          false
        ],
        [
          1397,
          "flow",
          1398,
          "flow",
          false
        ],
        [
          1397,
          "rep",
          1398,
          "val",
          false
        ],
        [
          1396,
          "flow",
          1399,
          "flow",
          false
        ],
        [
          131,
          "false",
          1400,
          "flow",
          false
        ],
        [
          115,
          "fulldesc",
          1400,
          "input",
          false
        ],
        [
          7,
          "flow",
          1402,
          "flow",
          false
        ],
        [
          1402,
          "flow",
          1403,
          "flow",
          false
        ],
        [
          1402,
          "flag",
          1403,
          "condition",
          false
        ],
        [
          1403,
          "True",
          1404,
          "flow",
          false
        ],
        [
          1403,
          "False",
          1404,
          "reset",
          false
        ],
        [
          1404,
          "flow",
          1405,
          "flow",
          false
        ],
        [
          1405,
          "flow",
          1406,
          "flow",
          false
        ],
        [
          1406,
          "flow",
          1407,
          "flow",
          false
        ],
        [
          1406,
          "val",
          1407,
          "val",
          false
        ],
        [
          1403,
          "True",
          1408,
          "flow",
          false
        ],
        [
          1408,
          "flow",
          1409,
          "flow",
          false
        ],
        [
          1403,
          "False",
          1410,
          "flow",
          false
        ],
        [
          1403,
          "True",
          1410,
          "reset",
          false
        ],
        [
          825,
          "down",
          1411,
          "flow",
          false
        ],
        [
          492,
          "flow",
          1412,
          "flow",
          false
        ],
        [
          1192,
          "flow",
          1413,
          "flow",
          false
        ],
        [
          1231,
          "flow",
          1414,
          "flow",
          false
        ],
        [
          1370,
          "flow",
          1415,
          "flow",
          false
        ],
        [
          1369,
          "flow",
          1416,
          "flow",
          false
        ],
        [
          879,
          "down",
          1417,
          "flow",
          false
        ],
        [
          1317,
          "flow",
          1418,
          "flow",
          false
        ],
        [
          1181,
          "down",
          1419,
          "flow",
          false
        ],
        [
          10017,
          "down",
          1420,
          "flow",
          false
        ],
        [
          126,
          "down",
          1421,
          "flow",
          false
        ],
        [
          1575,
          "flow",
          1422,
          "flow",
          false
        ],
        [
          1180,
          "down",
          1422,
          "flow",
          false
        ],
        [
          124,
          "flow",
          1422,
          "flow",
          false
        ],
        [
          639,
          "flow",
          1423,
          "flow",
          false
        ],
        [
          637,
          "false",
          1423,
          "flow",
          false
        ],
        [
          846,
          "flow",
          1424,
          "flow",
          false
        ],
        [
          993,
          "flag",
          1424,
          "condition",
          false
        ],
        [
          316,
          "flow",
          1425,
          "flow",
          false
        ],
        [
          921,
          "flow",
          1426,
          "flow",
          false
        ],
        [
          1412,
          "flow",
          1427,
          "flow",
          false
        ],
        [
          1429,
          "flow",
          1428,
          "flow",
          false
        ],
        [
          10055,
          "flow",
          1429,
          "flow",
          false
        ],
        [
          954,
          "flow",
          1430,
          "flow",
          false
        ],
        [
          954,
          "ok",
          1430,
          "condition",
          false
        ],
        [
          1426,
          "flow",
          1431,
          "flow",
          false
        ],
        [
          38,
          "val",
          1431,
          "gid",
          false
        ],
        [
          1425,
          "flow",
          1432,
          "flow",
          false
        ],
        [
          68,
          "carUsed",
          1432,
          "gid",
          false
        ],
        [
          7,
          "enterState",
          1433,
          "flow",
          false
        ],
        [
          1432,
          "flow",
          1435,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1435,
          "veid",
          false
        ],
        [
          1431,
          "flow",
          1436,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1436,
          "veid",
          false
        ],
        [
          1428,
          "flow",
          1437,
          "flow",
          false
        ],
        [
          1451,
          "flow",
          1438,
          "flow",
          false
        ],
        [
          1451,
          "dmg",
          1438,
          "A",
          false
        ],
        [
          1427,
          "flow",
          1439,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          1439,
          "veid",
          false
        ],
        [
          1442,
          "True",
          1440,
          "flow",
          false
        ],
        [
          248,
          "vehid",
          1440,
          "veid",
          false
        ],
        [
          248,
          "flow",
          1441,
          "flow",
          false
        ],
        [
          1441,
          "flow",
          1442,
          "flow",
          false
        ],
        [
          1441,
          "flag",
          1442,
          "condition",
          false
        ],
        [
          1440,
          "flow",
          1443,
          "flow",
          false
        ],
        [
          1440,
          "output",
          1443,
          "str",
          false
        ],
        [
          309,
          "flow",
          1444,
          "flow",
          false
        ],
        [
          1443,
          "flow",
          1444,
          "flow",
          false
        ],
        [
          1441,
          "flag",
          1444,
          "cond",
          false
        ],
        [
          1443,
          "num",
          1444,
          "tval",
          false
        ],
        [
          309,
          "damage",
          1444,
          "fval",
          false
        ],
        [
          1446,
          "flow",
          1445,
          "flow",
          false
        ],
        [
          1383,
          "match_2",
          1446,
          "flow",
          false
        ],
        [
          1383,
          "match_1",
          1446,
          "flow",
          false
        ],
        [
          1383,
          "none",
          1447,
          "flow",
          false
        ],
        [
          1449,
          "flow",
          1448,
          "flow",
          false
        ],
        [
          1449,
          "val",
          1448,
          "val",
          false
        ],
        [
          1316,
          "flow",
          1449,
          "flow",
          false
        ],
        [
          1451,
          "dmg",
          1449,
          "val",
          false
        ],
        [
          328,
          "partlyInside",
          1450,
          "flow",
          false
        ],
        [
          1453,
          "flow",
          1450,
          "reset",
          false
        ],
        [
          1454,
          "flow",
          1450,
          "reset",
          false
        ],
        [
          1304,
          "flow",
          1451,
          "flow",
          false
        ],
        [
          1305,
          "flow",
          1452,
          "flow",
          false
        ],
        [
          1305,
          "gforce",
          1452,
          "force",
          false
        ],
        [
          10291,
          "flow",
          1453,
          "flow",
          false
        ],
        [
          328,
          "inside",
          1454,
          "flow",
          false
        ],
        [
          1450,
          "flow",
          1455,
          "flow",
          false
        ],
        [
          846,
          "flow",
          1456,
          "flow",
          false
        ],
        [
          1456,
          "flow",
          1457,
          "flow",
          false
        ],
        [
          1456,
          "flag",
          1457,
          "condition",
          false
        ],
        [
          1436,
          "flow",
          1458,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1459,
          "flow",
          false
        ],
        [
          1459,
          "flow",
          1460,
          "flow",
          false
        ],
        [
          1459,
          "flag",
          1460,
          "condition",
          false
        ],
        [
          1460,
          "False",
          1461,
          "flow",
          false
        ],
        [
          1460,
          "True",
          1461,
          "reset",
          false
        ],
        [
          1461,
          "flow",
          1462,
          "flow",
          false
        ],
        [
          1464,
          "flow",
          1463,
          "flow",
          false
        ],
        [
          1464,
          "flag",
          1463,
          "condition",
          false
        ],
        [
          7,
          "flow",
          1464,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1466,
          "flow",
          false
        ],
        [
          1466,
          "flow",
          1467,
          "flow",
          false
        ],
        [
          1466,
          "flag",
          1467,
          "condition",
          false
        ],
        [
          1530,
          "flow",
          1468,
          "flow",
          false
        ],
        [
          1530,
          "actual",
          1468,
          "veid",
          false
        ],
        [
          1468,
          "flow",
          1470,
          "flow",
          false
        ],
        [
          1468,
          "output",
          1470,
          "arstr",
          false
        ],
        [
          530,
          "true",
          1471,
          "flow",
          false
        ],
        [
          1471,
          "flow",
          1472,
          "flow",
          false
        ],
        [
          1471,
          "flag",
          1472,
          "condition",
          false
        ],
        [
          1472,
          "True",
          1473,
          "flow",
          false
        ],
        [
          1470,
          "flow",
          1474,
          "flow",
          false
        ],
        [
          1633,
          "False",
          1475,
          "flow",
          false
        ],
        [
          1475,
          "flow",
          1476,
          "flow",
          false
        ],
        [
          1475,
          "flag",
          1476,
          "condition",
          false
        ],
        [
          1474,
          "flow",
          1477,
          "flow",
          false
        ],
        [
          1474,
          "val",
          1477,
          "money",
          false
        ],
        [
          1476,
          "True",
          1478,
          "flow",
          false
        ],
        [
          1478,
          "down",
          1479,
          "flow",
          false
        ],
        [
          1473,
          "down",
          1480,
          "flow",
          false
        ],
        [
          4986,
          "match_2",
          1481,
          "flow",
          false
        ],
        [
          4986,
          "match_4",
          1481,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1482,
          "flow",
          false
        ],
        [
          1201,
          "flow",
          1483,
          "flow",
          false
        ],
        [
          1439,
          "flow",
          1484,
          "flow",
          false
        ],
        [
          1486,
          "flow",
          1485,
          "flow",
          false
        ],
        [
          1486,
          "val",
          1485,
          "input",
          false
        ],
        [
          1181,
          "down",
          1486,
          "flow",
          false
        ],
        [
          696,
          "flow",
          1487,
          "flow",
          false
        ],
        [
          1487,
          "flow",
          1488,
          "flow",
          false
        ],
        [
          1485,
          "output",
          1488,
          "A",
          false
        ],
        [
          1487,
          "val",
          1488,
          "B",
          false
        ],
        [
          34,
          "True",
          1489,
          "flow",
          false
        ],
        [
          56,
          "vehId",
          1489,
          "veid",
          false
        ],
        [
          7,
          "flow",
          1490,
          "flow",
          false
        ],
        [
          1490,
          "flow",
          1491,
          "flow",
          false
        ],
        [
          1494,
          "flow",
          1492,
          "flow",
          false
        ],
        [
          1491,
          "flow",
          1493,
          "flow",
          false
        ],
        [
          1491,
          "flag",
          1493,
          "condition",
          false
        ],
        [
          1493,
          "True",
          1494,
          "flow",
          false
        ],
        [
          1493,
          "False",
          1494,
          "reset",
          false
        ],
        [
          1496,
          "flow",
          1495,
          "flow",
          false
        ],
        [
          35,
          "val",
          1495,
          "X",
          false
        ],
        [
          1496,
          "Y",
          1495,
          "DX",
          false
        ],
        [
          1492,
          "flow",
          1496,
          "flow",
          false
        ],
        [
          1492,
          "val",
          1496,
          "X",
          false
        ],
        [
          910,
          "cost_selected",
          1496,
          "Z",
          false
        ],
        [
          1495,
          "flow",
          1497,
          "flow",
          false
        ],
        [
          1495,
          "Y",
          1497,
          "val",
          false
        ],
        [
          1497,
          "flow",
          1498,
          "flow",
          false
        ],
        [
          1499,
          "sourceID",
          1498,
          "source",
          false
        ],
        [
          34,
          "False",
          1499,
          "flow",
          false
        ],
        [
          1502,
          "flow",
          1500,
          "flow",
          false
        ],
        [
          1502,
          "msg",
          1500,
          "message",
          false
        ],
        [
          4986,
          "match_5",
          1501,
          "flow",
          false
        ],
        [
          1498,
          "flow",
          1502,
          "flow",
          false
        ],
        [
          1492,
          "val",
          1502,
          "total",
          false
        ],
        [
          910,
          "cost_selected",
          1502,
          "cost",
          false
        ],
        [
          1500,
          "flow",
          1503,
          "flow",
          false
        ],
        [
          1503,
          "flow",
          1504,
          "flow",
          false
        ],
        [
          1501,
          "out",
          1505,
          "flow",
          false
        ],
        [
          280,
          "vehId",
          1505,
          "veid",
          false
        ],
        [
          66,
          "False",
          1506,
          "flow",
          false
        ],
        [
          1506,
          "flow",
          1507,
          "flow",
          false
        ],
        [
          1506,
          "val",
          1507,
          "A",
          false
        ],
        [
          1507,
          "false",
          1508,
          "flow",
          false
        ],
        [
          1504,
          "flow",
          1509,
          "flow",
          false
        ],
        [
          1495,
          "Y",
          1509,
          "money",
          false
        ],
        [
          938,
          "flow",
          1510,
          "flow",
          false
        ],
        [
          590,
          "flow",
          1511,
          "flow",
          false
        ],
        [
          1511,
          "flow",
          1512,
          "flow",
          false
        ],
        [
          1511,
          "flag",
          1512,
          "condition",
          false
        ],
        [
          1512,
          "True",
          1513,
          "flow",
          false
        ],
        [
          582,
          "flag",
          1513,
          "toggle",
          false
        ],
        [
          846,
          "pool",
          1513,
          "amount",
          false
        ],
        [
          1513,
          "flow",
          1514,
          "flow",
          false
        ],
        [
          582,
          "flag",
          1514,
          "condition",
          false
        ],
        [
          554,
          "flow",
          1515,
          "flow",
          false
        ],
        [
          1514,
          "True",
          1516,
          "flow",
          false
        ],
        [
          1514,
          "True",
          1517,
          "flow",
          false
        ],
        [
          1514,
          "False",
          1517,
          "flow",
          false
        ],
        [
          582,
          "flag",
          1517,
          "flag",
          false
        ],
        [
          1517,
          "flow",
          1518,
          "flow",
          false
        ],
        [
          582,
          "flag",
          1518,
          "val",
          false
        ],
        [
          1518,
          "flow",
          1519,
          "flow",
          false
        ],
        [
          1518,
          "num",
          1519,
          "val",
          false
        ],
        [
          10293,
          "flow",
          1520,
          "flow",
          false
        ],
        [
          910,
          "premium",
          1520,
          "text",
          false
        ],
        [
          1525,
          "flow",
          1521,
          "flow",
          false
        ],
        [
          1523,
          "flow",
          1521,
          "flow",
          false
        ],
        [
          1523,
          "flow",
          1521,
          "flow",
          false
        ],
        [
          1525,
          "flow",
          1521,
          "flow",
          false
        ],
        [
          1524,
          "flow",
          1521,
          "flow",
          false
        ],
        [
          10292,
          "down",
          1522,
          "flow",
          false
        ],
        [
          910,
          "cost_diesel",
          1522,
          "cost",
          false
        ],
        [
          365,
          "down",
          1523,
          "flow",
          false
        ],
        [
          910,
          "cost_regular",
          1523,
          "cost",
          false
        ],
        [
          10293,
          "down",
          1524,
          "flow",
          false
        ],
        [
          910,
          "cost_midgrade",
          1524,
          "cost",
          false
        ],
        [
          1520,
          "down",
          1525,
          "flow",
          false
        ],
        [
          910,
          "cost_premium",
          1525,
          "cost",
          false
        ],
        [
          1133,
          "flow",
          1526,
          "flow",
          false
        ],
        [
          1531,
          "flow",
          1528,
          "flow",
          false
        ],
        [
          307,
          "actual",
          1528,
          "veid",
          false
        ],
        [
          695,
          "flow",
          1529,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          1529,
          "veid",
          false
        ],
        [
          402,
          "output",
          1529,
          "fuel",
          false
        ],
        [
          1133,
          "val",
          1529,
          "fueltype",
          false
        ],
        [
          1526,
          "val",
          1529,
          "fuelratio",
          false
        ],
        [
          1467,
          "True",
          1530,
          "flow",
          false
        ],
        [
          1469,
          "vehId",
          1530,
          "current",
          false
        ],
        [
          307,
          "flow",
          1531,
          "flow",
          false
        ],
        [
          307,
          "actual",
          1531,
          "veid",
          false
        ],
        [
          1528,
          "flow",
          1532,
          "flow",
          false
        ],
        [
          1531,
          "output",
          1532,
          "val",
          false
        ],
        [
          1532,
          "flow",
          1533,
          "flow",
          false
        ],
        [
          1528,
          "output",
          1533,
          "val",
          false
        ],
        [
          1080,
          "flow",
          1534,
          "flow",
          false
        ],
        [
          1534,
          "flow",
          1535,
          "flow",
          false
        ],
        [
          730,
          "flow",
          1536,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          1536,
          "veid",
          false
        ],
        [
          668,
          "val",
          1536,
          "fuel",
          false
        ],
        [
          1534,
          "val",
          1536,
          "fueltype",
          false
        ],
        [
          1535,
          "val",
          1536,
          "fuelratio",
          false
        ],
        [
          1074,
          "flow",
          1537,
          "flow",
          false
        ],
        [
          601,
          "filename",
          1537,
          "carfile",
          false
        ],
        [
          987,
          "True",
          1538,
          "flow",
          false
        ],
        [
          987,
          "False",
          1538,
          "reset",
          false
        ],
        [
          1540,
          "flow",
          1539,
          "flow",
          false
        ],
        [
          361,
          "flow",
          1540,
          "flow",
          false
        ],
        [
          1541,
          "done",
          1540,
          "reset",
          false
        ],
        [
          987,
          "True",
          1541,
          "flow",
          false
        ],
        [
          333,
          "true",
          1541,
          "reset",
          false
        ],
        [
          361,
          "flow",
          1542,
          "flow",
          false
        ],
        [
          987,
          "False",
          1542,
          "reset",
          false
        ],
        [
          1544,
          "flow",
          1543,
          "flow",
          false
        ],
        [
          544,
          "True",
          1544,
          "flow",
          false
        ],
        [
          1543,
          "down",
          1545,
          "flow",
          false
        ],
        [
          7,
          "enterState",
          1546,
          "flow",
          false
        ],
        [
          191,
          "flow",
          1547,
          "flow",
          false
        ],
        [
          1547,
          "flow",
          1548,
          "flow",
          false
        ],
        [
          1547,
          "flag",
          1548,
          "condition",
          false
        ],
        [
          1552,
          "down",
          1549,
          "flow",
          false
        ],
        [
          1548,
          "True",
          1550,
          "flow",
          false
        ],
        [
          367,
          "flow",
          1551,
          "flow",
          false
        ],
        [
          567,
          "cost",
          1551,
          "A",
          false
        ],
        [
          1550,
          "flow",
          1552,
          "flow",
          false
        ],
        [
          7,
          "flow",
          1553,
          "flow",
          false
        ],
        [
          1114,
          "flow",
          1554,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1554,
          "vehid",
          false
        ],
        [
          1458,
          "flow",
          1555,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1555,
          "vehid",
          false
        ],
        [
          1212,
          "flow",
          1556,
          "flow",
          false
        ],
        [
          1209,
          "flow",
          1556,
          "reset",
          false
        ],
        [
          1376,
          "flow",
          1557,
          "flow",
          false
        ],
        [
          1376,
          "flag",
          1557,
          "condition",
          false
        ],
        [
          1051,
          "flow",
          1558,
          "flow",
          false
        ],
        [
          1558,
          "flow",
          1559,
          "flow",
          false
        ],
        [
          1558,
          "flag",
          1559,
          "condition",
          false
        ],
        [
          975,
          "flow",
          1560,
          "flow",
          false
        ],
        [
          968,
          "output",
          1560,
          "vehId",
          false
        ],
        [
          1584,
          "flow",
          1561,
          "flow",
          false
        ],
        [
          1569,
          "gstr",
          1561,
          "text",
          false
        ],
        [
          384,
          "flow",
          1562,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1562,
          "vehid",
          false
        ],
        [
          1283,
          "flow",
          1563,
          "flow",
          false
        ],
        [
          1283,
          "veid",
          1563,
          "vehid",
          false
        ],
        [
          304,
          "flow",
          1564,
          "flow",
          false
        ],
        [
          346,
          "vehicleIds",
          1564,
          "A",
          false
        ],
        [
          10114,
          "vehicleIds",
          1564,
          "B",
          false
        ],
        [
          10259,
          "vehicleIds",
          1564,
          "C",
          false
        ],
        [
          526,
          "flow",
          1565,
          "flow",
          false
        ],
        [
          342,
          "veid",
          1565,
          "vehid",
          false
        ],
        [
          701,
          "flow",
          1567,
          "flow",
          false
        ],
        [
          701,
          "walk",
          1567,
          "condition",
          false
        ],
        [
          7,
          "enterState",
          1568,
          "flow",
          false
        ],
        [
          1581,
          "flow",
          1569,
          "flow",
          false
        ],
        [
          910,
          "cost_regular",
          1569,
          "gasoline",
          false
        ],
        [
          910,
          "cost_diesel",
          1569,
          "diesel",
          false
        ],
        [
          263,
          "flow",
          1570,
          "flow",
          false
        ],
        [
          1570,
          "flow",
          1571,
          "flow",
          false
        ],
        [
          1570,
          "val",
          1571,
          "cslot",
          false
        ],
        [
          355,
          "slotmap",
          1571,
          "slotmap",
          false
        ],
        [
          1571,
          "flow",
          1572,
          "flow",
          false
        ],
        [
          1571,
          "update",
          1572,
          "condition",
          false
        ],
        [
          1572,
          "True",
          1573,
          "flow",
          false
        ],
        [
          1571,
          "newslot",
          1573,
          "val",
          false
        ],
        [
          1571,
          "flow",
          1574,
          "flow",
          false
        ],
        [
          1571,
          "cancel",
          1574,
          "condition",
          false
        ],
        [
          1574,
          "True",
          1575,
          "flow",
          false
        ],
        [
          1574,
          "False",
          1575,
          "reset",
          false
        ],
        [
          627,
          "True",
          1576,
          "flow",
          false
        ],
        [
          1567,
          "True",
          1577,
          "flow",
          false
        ],
        [
          701,
          "actual",
          1577,
          "vehId",
          false
        ],
        [
          49,
          "flow",
          1578,
          "flow",
          false
        ],
        [
          49,
          "nocar",
          1578,
          "condition",
          false
        ],
        [
          214,
          "flow",
          1580,
          "flow",
          false
        ],
        [
          1579,
          "vehId",
          1580,
          "current",
          false
        ],
        [
          963,
          "flow",
          1581,
          "flow",
          false
        ],
        [
          321,
          "flow",
          1582,
          "flow",
          false
        ],
        [
          1580,
          "walk",
          1582,
          "condition",
          false
        ],
        [
          1582,
          "True",
          1583,
          "flow",
          false
        ],
        [
          1580,
          "current",
          1583,
          "id",
          false
        ],
        [
          1588,
          "flow",
          1584,
          "flow",
          false
        ],
        [
          1569,
          "qstr",
          1584,
          "text",
          false
        ],
        [
          7,
          "flow",
          1586,
          "flow",
          false
        ],
        [
          1561,
          "down",
          1587,
          "gasoline_10",
          false
        ],
        [
          10294,
          "down",
          1587,
          "diesel_10",
          false
        ],
        [
          10295,
          "down",
          1587,
          "oil_5",
          false
        ],
        [
          910,
          "cost_regular",
          1587,
          "gcost",
          false
        ],
        [
          910,
          "cost_diesel",
          1587,
          "dcost",
          false
        ],
        [
          1588,
          "val",
          1587,
          "pmoney",
          false
        ],
        [
          1569,
          "flow",
          1588,
          "flow",
          false
        ],
        [
          1587,
          "bought",
          1589,
          "flow",
          false
        ],
        [
          1587,
          "pmoney",
          1589,
          "val",
          false
        ],
        [
          1589,
          "flow",
          1590,
          "flow",
          false
        ],
        [
          1596,
          "flow",
          1591,
          "flow",
          false
        ],
        [
          1591,
          "flow",
          1592,
          "flow",
          false
        ],
        [
          150,
          "complete",
          1593,
          "flow",
          false
        ],
        [
          150,
          "completed",
          1593,
          "reset",
          false
        ],
        [
          1598,
          "False",
          1594,
          "flow",
          false
        ],
        [
          1595,
          "vehId",
          1594,
          "vehid",
          false
        ],
        [
          1591,
          "val",
          1594,
          "itype",
          false
        ],
        [
          1596,
          "val",
          1594,
          "ikey",
          false
        ],
        [
          1592,
          "val",
          1594,
          "idata",
          false
        ],
        [
          1586,
          "out",
          1596,
          "flow",
          false
        ],
        [
          1592,
          "flow",
          1597,
          "flow",
          false
        ],
        [
          1597,
          "flow",
          1598,
          "flow",
          false
        ],
        [
          1597,
          "walk",
          1598,
          "condition",
          false
        ],
        [
          299,
          "flow",
          1599,
          "flow",
          false
        ],
        [
          72,
          "oilVal",
          1599,
          "val",
          false
        ],
        [
          1535,
          "flow",
          1600,
          "flow",
          false
        ],
        [
          1132,
          "flow",
          1601,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1601,
          "veid",
          false
        ],
        [
          295,
          "oil",
          1601,
          "oil",
          false
        ],
        [
          1128,
          "flow",
          1602,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1602,
          "veid",
          false
        ],
        [
          214,
          "oil",
          1602,
          "oil",
          false
        ],
        [
          1598,
          "True",
          1603,
          "flow",
          false
        ],
        [
          1536,
          "flow",
          1604,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          1604,
          "veid",
          false
        ],
        [
          1600,
          "val",
          1604,
          "oil",
          false
        ],
        [
          1081,
          "flow",
          1605,
          "flow",
          false
        ],
        [
          72,
          "oilVal",
          1605,
          "input",
          false
        ],
        [
          1529,
          "flow",
          1606,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          1606,
          "veid",
          false
        ],
        [
          1605,
          "output",
          1606,
          "oil",
          false
        ],
        [
          1074,
          "flow",
          1607,
          "flow",
          false
        ],
        [
          601,
          "filename",
          1607,
          "file",
          false
        ],
        [
          72,
          "oilVal",
          1607,
          "tval",
          false
        ],
        [
          7,
          "flow",
          1608,
          "flow",
          false
        ],
        [
          1606,
          "flow",
          1609,
          "flow",
          false
        ],
        [
          1627,
          "actual",
          1609,
          "veid",
          false
        ],
        [
          1608,
          "flow",
          1611,
          "flow",
          false
        ],
        [
          1612,
          "vehId",
          1611,
          "veid",
          false
        ],
        [
          1562,
          "flow",
          1613,
          "flow",
          false
        ],
        [
          516,
          "veid",
          1613,
          "veid",
          false
        ],
        [
          1555,
          "flow",
          1614,
          "flow",
          false
        ],
        [
          497,
          "veid",
          1614,
          "veid",
          false
        ],
        [
          1484,
          "flow",
          1615,
          "flow",
          false
        ],
        [
          670,
          "vehId",
          1615,
          "veid",
          false
        ],
        [
          10294,
          "flow",
          1616,
          "flow",
          false
        ],
        [
          1569,
          "ostr",
          1616,
          "text",
          false
        ],
        [
          1630,
          "flow",
          1617,
          "flow",
          false
        ],
        [
          1619,
          "flow",
          1618,
          "flow",
          false
        ],
        [
          1593,
          "flow",
          1619,
          "flow",
          false
        ],
        [
          150,
          "completed",
          1619,
          "reset",
          false
        ],
        [
          1578,
          "True",
          1620,
          "flow",
          false
        ],
        [
          1103,
          "vehid",
          1620,
          "vehid",
          false
        ],
        [
          180,
          "flow",
          1621,
          "flow",
          false
        ],
        [
          180,
          "nocar",
          1621,
          "condition",
          false
        ],
        [
          1423,
          "flow",
          1622,
          "flow",
          false
        ],
        [
          1414,
          "flow",
          1623,
          "flow",
          false
        ],
        [
          1415,
          "flow",
          1624,
          "flow",
          false
        ],
        [
          1416,
          "flow",
          1625,
          "flow",
          false
        ],
        [
          1620,
          "flow",
          1626,
          "flow",
          false
        ],
        [
          49,
          "current",
          1626,
          "vehid",
          false
        ],
        [
          466,
          "flow",
          1627,
          "flow",
          false
        ],
        [
          1628,
          "vehId",
          1627,
          "current",
          false
        ],
        [
          863,
          "flow",
          1629,
          "flow",
          false
        ],
        [
          1103,
          "vehid",
          1629,
          "vehId",
          false
        ],
        [
          21,
          "flow",
          1630,
          "flow",
          false
        ],
        [
          49,
          "current",
          1630,
          "id",
          false
        ],
        [
          1557,
          "True",
          1631,
          "flow",
          false
        ],
        [
          969,
          "vehId",
          1631,
          "current",
          false
        ],
        [
          110,
          "flow",
          1632,
          "flow",
          false
        ],
        [
          1632,
          "flow",
          1633,
          "flow",
          false
        ],
        [
          1632,
          "walk",
          1633,
          "condition",
          false
        ],
        [
          1633,
          "True",
          1634,
          "flow",
          false
        ],
        [
          518,
          "flow",
          1635,
          "flow",
          false
        ],
        [
          1377,
          "vehId",
          1635,
          "input",
          false
        ],
        [
          1181,
          "down",
          1636,
          "flow",
          false
        ],
        [
          825,
          "down",
          1637,
          "flow",
          false
        ],
        [
          15,
          "flow",
          10194,
          "flow",
          false
        ],
        [
          15,
          "val",
          10194,
          "val",
          false
        ],
        [
          624,
          "true",
          10130,
          "flow",
          false
        ],
        [
          10191,
          "flow",
          4986,
          "flow",
          false
        ],
        [
          10191,
          "typeName",
          4986,
          "value",
          false
        ],
        [
          464,
          "finished",
          10066,
          "flow",
          false
        ],
        [
          566,
          "output",
          10066,
          "vehId",
          false
        ],
        [
          10282,
          "flow",
          10283,
          "flow",
          false
        ],
        [
          10202,
          "flow",
          10227,
          "flow",
          false
        ],
        [
          10068,
          "flow",
          10163,
          "flow",
          false
        ],
        [
          10098,
          "flow",
          10099,
          "flow",
          false
        ],
        [
          275,
          "scrapVal",
          10099,
          "val",
          false
        ],
        [
          10030,
          "flow",
          10035,
          "flow",
          false
        ],
        [
          741,
          "flow",
          10196,
          "flow",
          false
        ],
        [
          741,
          "league",
          10196,
          "val",
          false
        ],
        [
          630,
          "flow",
          10132,
          "flow",
          false
        ],
        [
          601,
          "filename",
          10132,
          "file",
          false
        ],
        [
          72,
          "fuelVal",
          10132,
          "tval",
          true
        ],
        [
          456,
          "flow",
          10068,
          "flow",
          false
        ],
        [
          10284,
          "flow",
          10285,
          "flow",
          false
        ],
        [
          298,
          "flow",
          10004,
          "flow",
          false
        ],
        [
          10230,
          "flow",
          10229,
          "flow",
          false
        ],
        [
          275,
          "parts",
          10229,
          "val",
          false
        ],
        [
          652,
          "ftrig",
          10165,
          "name",
          false
        ],
        [
          9875,
          "flow",
          9876,
          "flow",
          false
        ],
        [
          10043,
          "flow",
          10101,
          "flow",
          false
        ],
        [
          243,
          "flow",
          10037,
          "flow",
          false
        ],
        [
          243,
          "Y",
          10037,
          "X",
          false
        ],
        [
          10029,
          "val",
          10037,
          "DX",
          false
        ],
        [
          10197,
          "flow",
          10198,
          "flow",
          false
        ],
        [
          241,
          "opSpawnPos",
          10198,
          "val",
          false
        ],
        [
          1621,
          "False",
          9909,
          "flow",
          false
        ],
        [
          106,
          "val",
          9909,
          "id",
          false
        ],
        [
          10133,
          "flow",
          10134,
          "flow",
          false
        ],
        [
          275,
          "triggers",
          10134,
          "val",
          false
        ],
        [
          9,
          "flow",
          4988,
          "flow",
          false
        ],
        [
          1093,
          "flow",
          10287,
          "flow",
          false
        ],
        [
          455,
          "info",
          10287,
          "text",
          false
        ],
        [
          68,
          "flow",
          10231,
          "flow",
          false
        ],
        [
          68,
          "reputation",
          10231,
          "val",
          false
        ],
        [
          10137,
          "flow",
          10167,
          "flow",
          false
        ],
        [
          10038,
          "flow",
          10039,
          "flow",
          false
        ],
        [
          275,
          "opConfig",
          10039,
          "val",
          false
        ],
        [
          10199,
          "flow",
          10200,
          "flow",
          false
        ],
        [
          241,
          "pspos",
          10200,
          "val",
          false
        ],
        [
          44,
          "flow",
          10136,
          "flow",
          false
        ],
        [
          440,
          "true",
          10136,
          "flow",
          false
        ],
        [
          844,
          "rflow",
          10008,
          "flow_1",
          false
        ],
        [
          10235,
          "flow",
          10008,
          "flow_1",
          false
        ],
        [
          1112,
          "match_6",
          10008,
          "flow_2",
          false
        ],
        [
          844,
          "rflow",
          10008,
          "flow_2",
          false
        ],
        [
          1149,
          "down",
          10233,
          "flow",
          false
        ],
        [
          10024,
          "flow",
          10169,
          "flow",
          false
        ],
        [
          157,
          "flow",
          9880,
          "flow",
          false
        ],
        [
          157,
          "flow",
          9880,
          "flow",
          false
        ],
        [
          157,
          "reward",
          9880,
          "val",
          false
        ],
        [
          10035,
          "flow",
          10105,
          "flow",
          false
        ],
        [
          339,
          "flow",
          10041,
          "flow",
          false
        ],
        [
          10201,
          "flow",
          10202,
          "flow",
          false
        ],
        [
          303,
          "flow",
          9913,
          "flow",
          false
        ],
        [
          303,
          "val",
          9913,
          "id",
          false
        ],
        [
          448,
          "enter",
          10138,
          "flow",
          false
        ],
        [
          328,
          "outside",
          10291,
          "flow",
          false
        ],
        [
          328,
          "partlyInside",
          10291,
          "reset",
          false
        ],
        [
          845,
          "flow",
          10235,
          "flow_1",
          false
        ],
        [
          844,
          "cflow_not",
          10235,
          "flow_2",
          false
        ],
        [
          10170,
          "flow",
          10171,
          "flow",
          false
        ],
        [
          10170,
          "val",
          10171,
          "A",
          false
        ],
        [
          208,
          "flow",
          9882,
          "flow",
          false
        ],
        [
          204,
          "False",
          10107,
          "flow",
          false
        ],
        [
          204,
          "True",
          10107,
          "flow",
          false
        ],
        [
          457,
          "slips",
          10107,
          "condition",
          false
        ],
        [
          10042,
          "flow",
          10043,
          "flow",
          false
        ],
        [
          10102,
          "flow",
          10204,
          "flow",
          false
        ],
        [
          9914,
          "flow",
          9915,
          "flow",
          false
        ],
        [
          9914,
          "output",
          9915,
          "data",
          false
        ],
        [
          303,
          "val",
          9915,
          "id",
          false
        ],
        [
          10151,
          "flow",
          10140,
          "flow",
          false
        ],
        [
          275,
          "cpcount",
          10140,
          "cpc",
          false
        ],
        [
          275,
          "triggers",
          10140,
          "trigs",
          false
        ],
        [
          275,
          "wayps",
          10140,
          "wps",
          false
        ],
        [
          10150,
          "val",
          10140,
          "current",
          false
        ],
        [
          10151,
          "val",
          10140,
          "clap",
          false
        ],
        [
          275,
          "laps",
          10140,
          "laps",
          false
        ],
        [
          794,
          "val",
          10140,
          "vid",
          false
        ],
        [
          1118,
          "flow",
          10076,
          "flow",
          true
        ],
        [
          912,
          "False",
          10293,
          "flow",
          false
        ],
        [
          910,
          "midgrade",
          10293,
          "text",
          false
        ],
        [
          10011,
          "down",
          10012,
          "flow",
          false
        ],
        [
          10236,
          "flow",
          10237,
          "flow",
          false
        ],
        [
          671,
          "flow",
          10173,
          "flow",
          false
        ],
        [
          229,
          "totalCost",
          10173,
          "val",
          false
        ],
        [
          221,
          "flow",
          9884,
          "flow",
          false
        ],
        [
          10111,
          "flow",
          10109,
          "flow",
          false
        ],
        [
          197,
          "Y",
          10109,
          "carCount",
          false
        ],
        [
          10200,
          "flow",
          10206,
          "flow",
          false
        ],
        [
          241,
          "psrot",
          10206,
          "val",
          false
        ],
        [
          627,
          "False",
          10142,
          "flow",
          false
        ],
        [
          652,
          "nextId",
          10142,
          "val",
          false
        ],
        [
          68,
          "flow",
          10078,
          "flow",
          false
        ],
        [
          68,
          "health",
          10078,
          "val",
          false
        ],
        [
          1616,
          "flow",
          10295,
          "flow",
          false
        ],
        [
          1569,
          "obtn",
          10295,
          "text",
          false
        ],
        [
          10031,
          "flow",
          10014,
          "flow",
          false
        ],
        [
          186,
          "True",
          10014,
          "flow",
          false
        ],
        [
          825,
          "down",
          10239,
          "flow",
          false
        ],
        [
          10108,
          "flow",
          10111,
          "flow",
          false
        ],
        [
          10143,
          "flow",
          10144,
          "flow",
          false
        ],
        [
          652,
          "newLap",
          10144,
          "val",
          false
        ],
        [
          7,
          "flow",
          10080,
          "flow",
          false
        ],
        [
          10017,
          "down",
          10016,
          "flow",
          false
        ],
        [
          344,
          "flow",
          10177,
          "flow",
          false
        ],
        [
          344,
          "flow",
          10049,
          "flow",
          false
        ],
        [
          180,
          "actual",
          10049,
          "veid",
          false
        ],
        [
          344,
          "devices",
          10049,
          "devices",
          false
        ],
        [
          345,
          "value",
          10049,
          "uid",
          false
        ],
        [
          10209,
          "flow",
          10210,
          "flow",
          false
        ],
        [
          10209,
          "typeName",
          10210,
          "value",
          false
        ],
        [
          10145,
          "flow",
          10146,
          "flow",
          false
        ],
        [
          10149,
          "objID",
          10146,
          "val",
          false
        ],
        [
          536,
          "completed",
          10082,
          "flow",
          false
        ],
        [
          538,
          "vehId",
          10082,
          "vehId",
          true
        ],
        [
          10054,
          "flow",
          10179,
          "flow",
          false
        ],
        [
          688,
          "integrityData",
          10179,
          "iteg",
          false
        ],
        [
          9915,
          "ifile",
          10179,
          "file",
          true
        ],
        [
          931,
          "flow",
          10268,
          "flow",
          false
        ],
        [
          377,
          "match_1",
          10212,
          "flow",
          false
        ],
        [
          10147,
          "flow",
          10148,
          "flow",
          false
        ],
        [
          10140,
          "nextWp",
          10148,
          "val",
          true
        ],
        [
          7,
          "flow",
          4994,
          "flow",
          true
        ],
        [
          1542,
          "done",
          10084,
          "flow",
          false
        ],
        [
          332,
          "vehId",
          10084,
          "vehId",
          false
        ],
        [
          10104,
          "flow",
          10181,
          "flow",
          false
        ],
        [
          350,
          "flow",
          10053,
          "flow",
          false
        ],
        [
          901,
          "vehId",
          10053,
          "veid",
          false
        ],
        [
          350,
          "devices",
          10053,
          "devices",
          false
        ],
        [
          379,
          "value",
          10053,
          "uid",
          false
        ],
        [
          747,
          "flow",
          10214,
          "flow",
          false
        ],
        [
          742,
          "num",
          10214,
          "val",
          false
        ],
        [
          10139,
          "true",
          10150,
          "flow",
          false
        ],
        [
          43,
          "flow",
          4995,
          "flow",
          false
        ],
        [
          5002,
          "val",
          4995,
          "value",
          false
        ],
        [
          512,
          "true",
          10086,
          "flow",
          false
        ],
        [
          129,
          "walking",
          10086,
          "val",
          false
        ],
        [
          269,
          "true",
          10022,
          "flow",
          false
        ],
        [
          10182,
          "flow",
          10183,
          "flow",
          false
        ],
        [
          614,
          "output",
          10183,
          "veid",
          false
        ],
        [
          10182,
          "devices",
          10183,
          "devices",
          false
        ],
        [
          246,
          "flow",
          10055,
          "flow",
          false
        ],
        [
          798,
          "flow",
          10272,
          "flow",
          false
        ],
        [
          10132,
          "flow",
          10216,
          "flow",
          false
        ],
        [
          601,
          "filename",
          10216,
          "file",
          false
        ],
        [
          781,
          "val",
          10216,
          "tval",
          false
        ],
        [
          10135,
          "flow",
          10152,
          "flow",
          false
        ],
        [
          275,
          "cpcount",
          10152,
          "val",
          false
        ],
        [
          520,
          "flow",
          10088,
          "flow",
          false
        ],
        [
          639,
          "flow",
          10088,
          "flow",
          false
        ],
        [
          68,
          "time",
          10088,
          "time",
          false
        ],
        [
          846,
          "daytime",
          10088,
          "dayLength",
          false
        ],
        [
          10238,
          "flow",
          10241,
          "flow",
          false
        ],
        [
          10186,
          "flow",
          10185,
          "flow",
          false
        ],
        [
          342,
          "veid",
          10185,
          "veid",
          false
        ],
        [
          10186,
          "val",
          10185,
          "file",
          false
        ],
        [
          1328,
          "False",
          9896,
          "flow",
          false
        ],
        [
          10120,
          "flow",
          10121,
          "flow",
          false
        ],
        [
          567,
          "tkttxt",
          10121,
          "val",
          false
        ],
        [
          10254,
          "flow",
          10274,
          "flow",
          false
        ],
        [
          770,
          "flow",
          10218,
          "flow",
          false
        ],
        [
          770,
          "damage",
          10218,
          "A",
          false
        ],
        [
          15,
          "flow",
          9929,
          "flow",
          false
        ],
        [
          15,
          "text",
          9929,
          "text",
          false
        ],
        [
          651,
          "flow",
          10154,
          "flow",
          false
        ],
        [
          10089,
          "flow",
          10090,
          "flow",
          false
        ],
        [
          10027,
          "flow",
          10026,
          "flow",
          false
        ],
        [
          275,
          "aiwp",
          10026,
          "val",
          false
        ],
        [
          10188,
          "flow",
          10187,
          "flow",
          false
        ],
        [
          10188,
          "val",
          10187,
          "carid",
          false
        ],
        [
          528,
          "flow",
          10059,
          "flow",
          false
        ],
        [
          528,
          "Y",
          10059,
          "val",
          false
        ],
        [
          1016,
          "true",
          10276,
          "flow",
          false
        ],
        [
          1472,
          "False",
          9931,
          "flow",
          false
        ],
        [
          266,
          "output",
          9931,
          "text",
          false
        ],
        [
          10155,
          "flow",
          10156,
          "flow",
          false
        ],
        [
          10025,
          "flow",
          10028,
          "flow",
          false
        ],
        [
          275,
          "wager",
          10028,
          "val",
          false
        ],
        [
          720,
          "flow",
          10189,
          "flow",
          false
        ],
        [
          720,
          "num",
          10189,
          "val",
          false
        ],
        [
          623,
          "flow",
          10125,
          "flow",
          false
        ],
        [
          579,
          "flow",
          10125,
          "flow",
          false
        ],
        [
          799,
          "flow",
          10278,
          "flow",
          false
        ],
        [
          526,
          "flow",
          10222,
          "flow",
          false
        ],
        [
          275,
          "wayps",
          10222,
          "wplist",
          false
        ],
        [
          10157,
          "flow",
          10158,
          "flow",
          false
        ],
        [
          275,
          "destid",
          10158,
          "val",
          false
        ],
        [
          525,
          "flow",
          10094,
          "flow",
          false
        ],
        [
          10029,
          "flow",
          10030,
          "flow",
          false
        ],
        [
          423,
          "flow",
          10191,
          "flow",
          false
        ],
        [
          423,
          "val",
          10191,
          "name",
          false
        ],
        [
          835,
          "output",
          10191,
          "tdata",
          true
        ],
        [
          10124,
          "flow",
          10127,
          "flow",
          false
        ],
        [
          1017,
          "none",
          10280,
          "flow",
          false
        ],
        [
          10141,
          "True",
          10224,
          "flow",
          false
        ],
        [
          80,
          "flow",
          9871,
          "flow",
          false
        ],
        [
          436,
          "w",
          9871,
          "width",
          true
        ],
        [
          436,
          "h",
          9871,
          "height",
          false
        ],
        [
          436,
          "x",
          9871,
          "posX",
          false
        ],
        [
          436,
          "y",
          9871,
          "posY",
          false
        ],
        [
          454,
          "true",
          10096,
          "flow",
          false
        ],
        [
          10037,
          "flow",
          10032,
          "flow",
          false
        ],
        [
          10037,
          "Y",
          10032,
          "val",
          false
        ],
        [
          419,
          "flow",
          10193,
          "flow",
          false
        ],
        [
          622,
          "flow",
          10129,
          "flow",
          false
        ],
        [
          441,
          "flow",
          10065,
          "flow",
          false
        ],
        [
          1057,
          "flow",
          10282,
          "flow",
          false
        ],
        [
          1057,
          "time",
          10282,
          "val",
          false
        ],
        [
          10192,
          "flow",
          10226,
          "flow",
          false
        ],
        [
          275,
          "opAvoid",
          10226,
          "val",
          false
        ],
        [
          660,
          "flow",
          10162,
          "flow",
          false
        ],
        [
          10022,
          "flow",
          10162,
          "reset",
          false
        ],
        [
          880,
          "down",
          5001,
          "flow",
          false
        ],
        [
          10097,
          "flow",
          10098,
          "flow",
          false
        ],
        [
          275,
          "partPrice",
          10098,
          "val",
          false
        ],
        [
          819,
          "flow",
          10251,
          "flow",
          false
        ],
        [
          819,
          "Y",
          10251,
          "X",
          false
        ],
        [
          829,
          "wager",
          10251,
          "DX",
          false
        ],
        [
          681,
          "flow",
          10195,
          "flow",
          false
        ],
        [
          628,
          "flow",
          10131,
          "flow",
          false
        ],
        [
          626,
          "val",
          10131,
          "X",
          false
        ],
        [
          114,
          "imcost",
          10131,
          "DX",
          false
        ],
        [
          10066,
          "flow",
          10067,
          "flow",
          false
        ],
        [
          342,
          "veid",
          10067,
          "vehId",
          false
        ],
        [
          1067,
          "flow",
          10284,
          "flow",
          false
        ],
        [
          10004,
          "flow",
          10003,
          "flow",
          false
        ],
        [
          10004,
          "val",
          10003,
          "X",
          false
        ],
        [
          115,
          "cost",
          10003,
          "DX",
          false
        ],
        [
          10181,
          "flow",
          10228,
          "flow",
          false
        ],
        [
          659,
          "flow",
          10164,
          "flow",
          false
        ],
        [
          661,
          "False",
          10164,
          "reset",
          false
        ],
        [
          10017,
          "down",
          10164,
          "reset",
          false
        ],
        [
          10166,
          "pos",
          10164,
          "position",
          false
        ],
        [
          9871,
          "flow",
          9875,
          "flow",
          false
        ],
        [
          10099,
          "flow",
          10100,
          "flow",
          false
        ],
        [
          275,
          "paintdata",
          10100,
          "val",
          false
        ],
        [
          837,
          "flow",
          10253,
          "flow",
          false
        ],
        [
          10252,
          "Y",
          10253,
          "val",
          false
        ],
        [
          10196,
          "flow",
          10197,
          "flow",
          false
        ],
        [
          241,
          "club",
          10197,
          "val",
          false
        ],
        [
          10100,
          "flow",
          10133,
          "flow",
          false
        ],
        [
          275,
          "laps",
          10133,
          "val",
          false
        ],
        [
          342,
          "flow",
          10286,
          "flow",
          false
        ],
        [
          342,
          "pout",
          10286,
          "val",
          false
        ],
        [
          10226,
          "flow",
          10230,
          "flow",
          false
        ],
        [
          275,
          "reputation",
          10230,
          "val",
          false
        ],
        [
          661,
          "True",
          10166,
          "flow",
          false
        ],
        [
          10165,
          "objID",
          10166,
          "newPin",
          false
        ],
        [
          9876,
          "flow",
          9877,
          "flow",
          false
        ],
        [
          10101,
          "flow",
          10102,
          "flow",
          false
        ],
        [
          10026,
          "flow",
          10038,
          "flow",
          false
        ],
        [
          275,
          "opModel",
          10038,
          "val",
          false
        ],
        [
          10198,
          "flow",
          10199,
          "flow",
          false
        ],
        [
          241,
          "opSpawnRot",
          10199,
          "val",
          false
        ],
        [
          10134,
          "flow",
          10135,
          "flow",
          false
        ],
        [
          275,
          "wayps",
          10135,
          "val",
          false
        ],
        [
          357,
          "flow",
          10288,
          "flow",
          false
        ],
        [
          1112,
          "match_5",
          10007,
          "flow",
          false
        ],
        [
          1112,
          "match_2",
          10007,
          "flow",
          false
        ],
        [
          652,
          "flow",
          10168,
          "flow",
          false
        ],
        [
          206,
          "down",
          9879,
          "flow",
          false
        ],
        [
          10096,
          "flow",
          10104,
          "flow",
          false
        ],
        [
          10039,
          "flow",
          10040,
          "flow",
          false
        ],
        [
          275,
          "opRisk",
          10040,
          "val",
          false
        ],
        [
          10204,
          "flow",
          10201,
          "flow",
          false
        ],
        [
          10136,
          "flow",
          10137,
          "flow",
          false
        ],
        [
          897,
          "flow",
          10290,
          "flow",
          false
        ],
        [
          128,
          "flow",
          10290,
          "reset",
          false
        ],
        [
          844,
          "cflow",
          10234,
          "flow_1",
          false
        ],
        [
          10235,
          "flow",
          10234,
          "flow_1",
          false
        ],
        [
          1112,
          "match_7",
          10234,
          "flow_2",
          false
        ],
        [
          844,
          "cflow",
          10234,
          "flow_2",
          false
        ],
        [
          22,
          "flow",
          10170,
          "flow",
          false
        ],
        [
          10105,
          "flow",
          10106,
          "flow",
          false
        ],
        [
          10041,
          "flow",
          10042,
          "flow",
          false
        ],
        [
          9913,
          "flow",
          9914,
          "flow",
          false
        ],
        [
          9913,
          "filename",
          9914,
          "filename",
          false
        ],
        [
          10138,
          "flow",
          10139,
          "flow",
          false
        ],
        [
          448,
          "triggerID",
          10139,
          "A",
          false
        ],
        [
          10138,
          "val",
          10139,
          "B",
          false
        ],
        [
          1520,
          "flow",
          10292,
          "flow",
          false
        ],
        [
          910,
          "diesel",
          10292,
          "text",
          false
        ],
        [
          247,
          "False",
          10011,
          "flow",
          false
        ],
        [
          1181,
          "flow",
          10011,
          "flow",
          false
        ],
        [
          487,
          "flow",
          10236,
          "flow",
          false
        ],
        [
          311,
          "True",
          10172,
          "flow",
          false
        ],
        [
          552,
          "val",
          10172,
          "condition",
          false
        ],
        [
          207,
          "flow",
          9883,
          "flow",
          false
        ],
        [
          207,
          "y",
          9883,
          "val",
          false
        ],
        [
          197,
          "flow",
          10108,
          "flow",
          false
        ],
        [
          197,
          "Y",
          10108,
          "val",
          false
        ],
        [
          293,
          "flow",
          10044,
          "flow",
          false
        ],
        [
          10140,
          "flow",
          10141,
          "flow",
          false
        ],
        [
          10140,
          "finished",
          10141,
          "condition",
          false
        ],
        [
          1118,
          "flow",
          10077,
          "flow",
          true
        ],
        [
          1561,
          "flow",
          10294,
          "flow",
          false
        ],
        [
          1569,
          "dstr",
          10294,
          "text",
          false
        ],
        [
          1181,
          "down",
          10013,
          "flow",
          false
        ],
        [
          843,
          "down",
          10238,
          "flow",
          false
        ],
        [
          10245,
          "down",
          10238,
          "flow",
          false
        ],
        [
          184,
          "flow",
          9885,
          "flow",
          false
        ],
        [
          10142,
          "flow",
          10143,
          "flow",
          false
        ],
        [
          633,
          "objID",
          10143,
          "val",
          false
        ],
        [
          10013,
          "flow",
          10015,
          "flow",
          false
        ],
        [
          1488,
          "false",
          10176,
          "flow",
          false
        ],
        [
          699,
          "flow",
          10176,
          "flow",
          false
        ],
        [
          5006,
          "flow",
          9887,
          "flow",
          false
        ],
        [
          250,
          "flowB",
          10209,
          "flow",
          false
        ],
        [
          137,
          "triggerName",
          10209,
          "name",
          false
        ],
        [
          835,
          "output",
          10209,
          "tdata",
          true
        ],
        [
          620,
          "false",
          10145,
          "flow",
          false
        ],
        [
          10140,
          "nextId",
          10145,
          "val",
          true
        ],
        [
          395,
          "flow",
          10017,
          "flow",
          false
        ],
        [
          10050,
          "flow",
          10178,
          "flow",
          false
        ],
        [
          268,
          "integrityData",
          10178,
          "iteg",
          false
        ],
        [
          9901,
          "ifile",
          10178,
          "file",
          false
        ],
        [
          157,
          "flow",
          9889,
          "flow",
          false
        ],
        [
          157,
          "destpos",
          9889,
          "val",
          false
        ],
        [
          10118,
          "flow",
          10114,
          "flow",
          false
        ],
        [
          591,
          "false",
          10114,
          "reset",
          false
        ],
        [
          10118,
          "data",
          10114,
          "group",
          false
        ],
        [
          846,
          "police",
          10114,
          "quantity",
          false
        ],
        [
          373,
          "flow",
          10050,
          "flow",
          false
        ],
        [
          10049,
          "damageData",
          10050,
          "dmg",
          false
        ],
        [
          9901,
          "mfile",
          10050,
          "file",
          false
        ],
        [
          1178,
          "down",
          10267,
          "flow",
          false
        ],
        [
          1329,
          "flow",
          10211,
          "flow",
          false
        ],
        [
          1335,
          "false",
          10211,
          "flow",
          false
        ],
        [
          10146,
          "flow",
          10147,
          "flow",
          false
        ],
        [
          10140,
          "newLap",
          10147,
          "val",
          true
        ],
        [
          385,
          "flow",
          10180,
          "flow",
          false
        ],
        [
          275,
          "opifile",
          10180,
          "val",
          false
        ],
        [
          10235,
          "flow",
          9891,
          "flow_1",
          false
        ],
        [
          1112,
          "match_5",
          9891,
          "flow_2",
          false
        ],
        [
          10114,
          "loaded",
          10116,
          "flow",
          false
        ],
        [
          591,
          "false",
          10116,
          "reset",
          true
        ],
        [
          10114,
          "vehicleIds",
          10116,
          "vehicleIds",
          false
        ],
        [
          159,
          "flow",
          10213,
          "flow",
          false
        ],
        [
          241,
          "cname",
          10213,
          "val",
          false
        ],
        [
          10140,
          "nextTrig",
          10149,
          "name",
          false
        ],
        [
          10016,
          "flow",
          10021,
          "flow",
          false
        ],
        [
          618,
          "flow",
          10182,
          "flow",
          false
        ],
        [
          833,
          "true",
          10118,
          "flow",
          false
        ],
        [
          759,
          "police",
          10118,
          "file",
          false
        ],
        [
          10055,
          "flow",
          10054,
          "flow",
          false
        ],
        [
          10053,
          "damageData",
          10054,
          "dmg",
          false
        ],
        [
          9915,
          "mfile",
          10054,
          "file",
          false
        ],
        [
          1575,
          "flow",
          10271,
          "flow",
          false
        ],
        [
          258,
          "flow",
          10271,
          "flow",
          false
        ],
        [
          968,
          "output",
          10271,
          "vehId",
          false
        ],
        [
          512,
          "flow",
          10215,
          "flow",
          false
        ],
        [
          10150,
          "flow",
          10151,
          "flow",
          false
        ],
        [
          676,
          "True",
          10087,
          "flow",
          false
        ],
        [
          10239,
          "flow",
          10240,
          "flow",
          false
        ],
        [
          600,
          "flow",
          10184,
          "flow",
          false
        ],
        [
          10183,
          "integrityData",
          10184,
          "iteg",
          false
        ],
        [
          602,
          "ifile",
          10184,
          "file",
          false
        ],
        [
          567,
          "flow",
          10120,
          "flow",
          false
        ],
        [
          567,
          "cost",
          10120,
          "val",
          false
        ],
        [
          995,
          "True",
          10273,
          "flow",
          false
        ],
        [
          1013,
          "txt",
          10273,
          "text",
          false
        ],
        [
          767,
          "flow",
          10217,
          "flow",
          false
        ],
        [
          214,
          "damage",
          10217,
          "A",
          false
        ],
        [
          261,
          "flow",
          9928,
          "flow",
          false
        ],
        [
          261,
          "Y",
          9928,
          "val",
          false
        ],
        [
          10144,
          "flow",
          10153,
          "flow",
          false
        ],
        [
          633,
          "objID",
          10153,
          "newPin",
          false
        ],
        [
          547,
          "flow",
          10089,
          "flow",
          false
        ],
        [
          799,
          "flow",
          10242,
          "flow",
          false
        ],
        [
          809,
          "True",
          10242,
          "on",
          false
        ],
        [
          526,
          "flow",
          10186,
          "flow",
          false
        ],
        [
          4986,
          "match_2",
          9897,
          "flow",
          false
        ],
        [
          10059,
          "flow",
          10058,
          "flow",
          false
        ],
        [
          523,
          "Y",
          10058,
          "val",
          false
        ],
        [
          10255,
          "flow",
          10275,
          "flow",
          false
        ],
        [
          52,
          "flow",
          10219,
          "flow",
          true
        ],
        [
          917,
          "flow",
          10219,
          "on",
          true
        ],
        [
          10154,
          "flow",
          10155,
          "flow",
          false
        ],
        [
          10090,
          "flow",
          10091,
          "flow",
          false
        ],
        [
          799,
          "flow",
          10244,
          "flow",
          false
        ],
        [
          1482,
          "out",
          10188,
          "flow",
          false
        ],
        [
          24,
          "true",
          10188,
          "flow",
          false
        ],
        [
          83,
          "flow",
          9899,
          "flow",
          false
        ],
        [
          83,
          "Y",
          9899,
          "val",
          false
        ],
        [
          407,
          "flow",
          10124,
          "flow",
          false
        ],
        [
          118,
          "a",
          10060,
          "flow",
          false
        ],
        [
          407,
          "output",
          10060,
          "data",
          true
        ],
        [
          1012,
          "flow",
          10277,
          "flow",
          false
        ],
        [
          825,
          "down",
          10277,
          "reset",
          false
        ],
        [
          10152,
          "flow",
          10157,
          "flow",
          false
        ],
        [
          275,
          "destid",
          10157,
          "val",
          false
        ],
        [
          10240,
          "flow",
          10255,
          "flow",
          false
        ],
        [
          816,
          "flow",
          10250,
          "flow",
          false
        ],
        [
          296,
          "flow",
          10029,
          "flow",
          false
        ],
        [
          4994,
          "flow",
          5006,
          "flow",
          false
        ],
        [
          10033,
          "flow",
          10036,
          "flow",
          false
        ],
        [
          10033,
          "Y",
          10036,
          "val",
          false
        ],
        [
          422,
          "flow",
          10190,
          "flow",
          false
        ],
        [
          137,
          "triggerName",
          10190,
          "val",
          false
        ],
        [
          782,
          "flow",
          9901,
          "flow",
          false
        ],
        [
          782,
          "output",
          9901,
          "data",
          false
        ],
        [
          106,
          "val",
          9901,
          "id",
          false
        ],
        [
          587,
          "flow",
          10126,
          "flow",
          false
        ],
        [
          1193,
          "flow",
          10258,
          "flow",
          false
        ],
        [
          829,
          "gmwp",
          10258,
          "val",
          false
        ],
        [
          875,
          "flow",
          10259,
          "flow",
          false
        ],
        [
          591,
          "false",
          10259,
          "reset",
          false
        ],
        [
          875,
          "data",
          10259,
          "group",
          false
        ],
        [
          846,
          "trucks",
          10259,
          "quantity",
          false
        ],
        [
          1017,
          "match_2",
          10279,
          "flow",
          false
        ],
        [
          1017,
          "match_1",
          10279,
          "flow",
          false
        ],
        [
          10272,
          "flow",
          10254,
          "flow",
          false
        ],
        [
          627,
          "True",
          10223,
          "flow",
          false
        ],
        [
          10028,
          "flow",
          10027,
          "flow",
          false
        ],
        [
          275,
          "slips",
          10027,
          "val",
          false
        ],
        [
          10242,
          "flow",
          10243,
          "flow",
          false
        ],
        [
          809,
          "True",
          10243,
          "reset",
          false
        ],
        [
          4995,
          "match_2",
          9870,
          "flow",
          false
        ],
        [
          558,
          "flow",
          10095,
          "flow",
          false
        ],
        [
          10241,
          "flow",
          10246,
          "flow",
          false
        ],
        [
          186,
          "False",
          10031,
          "flow",
          false
        ],
        [
          1181,
          "down",
          10034,
          "flow",
          false
        ],
        [
          808,
          "True",
          10245,
          "flow",
          false
        ],
        [
          10180,
          "flow",
          10192,
          "flow",
          false
        ],
        [
          275,
          "useTraffic",
          10192,
          "val",
          false
        ],
        [
          157,
          "flow",
          5016,
          "flow",
          false
        ],
        [
          157,
          "flow",
          5016,
          "flow",
          false
        ],
        [
          157,
          "destid",
          5016,
          "val",
          false
        ],
        [
          593,
          "flow",
          10128,
          "flow",
          false
        ],
        [
          81,
          "vehId",
          10128,
          "vehId",
          false
        ],
        [
          868,
          "false",
          10256,
          "flow",
          false
        ],
        [
          869,
          "num",
          10256,
          "val",
          false
        ],
        [
          265,
          "flow",
          10025,
          "flow",
          false
        ],
        [
          275,
          "desc",
          10025,
          "val",
          false
        ],
        [
          10245,
          "down",
          10281,
          "flow",
          false
        ],
        [
          843,
          "down",
          10281,
          "flow",
          false
        ],
        [
          10015,
          "flow",
          10024,
          "flow",
          false
        ],
        [
          806,
          "flow",
          10023,
          "flow",
          false
        ],
        [
          872,
          "flow",
          10257,
          "flow",
          false
        ],
        [
          157,
          "gmwp",
          10257,
          "val",
          false
        ],
        [
          658,
          "flow",
          10161,
          "flow",
          false
        ],
        [
          450,
          "flow",
          10161,
          "reset",
          false
        ],
        [
          10251,
          "flow",
          10252,
          "flow",
          false
        ],
        [
          10250,
          "val",
          10252,
          "X",
          false
        ],
        [
          829,
          "reputation",
          10252,
          "DX",
          false
        ],
        [
          10040,
          "flow",
          10097,
          "flow",
          false
        ],
        [
          275,
          "basePrice",
          10097,
          "val",
          false
        ],
        [
          240,
          "flow",
          5002,
          "flow",
          false
        ],
        [
          10034,
          "flow",
          10033,
          "flow",
          false
        ],
        [
          10034,
          "val",
          10033,
          "X",
          false
        ],
        [
          10029,
          "val",
          10033,
          "DX",
          false
        ]
      ],
      "name":"New State",
      "nodes":{
        "7":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "dtRaw":true,
              "dtReal":true,
              "dtSim":true,
              "enterState":false,
              "exitState":false,
              "flow":false
            }
          },
          "pos":[
            -270,
            92
          ],
          "type":"events/onUpdate"
        },
        "9":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1270,
            -2005
          ],
          "type":"logic/bundle"
        },
        "10":{
          "data":{
            "blocksOnResetGameplay":true
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "value":true
            }
          },
          "pos":[
            368,
            134
          ],
          "type":"activity/requestAbandon"
        },
        "11":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            94,
            -4430
          ],
          "type":"scene/singleMarker"
        },
        "12":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1984,
            -174
          ],
          "type":"types/genericValue"
        },
        "13":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.updateMarkers()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Markers",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            648,
            1744
          ],
          "type":"util/customLua"
        },
        "14":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve ~= nil then\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"odo"
            },
            "toFetch":{
              "type":"string",
              "value":"electrics.values.odometer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":false,
              "flow":false,
              "toFetch":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            2264,
            -538
          ],
          "type":"util/customLua"
        },
        "15":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal unit = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal odoval = 0\nlocal odotxt = \"\"\nlocal rawval = 0\nif self.pinIn.fetch.value ~= nil then\nodoval = tonumber(self.pinIn.fetch.value)\nrawval = odoval\nif unit == \"imperial\" then\nodoval = odoval / 1.609\nodotxt = string.format(\"Odometer : %.1f mi\", odoval / 1000)\nelse\nodotxt = string.format(\"Odometer : %.1f km\", odoval / 1000)\nend\nif self.pinIn.faked.value then \nodotxt = odotxt .. \" (Faked)\"\nend\nelse\nodoval = -1\nodotxt = \"Odometer Not Ready\"\nend\nself.pinOut.text.value = odotxt\nself.pinOut.val.value = rawval\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "faked":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "faked":false,
              "fetch":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "text":false,
              "val":false
            }
          },
          "name":"Odometer Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "fetch",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "faked",
              null,
              ""
            ],
            [
              "out",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2264,
            -384
          ],
          "type":"util/customLua"
        },
        "16":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1930,
            2073
          ],
          "commentText":"",
          "commentTitle":"Mission System",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -546,
            -5600
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "17":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1550,
            -689
          ],
          "type":"logic/bundle"
        },
        "18":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"~=",
          "pos":[
            3608,
            78
          ],
          "type":"logic/compare"
        },
        "19":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1566,
            1278
          ],
          "commentText":"",
          "commentTitle":"Player Garage",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            2730,
            -644
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "20":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve\nlocal fullpath = self.pinIn.filename.value\nve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" )\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" ) -- Might fix wheels falling off bug\nself.pinOut.dbgval.value = fullpath\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "dbgval":false,
              "flow":false
            }
          },
          "name":"Save Beamstate To File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dbgval",
              null,
              ""
            ]
          ],
          "pos":[
            808,
            330
          ],
          "type":"util/customLua"
        },
        "21":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentObj\nfor _,id in pairs(self.pinIn.idtable.value) do\nif id ~= -1 then\ncurrentObj = scenetree.findObjectById(id)\ncurrentObj:delete()\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ]
          ],
          "pos":[
            3714,
            -3492
          ],
          "type":"util/customLua"
        },
        "22":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3028,
            -678
          ],
          "type":"logic/flowSwitch"
        },
        "23":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2418,
            -689
          ],
          "type":"logic/bundle"
        },
        "24":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            528,
            -1770
          ],
          "type":"logic/compare"
        },
        "25":{
          "customName":"Reset UI Trig State",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"uiTriggerState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            136,
            -888
          ],
          "type":"types/genericValue"
        },
        "26":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendDataToUI(\"triggerState\", self.pinIn.type.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "type":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "type":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Trigger State",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "type",
              null,
              ""
            ]
          ],
          "pos":[
            332,
            -874
          ],
          "type":"util/customLua"
        },
        "27":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Small Item Delivery"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            136,
            -3268
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "28":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.IMGUIResetInitStates()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"IMGUI Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -354,
            302
          ],
          "type":"util/customLua"
        },
        "29":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerReady"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1908,
            -118
          ],
          "type":"types/genericValue"
        },
        "30":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal spawn = extensions.blrutils.getMapSpawn()\nself.pinOut.pos.value = spawn[\"pos\"]\nself.pinOut.rot.value = spawn[\"rot\"]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "pos":false,
              "rot":false
            }
          },
          "name":"Get Map Spawn",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "rot",
              null,
              ""
            ]
          ],
          "pos":[
            -1712,
            2360
          ],
          "type":"util/customLua"
        },
        "31":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1186,
            -2764
          ],
          "type":"logic/frameDelay"
        },
        "32":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Player Garage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            2936,
            -454
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "33":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.loadInventoryFromFile(\"beamLR/partinv\")\nextensions.betterpartmgmt.loadPartPriceLibrary(\"beamLR/partprices\")\nextensions.betterpartmgmt.loadCategories(\"beamLR/partCategories\")\nextensions.blrhooks.loadBLRHooks()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Init BetterPartMGMT",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -60,
            190
          ],
          "type":"util/customLua"
        },
        "34":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1998,
            -1056
          ],
          "type":"logic/branch"
        },
        "35":{
          "customName":"Get Money",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2202,
            -1098
          ],
          "type":"types/genericValue"
        },
        "36":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vars = {}\nlocal traffic = extensions.gameplay_traffic.getTrafficData()\nlocal vehs = extensions.gameplay_traffic.getTrafficList()\nvars.spawnValue = 1e-12\nextensions.gameplay_traffic.setTrafficVars(vars)\nfor _,id in pairs(vehs) do\ntraffic[id]:modifyRespawnValues(-1000000,10000000,0)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Traffic Spawn Rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -662,
            1058
          ],
          "type":"util/customLua"
        },
        "37":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"missionGiverUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -4,
            -3422
          ],
          "type":"types/genericValue"
        },
        "38":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2972,
            246
          ],
          "type":"types/genericValue"
        },
        "39":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal cost = extensions.blrutils.blrvarGet(\"smoothFuelCost\")\nlocal money = self.pinIn.money.value\nself.pinOut.max.value = money / cost"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "money":false
            },
            "p_out":{
              "flow":false,
              "max":false
            }
          },
          "name":"Get Max Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "out",
              "number",
              "max",
              null,
              ""
            ]
          ],
          "pos":[
            2362,
            -1098
          ],
          "type":"util/customLua"
        },
        "40":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1284,
            -902
          ],
          "type":"types/genericValue"
        },
        "41":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":true,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            1270,
            -1014
          ],
          "type":"logic/compare"
        },
        "42":{
          "alpha":1,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            180,
            57
          ],
          "commentText":"",
          "commentTitle":"Active Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -994,
            -2954
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "43":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Part Shop"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -284,
            -3002
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "44":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3210,
            -188
          ],
          "type":"vehicle/freeze"
        },
        "45":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -18,
            -2862
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "46":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveInventoryToFile(\"beamLR/partinv\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Part Inventory",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1032,
            330
          ],
          "type":"util/customLua"
        },
        "47":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.backupCareer()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Backup Career",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1088,
            568
          ],
          "type":"util/customLua"
        },
        "48":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            -1474,
            652
          ],
          "type":"logic/compare"
        },
        "49":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and storedid > 0 then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar\n\nprint(current .. \" VS \" .. storedid)\nprint(extensions.betterpartmgmt.getMainPartName(true))\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":true,
              "current":false,
              "flow":false,
              "nocar":false,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            3300,
            -3156
          ],
          "type":"util/customLua"
        },
        "50":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            990,
            -3240
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "51":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local scale = 1.0\n\nif self.pinIn.setA.value then\nscale = self.pinIn.scaleA.value\nelseif self.pinIn.setB.value then\nscale = self.pinIn.scaleB.value\nend\n\nself.pinOut.output.value = self.pinIn.input.value * scale"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "scaleA":{
              "type":"number",
              "value":1
            },
            "scaleB":{
              "type":"number",
              "value":1.50000000000000000000
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false,
              "scaleA":true,
              "scaleB":true,
              "setA":false,
              "setB":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Scaler",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "setA",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "setB",
              null,
              ""
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "in",
              "number",
              "scaleA",
              null,
              ""
            ],
            [
              "in",
              "number",
              "scaleB",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            340,
            -1784
          ],
          "type":"util/customLua"
        },
        "52":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1390,
            1523
          ],
          "type":"logic/bundle"
        },
        "53":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"<",
          "pos":[
            3412,
            218
          ],
          "type":"logic/compare"
        },
        "54":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Fueling_Bell"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            396,
            -1462
          ],
          "type":"util/customLua"
        },
        "55":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -508,
            -4220
          ],
          "type":"types/genericValue"
        },
        "56":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            1557,
            -958
          ],
          "type":"scene/getPlayerVehicle"
        },
        "57":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            3622,
            218
          ],
          "type":"logic/compare"
        },
        "58":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1186,
            -2817
          ],
          "type":"logic/bundle"
        },
        "59":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -760,
            -3293
          ],
          "type":"logic/bundle"
        },
        "60":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Previous"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3202,
            386
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "61":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerGarageUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2866,
            -258
          ],
          "type":"types/genericValue"
        },
        "62":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1202,
            1345
          ],
          "commentText":"Nodes related to gameplay interaction with world objects like gas station, repair shop, car shops, races, etc.\\nAlso handling UI selection for world triggers and forwards the selected window to the stats UI selector",
          "commentTitle":"Interaction Group",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -70,
            -1554
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "63":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1370,
            1446
          ],
          "commentText":"Nodes related to data persistence needed to keep vehicle damage between sessions\\nAlso handles all game related data like money, owned cars, owned parts, etc...",
          "commentTitle":"Persistence System",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            350,
            -154
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "64":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3202,
            512
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "65":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            -3422
          ],
          "type":"types/genericValue"
        },
        "66":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1788,
            -1210
          ],
          "type":"logic/branch"
        },
        "67":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -1082,
            2094
          ],
          "type":"util/customLua"
        },
        "68":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.dataTable.value\nself.pinOut.money.value = dtable[\"money\"]\nself.pinOut.carCount.value = dtable[\"carCount\"]\nself.pinOut.carUsed.value = tonumber(dtable[\"carUsed\"])\nself.pinOut.health.value = dtable[\"health\"]\nself.pinOut.time.value = tonumber(dtable[\"time\"])\nself.pinOut.reputation.value = tonumber(dtable[\"rep\"])\nself.pinOut.day.value = tonumber(dtable[\"day\"])\nlocal currentCarKey = \"\"\nlocal carTable = \"\"\nfor i=0,dtable[\"carCount\"]-1 do\ncurrentCarKey = \"car\".. i\ncarTable = string.format(carTable .. \"%s=%s\\n\", currentCarKey, currentCarKey )\nend\nself.pinOut.ownedCars.value = carTable"
          },
          "customName":"BLRDataTableInterpreter",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dataTable":false,
              "flow":false
            },
            "p_out":{
              "carCount":false,
              "carUsed":false,
              "day":false,
              "flow":false,
              "health":false,
              "league":false,
              "money":false,
              "ownedCars":false,
              "reputation":false,
              "time":false
            }
          },
          "name":"BLRDataTableInterpreter",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "dataTable",
              null,
              ""
            ],
            [
              "out",
              "number",
              "money",
              null,
              ""
            ],
            [
              "out",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ownedCars",
              null,
              ""
            ],
            [
              "out",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "out",
              "number",
              "health",
              null,
              ""
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ],
            [
              "out",
              "string",
              "league",
              null,
              ""
            ],
            [
              "out",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "out",
              "number",
              "day",
              null,
              ""
            ]
          ],
          "pos":[
            934,
            -118
          ],
          "type":"util/customLua"
        },
        "69":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2958,
            -1560
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "70":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1594,
            872
          ],
          "commentText":"",
          "commentTitle":"Gas Station UI",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1540,
            -1610
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "71":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            186,
            71
          ],
          "commentText":"",
          "commentTitle":"UI Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -784,
            -3346
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "72":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"if not self.pinIn.nocar.value and self.pinIn.vehRdy.value then\nlocal extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve then\nlocal valFetch = \"extensions.blrVehicleUtils.getFuelTotal()\"\nlocal capFetch = \"extensions.blrVehicleUtils.getFuelCapacityTotal()\"\nlocal oilvalFetch = \"extensions.blrVehicleUtils.getOilVolumeCurrent()\"\nlocal oilcapFetch = \"extensions.blrVehicleUtils.getOilVolumeInitial()\"\nlocal valID = \"fuelval\"\nlocal capID = \"fuelcap\"\nlocal oilvalID = \"oilval\"\nlocal oilcapID = \"oilcap\"\nlocal valcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. valFetch .. \",'\" .. valID .. \"'))\"\nlocal capcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. capFetch .. \",'\" .. capID .. \"'))\"\nlocal oilvalcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. oilvalFetch .. \",'\" .. oilvalID .. \"'))\"\nlocal oilcapcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. oilcapFetch .. \",'\" .. oilcapID .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(valcmd)\nve:queueLuaCommand(capcmd)\nve:queueLuaCommand(oilvalcmd)\nve:queueLuaCommand(oilcapcmd)\nend\nself.pinOut.fuelVal.value = tonumber(extensions.vluaFetchModule.getVal(valID))\nself.pinOut.fuelCap.value = tonumber(extensions.vluaFetchModule.getVal(capID))\nself.pinOut.oilVal.value = tonumber(extensions.vluaFetchModule.getVal(oilvalID))\nself.pinOut.oilCap.value = tonumber(extensions.vluaFetchModule.getVal(oilcapID))\nelse\nself.pinOut.fuelVal.value = 0\nself.pinOut.fuelCap.value = 0\nself.pinOut.oilVal.value = 0\nself.pinOut.oilCap.value = 0\nend\nelse\nself.pinOut.fuelVal.value = 0\nself.pinOut.fuelCap.value = 0\nself.pinOut.oilVal.value = 0\nself.pinOut.oilCap.value = 0\nend"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "nocar":false,
              "vehRdy":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "fuelCap":false,
              "fuelVal":false,
              "oilCap":false,
              "oilVal":false
            }
          },
          "name":"Get Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "fuelVal",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "nocar",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "vehRdy",
              null,
              ""
            ],
            [
              "out",
              "number",
              "fuelCap",
              null,
              ""
            ],
            [
              "out",
              "number",
              "oilVal",
              null,
              ""
            ],
            [
              "out",
              "number",
              "oilCap",
              null,
              ""
            ]
          ],
          "pos":[
            1774,
            -216
          ],
          "type":"util/customLua"
        },
        "73":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            334,
            561
          ],
          "commentText":"Necessary to avoid race conditions\\nin drawing another imgui window at\\nsame time as\\nstats wingow",
          "commentTitle":"Statistics UI Flow Selector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            1162,
            -1386
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "74":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveConfig(self.pinIn.filename.value, self.pinIn.vehid.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save BLR Veh Config",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            5758,
            -272
          ],
          "type":"util/customLua"
        },
        "75":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -522,
            -3842
          ],
          "type":"logic/and"
        },
        "76":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            178,
            -4248
          ],
          "type":"logic/and"
        },
        "77":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2320,
            907
          ],
          "type":"logic/bundle"
        },
        "78":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -1028
          ],
          "type":"logic/and"
        },
        "79":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Player Stats"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            2026,
            -636
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "80":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -200,
            -3898
          ],
          "type":"logic/and"
        },
        "81":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            2012,
            -244
          ],
          "type":"scene/getPlayerVehicle"
        },
        "82":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4084,
            512
          ],
          "type":"types/genericValue"
        },
        "83":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3874,
            372
          ],
          "type":"util/customLua"
        },
        "84":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            1242,
            960
          ],
          "type":"util/customLua"
        },
        "85":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            2754,
            -160
          ],
          "type":"logic/switchcase"
        },
        "86":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            950,
            841
          ],
          "commentText":"Player statistics rendering in UI",
          "commentTitle":"Stats UI",
          "customName":"Comment",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1750,
            -672
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "87":{
          "customName":"Default",
          "data":{
            "value":0
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            2740,
            -314
          ],
          "type":"types/number"
        },
        "88":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2518,
            2157
          ],
          "commentText":"Works using car shop files storing available cars, vehicles are spawned in spots defined in car shop file\\nlike camera transforms for viewing each slot. Bought car details are used to create garage file and\\nattached beamstate file. Car count and player money are updated.\\n\\nSelling mode is more simple, calculates car value based on damage, added parts and base val.\\nSold car files deleted, other files rearranged. Money and car count\\nupdated like in buying.\\n\\nNOW UPDATED TO SAVE\\nCAR SHOP CONFIG FILE TO\\nPLAYER GARAGE IN ORDER\\nTO BE ABLE TO SAVE PART\\nEDITS TO A CONFIG FILE FOR\\nEACH OWNED CAR",
          "commentTitle":"Car Shop System & UI",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1414,
            -3808
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "89":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            178,
            -143
          ],
          "type":"logic/bundle"
        },
        "90":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Car Shop"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            1438,
            -2554
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "91":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveConfig(self.pinIn.filename.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save BLR Veh Config",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            1326,
            764
          ],
          "type":"util/customLua"
        },
        "92":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3874,
            512
          ],
          "type":"util/customLua"
        },
        "93":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":2
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Change Car"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2908,
            -132
          ],
          "type":"util/customLua"
        },
        "94":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2306,
            -636
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "95":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4140,
            -608
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "96":{
          "data":{
            "value":1
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            3888,
            288
          ],
          "type":"types/number"
        },
        "97":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4312,
            823
          ],
          "type":"logic/bundle"
        },
        "98":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal unit = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal money = self.pinIn.money.value or 0\nlocal carCount = self.pinIn.carCount.value or 0\nlocal fuelval = self.pinIn.fuelVal.value or 0\nlocal fuelcap = self.pinIn.fuelCap.value or 0\nlocal damage = self.pinIn.damage.value or 0\nlocal accel = self.pinIn.accel.value or 0\nlocal rep = self.pinIn.rep.value or 0\nlocal health = self.pinIn.health.value or 100\nlocal day = extensions.blrutils.getGameDay()\nlocal oilval = self.pinIn.oilval.value or 0\nlocal oilcap = self.pinIn.oilcap.value or 0\n\nhealth = math.max(health, 0)\n\nlocal text = \"\"\nlocal moneyText = string.format(\"$%.2f\", money)\n\ntext = \"Money: \" .. moneyText .. \"\\n\"\ntext = text .. \"Reputation: \" .. rep .. \"\\n\"\ntext = text .. \"Current Day: \" .. (day + 1) .. \"\\n\"\n\nif unit == \"imperial\" then\ntext = text .. \"Fuel: \" .. string.format(\"%.2f / %.2f Gallons\", fuelval / 3.785, fuelcap / 3.785) .. \"\\n\"\ntext = text .. \"Oil: \" .. string.format(\"%.2f / %.2f Gallons\", oilval / 3.785, oilcap / 3.785) .. \"\\n\"\nelse\ntext = text .. \"Fuel: \" .. string.format(\"%.2f / %.2f Liters\", fuelval, fuelcap) .. \"\\n\"\ntext = text .. \"Oil: \" .. string.format(\"%.2f / %.2f Liters\", oilval, oilcap) .. \"\\n\"\nend\n\ntext = text .. \"Repair Cost: \" .. string.format(\"$%.2f\", damage) .. \"\\n\"\n\nself.pinOut.formatted.value = text\n"
          },
          "customName":"Statistics UI Display",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "accel":false,
              "carCount":false,
              "damage":false,
              "flow":false,
              "fuelCap":false,
              "fuelVal":false,
              "health":false,
              "money":false,
              "oilcap":false,
              "oilval":false,
              "rep":false
            },
            "p_out":{
              "flow":false,
              "formatted":false
            }
          },
          "name":"Statistics UI Display",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "string",
              "formatted",
              null,
              ""
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuelVal",
              null,
              ""
            ],
            [
              "in",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "in",
              "number",
              "accel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuelCap",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oilval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oilcap",
              null,
              ""
            ]
          ],
          "pos":[
            2012,
            -538
          ],
          "type":"util/customLua"
        },
        "99":{
          "count":5,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            },
            "value_4":{
              "type":"number",
              "value":3
            },
            "value_5":{
              "type":"number",
              "value":4
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false,
              "value_4":false,
              "value_5":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "match_4":false,
              "match_5":false,
              "none":false
            }
          },
          "pos":[
            -74,
            -4178
          ],
          "type":"logic/switchcase"
        },
        "100":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2328,
            120
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "101":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            446,
            453
          ],
          "commentText":"Updated interaction marker system works on all maps using file\\nbased list of markers, mass spawned using blrutils and despawned\\non mission stop using mission cleanup node\\n",
          "commentTitle":"Interaction Markers",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            392,
            1344
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "102":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceUseTraffic"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3644,
            -342
          ],
          "type":"types/genericValue"
        },
        "103":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4568,
            708
          ],
          "type":"logic/flowSwitch"
        },
        "104":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = {}\nlocal filename = self.pinIn.input.value[self.pinIn.selected.value]\nif filename ~= nil then\nlocal filedata = readFile(filename)\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nend\nself.pinOut.output.value = dtable\nself.pinOut.sid.value = self.pinIn.selected.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false,
              "selected":false
            },
            "p_out":{
              "flow":false,
              "output":false,
              "sid":false
            }
          },
          "name":"Data Table From File Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "input",
              null,
              ""
            ],
            [
              "in",
              "number",
              "selected",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ],
            [
              "out",
              "number",
              "sid",
              null,
              ""
            ]
          ],
          "pos":[
            1760,
            -3674
          ],
          "type":"util/customLua"
        },
        "105":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3230,
            246
          ],
          "type":"util/customLua"
        },
        "106":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2986,
            120
          ],
          "type":"types/genericValue"
        },
        "107":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\n\nif enabled then\n\nif im.IsItemHovered() then\nlocal down = im.IsMouseClicked(0)\nlocal hold = im.IsMouseDown(0)\nlocal up =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nelse\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse\n\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enabled":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Use This Car"
            }
          },
          "hiddenPins":{
            "p_in":{
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ]
          ],
          "pos":[
            3776,
            -510
          ],
          "type":"util/customLua"
        },
        "108":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"playerGarageUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2782,
            22
          ],
          "type":"types/genericValue"
        },
        "109":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3958,
            -580
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "110":{
          "data":{
            "aboveSpacing":10,
            "belowSpacing":10
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3140,
            -412
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "111":{
          "customName":"Set Current Car",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1362,
            -118
          ],
          "type":"types/genericValue"
        },
        "112":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2762,
            246
          ],
          "type":"types/genericValue"
        },
        "113":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4140,
            -244
          ],
          "type":"types/genericValue"
        },
        "114":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\n\nif self.pinIn.carCount.value == 0 then\nself.pinOut.str.value = \"Garage Empty\"\n\nelseif self.pinIn.shownCar.value == -1 then\nlocal realCount = 0\nif self.pinIn.currentCar.value == -1 then\nrealCount = self.pinIn.carCount.value\nelse\nrealCount = self.pinIn.carCount.value -1\nend\nself.pinOut.str.value = string.format(\"Garage has %d cars stored\", realCount)\nself.pinOut.btn.value = \"Browse\"\n\nelse\n\nlocal dtable = self.pinIn.carTable.value\nlocal theString = string.format(\"Chosen Car %d/%d\\n\", (self.pinIn.shownCar.value+1), self.pinIn.carCount.value)\nlocal shownCarKey = \"car\" .. self.pinIn.shownCar.value\nlocal vehinfo = extensions.blrutils.getVehicleInfoFile(dtable[\"type\"])\nlocal propername = \"\"\nif vehinfo[\"Brand\"] and vehinfo[\"Name\"] then\npropername = vehinfo[\"Brand\"] .. \" \" .. vehinfo[\"Name\"] \nelse\npropername = dtable[\"type\"]\nend\ntheString = string.format(theString .. \"Name: %s\\nType: %s\\n\", dtable[\"name\"], propername)\n\nif (tonumber(dtable[\"impoundval\"] or 0)) > 0 then\ntheString = theString .. \"Impound Cost: $\" .. string.format(\"%.2f\",dtable[\"impoundval\"]) \nend\n\nself.pinOut.str.value = theString\nself.pinOut.btn.value = \"Next\"\nself.pinOut.imcost.value = tonumber(dtable[\"impoundval\"] or 0)\n\nend\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carTable":false,
              "currentCar":false,
              "flow":false,
              "shownCar":false
            },
            "p_out":{
              "btn":false,
              "flow":false,
              "imcost":false,
              "str":false
            }
          },
          "name":"Garage Data Display",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "out",
              "string",
              "str",
              null,
              ""
            ],
            [
              "in",
              "number",
              "shownCar",
              null,
              ""
            ],
            [
              "in",
              "table",
              "carTable",
              null,
              ""
            ],
            [
              "out",
              "string",
              "btn",
              null,
              ""
            ],
            [
              "in",
              "number",
              "currentCar",
              null,
              ""
            ],
            [
              "out",
              "number",
              "imcost",
              null,
              ""
            ]
          ],
          "pos":[
            2986,
            386
          ],
          "type":"util/customLua"
        },
        "115":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.data.value\nlocal seed = self.pinIn.seed.value + self.pinIn.sid.value\nlocal processed = {}\nlocal rpaints = self.pinIn.rpaints.value\nlocal sid = self.pinIn.sid.value\nlocal randpaint = self.pinIn.randpaint.value\nlocal rconfigs = self.pinIn.rconfigs.value\nif dtable[\"type\"] ~= nil then\nprocessed = extensions.blrutils.processCarShopRandoms(dtable, seed)\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.config.value = rconfigs[sid]\nself.pinOut.cost.value = tonumber(processed[\"baseprice\"]) + tonumber(dtable[\"partprice\"])\nself.pinOut.baseprice.value = tonumber(processed[\"baseprice\"])\nself.pinOut.partprice.value = tonumber(dtable[\"partprice\"])\nself.pinOut.scrapval.value = tonumber(dtable[\"scrapval\"])\nif self.pinIn.randpaint.value then\nself.pinOut.paintdata.value = rpaints[sid]\nelse\nself.pinOut.paintdata.value = dtable[\"paint\"]\nend\n\nself.pinOut.odometer.value = tonumber(processed[\"odometer\"])\n\nlocal odoval = tonumber(processed[\"odometer\"]) / 1000\nlocal units = extensions.blrutils.getSettingValue(\"uiUnits\")\n\n\nlocal fulldesc = dtable[\"name\"] .. \"\\n\" \nif units == \"metric\" then\nfulldesc = fulldesc .. \"Odometer : \" .. string.format(\"%.1f\",odoval) .. \" km\\n\"\nelse\nodoval = odoval / 1.609\nfulldesc = fulldesc .. \"Odometer : \" .. string.format(\"%.1f\",odoval)  .. \" mi\\n\"\nend\nfulldesc = fulldesc .. \"Cost : $\" .. string.format(\"%.2f\", tonumber(processed[\"baseprice\"]) + tonumber(dtable[\"partprice\"])) .. \"\\n\"\nself.pinOut.fulldesc.value = fulldesc\n\nelse\nself.pinOut.fulldesc.value = \"Empty Lot\"\nself.pinOut.cost.value = 999999999999\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "randpaint":false,
              "rconfigs":false,
              "rpaints":false,
              "seed":false,
              "sid":false
            },
            "p_out":{
              "baseprice":false,
              "config":false,
              "cost":false,
              "flow":false,
              "fulldesc":false,
              "odometer":false,
              "paintdata":false,
              "partprice":false,
              "scrapval":false,
              "type":false
            }
          },
          "name":"Get Shop Car Data RCONFIG",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "table",
              "config",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fulldesc",
              null,
              ""
            ],
            [
              "out",
              "number",
              "baseprice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "partprice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapval",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "odometer",
              null,
              ""
            ],
            [
              "in",
              "table",
              "rpaints",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "randpaint",
              null,
              ""
            ],
            [
              "in",
              "number",
              "sid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "in",
              "table",
              "rconfigs",
              null,
              ""
            ]
          ],
          "pos":[
            2194,
            -3772
          ],
          "type":"util/customLua"
        },
        "116":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "DX":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            1704,
            -2736
          ],
          "type":"util/customLua"
        },
        "117":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3216,
            162
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "118":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.flow.value = self.pinIn.flow.value\nself.pinOut.a.value=self.pinIn.enableA.value and self.pinIn.flow.value\nself.pinOut.b.value=self.pinIn.enableB.value and self.pinIn.flow.value\nself.pinOut.c.value=self.pinIn.enableC.value and self.pinIn.flow.value\nself.pinOut.d.value=self.pinIn.enableD.value and self.pinIn.flow.value\nself.pinOut.e.value=self.pinIn.enableE.value and self.pinIn.flow.value\nself.pinOut.f.value=self.pinIn.enableF.value and self.pinIn.flow.value\nself.pinOut.g.value=self.pinIn.enableG.value and self.pinIn.flow.value\nself.pinOut.h.value=self.pinIn.enableH.value and self.pinIn.flow.value"
          },
          "customColor":[
            1,
            0.99998998641967773438,
            1,
            0.75000000000000000000
          ],
          "customIcon":"settings_input_composite",
          "customName":"Flow Selector",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "enableA":false,
              "enableB":false,
              "enableC":false,
              "enableD":false,
              "enableE":false,
              "enableF":false,
              "enableG":false,
              "enableH":false,
              "flow":false
            },
            "p_out":{
              "a":false,
              "b":false,
              "c":false,
              "d":false,
              "e":false,
              "f":false,
              "flow":false,
              "g":false,
              "h":false
            }
          },
          "name":"Flow Selector",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "flow",
              "enableA",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "a",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableB",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableC",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableD",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "b",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "c",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "d",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableE",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "e",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableF",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "f",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableG",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "g",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "enableH",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1270,
            -1308
          ],
          "type":"util/customLua"
        },
        "119":{
          "count":2,
          "customName":"Part Shop",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -818
          ],
          "type":"logic/and"
        },
        "120":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1734,
            900
          ],
          "commentText":"",
          "commentTitle":"Mission Giver UI",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -518,
            -3472
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "121":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":false,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            1774,
            -356
          ],
          "type":"util/customLua"
        },
        "122":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            374,
            907
          ],
          "type":"logic/bundle"
        },
        "123":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1074,
            -4581
          ],
          "type":"logic/bundle"
        },
        "124":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal config = self.pinIn.config.value\nlocal filedata = \"\"\nlocal filename = \"beamLR/garage/car\" .. (self.pinIn.count.value)\nlocal paintdata = self.pinIn.paintdata.value\nfiledata = \"name=car \" .. (self.pinIn.count.value + 1) .. \"\\n\"\nfiledata = filedata .. \"type=\" .. self.pinIn.model.value .. \"\\n\"\nfiledata = filedata .. \"gas=2\" .. \"\\n\"\nfiledata = filedata .. \"baseprice=\" .. self.pinIn.baseprice.value .. \"\\n\"\nfiledata = filedata .. \"partprice=\" .. self.pinIn.partprice.value .. \"\\n\"\nfiledata = filedata .. \"scrapval=\" .. self.pinIn.scrapval.value .. \"\\n\"\nfiledata = filedata .. \"paintA=\" .. paintdata[1] .. \"\\n\"\nfiledata = filedata .. \"paintB=\" .. paintdata[2] .. \"\\n\"\nfiledata = filedata .. \"paintC=\" .. paintdata[3] .. \"\\n\"\nfiledata = filedata .. \"damage=0\\n\"\nfiledata = filedata .. \"impoundval=0\\n\"\nfiledata = filedata .. \"nos=0\\n\"\nfiledata = filedata .. \"avbready=0\\n\"\nwriteFile(filename, filedata)\n\nif type(config) == \"table\" then-- Now checking for config type since random configs are in table format\njsonWriteFile(\"beamLR/garage/config/car\" .. (self.pinIn.count.value),config,true) -- Json encoded table format config to save in garage config folder\nelse-- Old config style, just copy the base file to player garage\nextensions.blrutils.copyFile(self.pinIn.config.value, \"beamLR/garage/config/car\" .. (self.pinIn.count.value))\nend\n\nlocal ifile = \"odometer=\" .. self.pinIn.odometer.value\nwriteFile(\"beamLR/beamstate/integrity/car\" .. (self.pinIn.count.value), ifile)\n\nlocal mechdata = extensions.mechDamageLoader.getNewCarMechData()\nwriteFile(\"beamLR/beamstate/mech/car\" .. (self.pinIn.count.value), mechdata)\n\nFS:directoryCreate(\"beamLR/garage/config/template/car\" .. (self.pinIn.count.value))"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "baseprice":false,
              "config":false,
              "count":false,
              "flow":false,
              "model":false,
              "odometer":false,
              "paintdata":false,
              "partprice":false,
              "scrapval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Add Car To Garage V2",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "any",
              "config",
              null,
              ""
            ],
            [
              "in",
              "number",
              "baseprice",
              null,
              ""
            ],
            [
              "in",
              "number",
              "partprice",
              null,
              ""
            ],
            [
              "in",
              "number",
              "scrapval",
              null,
              ""
            ],
            [
              "in",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "in",
              "number",
              "odometer",
              null,
              ""
            ]
          ],
          "pos":[
            2488,
            -3660
          ],
          "type":"util/customLua"
        },
        "125":{
          "count":3,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "none":false
            }
          },
          "pos":[
            1662,
            -2470
          ],
          "type":"logic/switchcase"
        },
        "126":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\n\nif enabled then\n\nif im.IsItemHovered() then\nlocal down = im.IsMouseClicked(0)\nlocal hold = im.IsMouseDown(0)\nlocal up =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nelse\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse\n\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enabled":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Buy"
            }
          },
          "hiddenPins":{
            "p_in":{
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ]
          ],
          "pos":[
            1942,
            -2442
          ],
          "type":"util/customLua"
        },
        "127":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":true,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1144,
            484
          ],
          "type":"logic/flowSwitch"
        },
        "128":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -256,
            -4553
          ],
          "type":"logic/bundle"
        },
        "129":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vehdata = extensions.core_vehicle_manager.getPlayerVehicleData()\nif vehdata ~= nil then\nlocal pvtype = vehdata.mainPartName\nself.pinOut.model.value = pvtype\nif pvtype == \"unicycle\" then\nself.pinOut.walking.value = 1\nelse\nself.pinOut.walking.value = 0\nend\nself.pinOut.rdy.value= true\nelse\nself.pinOut.rdy.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "model":false,
              "rdy":false,
              "walking":false
            }
          },
          "name":"Veh Check",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "model",
              null,
              ""
            ],
            [
              "out",
              "number",
              "walking",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "rdy",
              null,
              ""
            ]
          ],
          "pos":[
            -3420,
            1002
          ],
          "type":"util/customLua"
        },
        "130":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "layout":{
              "type":"string",
              "value":"beamlr"
            },
            "menu":{
              "type":"string",
              "value":"scenario"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gameStateName":true,
              "keepLayout":false,
              "layout":false,
              "menu":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -480,
            -34
          ],
          "type":"ui/setUILayout"
        },
        "131":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            1676,
            -3366
          ],
          "type":"logic/compare"
        },
        "132":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve\n\nfor k,v in pairs(self.pinIn.idtable.value) do\nif v ~= -1 then\nve = scenetree.findObjectById(v)\nve:queueLuaCommand(self.pinIn.cmd.value)\nend\nend"
          },
          "customName":"Turn Off Engines",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cmd":{
              "type":"string",
              "value":"powertrain.getDevice(\"mainEngine\"):setIgnition(0)"
            }
          },
          "hiddenPins":{
            "p_in":{
              "cmd":false,
              "flow":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"VLUA Table Exec",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "string",
              "cmd",
              null,
              ""
            ]
          ],
          "pos":[
            2054,
            -2988
          ],
          "type":"util/customLua"
        },
        "133":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            -1046,
            1142
          ],
          "type":"util/customLua"
        },
        "134":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1412,
            887
          ],
          "commentText":"",
          "commentTitle":"Traffic",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1890,
            616
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "135":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1592,
            -3646
          ],
          "type":"types/genericValue"
        },
        "136":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1844,
            767
          ],
          "type":"logic/bundle"
        },
        "137":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal tenter = false\nlocal texit = false\nlocal nid = self.pinIn.nid.value or 0\nif not extensions.blrtriggers.isNodeRegistered(nid) then\nextensions.blrtriggers.registerNode(nid)\nend\nlocal menuMode = self.pinIn.menuMode.value or false\nlocal veid = self.pinIn.veid.value\nlocal af = self.pinIn.af.value\nlocal menuCounter = 0\n\n-- main trigger data interpret\nlocal tdata = extensions.blrtriggers.poolTriggerData(nid, veid, menuMode)\nif tdata then\ntenter = tdata[\"event\"] == \"enter\"\ntexit = tdata[\"event\"] == \"exit\"\nself.pinOut.triggerID.value = tdata[\"triggerID\"]\nself.pinOut.triggerName.value = tdata[\"triggerName\"]\nend\n\n-- active filtering\nif af == nil then\nself.pinOut.active.value = extensions.blrtriggers.getGlobalTriggerStatus(nid,veid, menuMode)\nelse\nself.pinOut.active.value = extensions.blrtriggers.getTriggerStatus(nid,veid, af, menuMode)\nend\n\n-- menu trigger counter override\nif menuMode and tdata then\nmenuCounter = extensions.blrtriggers.getMenuTriggerCounter(nid, veid,tdata[\"triggerName\"])\ntenter = tenter and menuCounter == 1\ntexit = texit and menuCounter == 0\nend\n\nself.pinOut.enter.value = tenter\nself.pinOut.exit.value = texit"
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":true
            },
            "nid":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "active":false,
              "enter":false,
              "exit":false,
              "flow":true,
              "triggerID":false,
              "triggerName":false
            }
          },
          "name":"VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "active",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "enter",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "exit",
              null,
              ""
            ],
            [
              "out",
              "number",
              "triggerID",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            -46,
            -594
          ],
          "type":"util/customLua"
        },
        "138":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -550,
            -2064
          ],
          "type":"types/genericValue"
        },
        "139":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            388,
            -1364
          ],
          "type":"util/customLua"
        },
        "140":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            },
            "message":{
              "type":"string",
              "value":"BeamLR Career"
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -46,
            -48
          ],
          "type":"ui/flashMessage"
        },
        "141":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1048,
            620
          ],
          "commentText":"",
          "commentTitle":"Car Damage Calc",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1666,
            -4466
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "142":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dest = extensions.blrutils.blrvarGet(\"towdest\")\nextensions.blrutils.towPlayerNoReset(dest)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Tow Player V2",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3118,
            1436
          ],
          "type":"util/customLua"
        },
        "143":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal day = extensions.blrutils.getGameDay()\nlocal changeDone = extensions.blrutils.getDayChangeDone(day)\nlocal changeReady = extensions.blrutils.getDayChangeReady(day)\n\nlocal ttable = extensions.blrutils.formatTimeOfDay(self.pinIn.time.value)\n\nlocal changeFlow = false -- outflow trigger pin state, connected to node that does day change\n\n-- 5 minutes of buffer should allow fast time scales to work\nlocal readyNow = ((ttable[\"hours\"] >= 23) and (ttable[\"minutes\"] >= 55))\nlocal changeNow = ((ttable[\"hours\"] <= 0) and (ttable[\"minutes\"] <= 5))\n\n-- Sets ready state \nif readyNow and not changeReady then \nextensions.blrutils.setDayChangeReady(day) \nend\n\n-- Now performing day change\nif changeReady and not changeDone and changeNow then\nextensions.blrutils.setDayChangeDone(day)\nchangeFlow = true\nend\n\nself.pinOut.trigger.value = changeFlow"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "time":false
            },
            "p_out":{
              "flow":true,
              "trigger":false
            }
          },
          "name":"Day Change Check V2",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "trigger",
              null,
              ""
            ]
          ],
          "pos":[
            416,
            1954
          ],
          "type":"util/customLua"
        },
        "144":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            754,
            309
          ],
          "commentText":"",
          "commentTitle":"Wager Update",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3794,
            -2660
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "145":{
          "customName":"Set Money Value",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1264,
            -118
          ],
          "type":"types/genericValue"
        },
        "146":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\n\nif enabled then\n\nif im.IsItemHovered() then\nlocal down = im.IsMouseClicked(0)\nlocal hold = im.IsMouseDown(0)\nlocal up =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nelse\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse\n\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enabled":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Sell"
            }
          },
          "hiddenPins":{
            "p_in":{
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ]
          ],
          "pos":[
            2278,
            -2428
          ],
          "type":"util/customLua"
        },
        "147":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2056,
            729
          ],
          "commentText":"",
          "commentTitle":"Race Generator",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3752,
            -2282
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "148":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":3
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Next"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2264,
            -2890
          ],
          "type":"util/customLua"
        },
        "149":{
          "customName":"Get Money Value",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1774,
            -524
          ],
          "type":"types/genericValue"
        },
        "150":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":0.75000000000000865974
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "complete":false,
              "completed":false,
              "flow":false,
              "incomplete":false
            }
          },
          "pos":[
            -368,
            1156
          ],
          "type":"ui/fadeFromBlack"
        },
        "151":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCarModel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2986,
            1100
          ],
          "type":"types/genericValue"
        },
        "152":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2250,
            -3436
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "153":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehicleIds":false
            },
            "p_out":{
              "activated":true,
              "flow":false,
              "total":true,
              "vehicleIds":false
            }
          },
          "pos":[
            -934,
            652
          ],
          "type":"gameplay/traffic/trafficActivate"
        },
        "154":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1230,
            477
          ],
          "commentText":"",
          "commentTitle":"Mission Generator",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2310,
            -2828
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "155":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1796,
            25
          ],
          "type":"logic/bundle"
        },
        "156":{
          "customName":"Random Part MID",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "float":{
              "type":"bool",
              "value":false
            },
            "rangeStart":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "float":true,
              "flow":false,
              "rangeEnd":false,
              "rangeStart":false
            },
            "p_out":{
              "flow":false,
              "random":false
            }
          },
          "pos":[
            -2034,
            -2568
          ],
          "type":"util/randomNumber"
        },
        "157":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.mdata.value\nlocal mtype = self.pinIn.mtype.value\nlocal processed = extensions.blrutils.processMissionRandoms(dtable, mtype)\n\nlocal trigname = dtable[\"dest\"] or \"nil\"\nlocal destid = nil\nlocal destobj = nil\nlocal destobjpos = {x=0,y=0,z=0}\n\nif scenetree.findObject(trigname) then\ndestid = scenetree.findObject(trigname):getID()\ndestobj = scenetree.findObjectById(destid)\ndestobjpos = destobj:getPosition()\nend\n\nself.pinOut.destid.value = destid\nself.pinOut.desc.value = processed[\"desc\"]\nself.pinOut.reward.value = tonumber(processed[\"reward\"])\nself.pinOut.gmwp.value = dtable[\"gmwp\"]\nself.pinOut.itemname.value = processed[\"itemname\"]\nself.pinOut.failg.value = tonumber(processed[\"failg\"])\nself.pinOut.trailer.value = processed[\"tconfig\"]\nself.pinOut.destpos.value = {destobjpos.x, destobjpos.y, destobjpos.z}\nself.pinOut.tdpos.value = extensions.blrutils.ssplitnum(dtable[\"destpos\"] or \"\", \",\")\nself.pinOut.tdrot.value = extensions.blrutils.ssplitnum(dtable[\"destrot\"] or \"\", \",\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mdata":false,
              "mtype":false
            },
            "p_out":{
              "desc":false,
              "destid":false,
              "destpos":false,
              "failg":false,
              "flow":false,
              "gmwp":false,
              "itemname":false,
              "reward":false,
              "tdpos":false,
              "tdrot":false,
              "trailer":false
            }
          },
          "name":"Get Mission Params",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "string",
              "desc",
              null,
              ""
            ],
            [
              "out",
              "number",
              "destid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "reward",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "destpos",
              null,
              ""
            ],
            [
              "in",
              "table",
              "mdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "gmwp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "failg",
              null,
              ""
            ],
            [
              "out",
              "string",
              "itemname",
              null,
              ""
            ],
            [
              "in",
              "string",
              "mtype",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "tdpos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "tdrot",
              null,
              ""
            ],
            [
              "out",
              "string",
              "trailer",
              null,
              ""
            ]
          ],
          "pos":[
            -1530,
            -2792
          ],
          "type":"util/customLua"
        },
        "158":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2202,
            -1196
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "159":{
          "customName":"PSSCL",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"psscl"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            822,
            -1364
          ],
          "type":"types/genericValue"
        },
        "160":{
          "customName":"Get Page",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1662,
            -2554
          ],
          "type":"types/genericValue"
        },
        "161":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendDataToUI(\"triggerState\", self.pinIn.type.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "type":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Trigger State",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "type",
              null,
              ""
            ]
          ],
          "pos":[
            640,
            -664
          ],
          "type":"util/customLua"
        },
        "162":{
          "data":{
            "usePoolInactiveAmount":false
          },
          "dynamicMode":"once",
          "hardcodedPins":{
            "aiMode":{
              "type":"string",
              "value":"traffic"
            },
            "directionBias":{
              "type":"number",
              "value":0.80000001200002734958
            },
            "spawnRate":{
              "type":"number",
              "value":0.00009999999750000586
            }
          },
          "hiddenPins":{
            "p_in":{
              "aiMode":true,
              "directionBias":true,
              "enableRandomEvents":true,
              "flow":false,
              "minRoadDrivability":true,
              "minRoadRadius":true,
              "poolActiveAmount":false,
              "reset":false,
              "risk":false,
              "spawnRate":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -704,
            652
          ],
          "type":"gameplay/traffic/trafficParams"
        },
        "163":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4728,
            -258
          ],
          "type":"logic/flowSwitch"
        },
        "164":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDesc"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1278,
            -2792
          ],
          "type":"types/genericValue"
        },
        "165":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = {}\ndtable[\"body\"] = {}\ndtable[\"engine\"] = {}\ndtable[\"powertrain\"] = {}\ndtable[\"wheels\"] = {}\n\ntable.insert(dtable[\"body\"], \"FL\")\ntable.insert(dtable[\"body\"], \"FR\")\ntable.insert(dtable[\"body\"], \"ML\")\ntable.insert(dtable[\"body\"], \"MR\")\ntable.insert(dtable[\"body\"], \"RL\")\ntable.insert(dtable[\"body\"], \"RR\")\n\ntable.insert(dtable[\"engine\"], \"engineReducedTorque\")\ntable.insert(dtable[\"engine\"], \"engineDisabled\")\ntable.insert(dtable[\"engine\"], \"engineLockedUp\")\ntable.insert(dtable[\"engine\"], \"engineIsHydrolocking\")\ntable.insert(dtable[\"engine\"], \"engineHydrolocked\")\ntable.insert(dtable[\"engine\"], \"overRevDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"mildOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"overTorqueDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverTorqueDamage\")\ntable.insert(dtable[\"engine\"], \"impactDamage\")\ntable.insert(dtable[\"engine\"], \"oilpanLeak\")\ntable.insert(dtable[\"engine\"], \"oilRadiatorLeak\")\ntable.insert(dtable[\"engine\"], \"headGasketDamaged\")\ntable.insert(dtable[\"engine\"], \"pistonRingsDamaged\")\ntable.insert(dtable[\"engine\"], \"rodBearingsDamaged\")\ntable.insert(dtable[\"engine\"], \"blockMelted\")\ntable.insert(dtable[\"engine\"], \"oilHot\")\ntable.insert(dtable[\"engine\"], \"cylinderWallsMelted\")\ntable.insert(dtable[\"engine\"], \"radiatorLeak\")\ntable.insert(dtable[\"engine\"], \"coolantHot\")\ntable.insert(dtable[\"engine\"], \"oilLevelCritical\")\ntable.insert(dtable[\"engine\"], \"oilStarvation\")\ntable.insert(dtable[\"engine\"], \"oilLevelTooHigh\")\ntable.insert(dtable[\"engine\"], \"exhaustBroken\")\n\ntable.insert(dtable[\"powertrain\"], \"mainEngine\")\ntable.insert(dtable[\"powertrain\"], \"torqueConverter\")\ntable.insert(dtable[\"powertrain\"], \"gearbox\")\ntable.insert(dtable[\"powertrain\"], \"rangebox\")\ntable.insert(dtable[\"powertrain\"], \"transfercase\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorR\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft\")\ntable.insert(dtable[\"powertrain\"], \"differential_R\")\ntable.insert(dtable[\"powertrain\"], \"transfercase_F\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft_F\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorF\")\ntable.insert(dtable[\"powertrain\"], \"differential_F\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFR\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFR\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRL\")\ntable.insert(dtable[\"powertrain\"], \"clutch\")\n\ntable.insert(dtable[\"wheels\"], \"FR\")\ntable.insert(dtable[\"wheels\"], \"brakeFR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFR\")\ntable.insert(dtable[\"wheels\"], \"tireFR\")\n\ntable.insert(dtable[\"wheels\"], \"FL\")\ntable.insert(dtable[\"wheels\"], \"brakeFL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFL\")\ntable.insert(dtable[\"wheels\"], \"tireFL\")\n\ntable.insert(dtable[\"wheels\"], \"RR\")\ntable.insert(dtable[\"wheels\"], \"brakeRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR\")\ntable.insert(dtable[\"wheels\"], \"tireRR\")\n\ntable.insert(dtable[\"wheels\"], \"RL\")\ntable.insert(dtable[\"wheels\"], \"brakeRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL\")\ntable.insert(dtable[\"wheels\"], \"tireRL\")\n\n\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"All Damage Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            -1298,
            -4290
          ],
          "type":"util/customLua"
        },
        "166":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4938,
            -272
          ],
          "type":"logic/frameDelay"
        },
        "167":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -32,
            -5032
          ],
          "type":"logic/compare"
        },
        "168":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDestid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -32,
            -4920
          ],
          "type":"types/genericValue"
        },
        "169":{
          "customName":"Set Page",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1942,
            -2316
          ],
          "type":"types/genericValue"
        },
        "170":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            530,
            547
          ],
          "commentText":"",
          "commentTitle":"Main Page",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1932,
            -2478
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "171":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":3
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Previous"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2278,
            -2736
          ],
          "type":"util/customLua"
        },
        "172":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Mission In Progress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            192,
            -4136
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "173":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devices = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\n\nif ve then\nlocal cfid = \"\"\nlocal cfidval = 0\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\n-- Loop to fetch damage values and add them to table\n\nfor k,v in pairs(devices) do\ndtable[k] = {}\nfor _,dev in pairs(devices[k]) do\n\ntoFetch = \"damageTracker.getDamage('\" .. k .. \"', '\" .. dev .. \"')\"\ncfid = \"dmgtrk\" .. cfidval\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[k][dev] = extensions.vluaFetchModule.getVal(cfid)\ncfidval = cfidval + 1\nend\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.damageData.value = dtable\n\nelse\nself.pinOut.ready.value = false\nself.pinOut.damageData.value = dtable\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "damageData":false,
              "flow":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "damageData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            -1326,
            -4416
          ],
          "type":"util/customLua"
        },
        "174":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5162,
            -342
          ],
          "type":"logic/once"
        },
        "175":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3650,
            -2526
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "176":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            304,
            -3870
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "177":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal missionID = extensions.gameplay_missions_missionManager.getForegroundMissionId()\nif missionID then\nlocal missionData = gameplay_missions_missions.getMissionById(missionID)\nextensions.gameplay_missions_missionManager.startFromWithinMission(missionData, {})\nelse\nself.graph.mgr:queueForRestart()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mission Restart",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1376,
            2990
          ],
          "type":"util/customLua"
        },
        "178":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            878,
            -4108
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "179":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            170,
            58
          ],
          "commentText":"",
          "commentTitle":"Active flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            4298,
            784
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "180":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":false,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            4504,
            -300
          ],
          "type":"util/customLua"
        },
        "181":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2294,
            886
          ],
          "commentText":"",
          "commentTitle":"Repair Shop UI",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1022,
            -2520
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "182":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDesc"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            10,
            -3898
          ],
          "type":"types/genericValue"
        },
        "183":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":3
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            878,
            -4038
          ],
          "type":"types/genericValue"
        },
        "184":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            -3702
          ],
          "type":"types/genericValue"
        },
        "185":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3314,
            -118
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "186":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -746,
            -874
          ],
          "type":"logic/branch"
        },
        "187":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1452,
            -2736
          ],
          "type":"types/genericValue"
        },
        "188":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1214,
            -1487
          ],
          "type":"logic/bundle"
        },
        "189":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -970,
            -1837
          ],
          "type":"logic/bundle"
        },
        "190":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3448,
            -1585
          ],
          "type":"logic/bundle"
        },
        "191":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Repair Shop"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -970,
            -2316
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "192":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":true,
              "config":true,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":true,
              "name":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            276,
            -1980
          ],
          "type":"util/customLua"
        },
        "193":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Repair Car"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -340,
            -2064
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "194":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            94,
            -2176
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "195":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1068,
            -2470
          ],
          "type":"vehicle/recoverInPlace"
        },
        "196":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal enabled = self.pinIn.enable.value\nextensions.customGuiStream.sendDataToUI(\"running\", enabled)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enable":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "enable":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Custom UI Set Enabled",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "enable",
              null,
              ""
            ]
          ],
          "pos":[
            -60,
            106
          ],
          "type":"util/customLua"
        },
        "197":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "DX":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -2278,
            -1448
          ],
          "type":"util/customLua"
        },
        "198":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":true,
              "walk":false
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            -2684,
            -1280
          ],
          "type":"util/customLua"
        },
        "199":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2020,
            22
          ],
          "type":"logic/compare"
        },
        "200":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            5946,
            -370
          ],
          "type":"util/customLua"
        },
        "201":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal reputation = self.pinIn.reputation.value\nlocal odometer = self.pinIn.odometer.value\nlocal repairCost = self.pinIn.repair.value\nlocal scrapVal = self.pinIn.scrapVal.value\n\nlocal sellValue = extensions.betterpartmgmt.getVehicleSalePrice(odometer,reputation, repairCost,scrapVal)\nself.pinOut.val.value = sellValue\nself.pinOut.scrap.value = sellValue < scrapVal"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "odometer":false,
              "repair":false,
              "reputation":false,
              "scrapVal":false
            },
            "p_out":{
              "flow":false,
              "scrap":false,
              "val":false
            }
          },
          "name":"Part Based Sell Price",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "odometer",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "in",
              "number",
              "repair",
              null,
              ""
            ],
            [
              "in",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "number",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "scrap",
              null,
              ""
            ]
          ],
          "pos":[
            1858,
            -1812
          ],
          "type":"util/customLua"
        },
        "202":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1118,
            844
          ],
          "commentText":"",
          "commentTitle":"Walking Gas Station",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            3164,
            -1568
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "203":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\n\nif enabled then\n\nif im.IsItemHovered() then\nlocal down = im.IsMouseClicked(0)\nlocal hold = im.IsMouseDown(0)\nlocal up =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nelse\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse\n\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enabled":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ]
          ],
          "pos":[
            2376,
            -132
          ],
          "type":"util/customLua"
        },
        "204":{
          "customName":"Player Won?",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -508,
            -804
          ],
          "type":"logic/branch"
        },
        "205":{
          "customName":"Set Store Page",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -46,
            -804
          ],
          "type":"types/genericValue"
        },
        "206":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Complete Mission"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            626,
            -4066
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "207":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.y.value = self.pinIn.x.value + self.pinIn.dx.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dx":false,
              "flow":false,
              "x":false
            },
            "p_out":{
              "flow":false,
              "y":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "x",
              null,
              ""
            ],
            [
              "in",
              "number",
              "dx",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ]
          ],
          "pos":[
            626,
            -4514
          ],
          "type":"util/customLua"
        },
        "208":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            402,
            -4458
          ],
          "type":"types/genericValue"
        },
        "209":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Mission Complete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -536,
            -4080
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "210":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Exit"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -326,
            -3758
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "211":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -522,
            -3744
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "212":{
          "customName":"Set Page",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3636,
            -2428
          ],
          "type":"types/genericValue"
        },
        "213":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            5708,
            330
          ],
          "type":"util/customLua"
        },
        "214":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])\nself.pinOut.nos.value = tonumber(dtable[\"nos\"]) or 0.000000000001\nself.pinOut.avbrdy.value = (tonumber(dtable[\"avbready\"] or \"0\") == 1)\nself.pinOut.fueltype.value = dtable[\"fueltype\"]\nself.pinOut.fuelratio.value = dtable[\"fuelratio\"]\nself.pinOut.oil.value = tonumber(dtable[\"oil\"] or \"-1\") -- -1 fallback value tells set function to use initial value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "avbrdy":false,
              "bsfile":false,
              "config":false,
              "damage":false,
              "flow":false,
              "fuelratio":false,
              "fueltype":false,
              "gas":false,
              "ifile":false,
              "mfile":false,
              "name":true,
              "nos":false,
              "oil":false,
              "paintdata":false,
              "scrapVal":true,
              "type":false
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nos",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "avbrdy",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fuelratio",
              null,
              ""
            ],
            [
              "out",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            4714,
            92
          ],
          "type":"util/customLua"
        },
        "215":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -522,
            -3632
          ],
          "type":"types/genericValue"
        },
        "216":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.text.value = string.format(\"Good job!\\n You gained $%d\", self.pinIn.rew.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "rew":false
            },
            "p_out":{
              "flow":false,
              "text":false
            }
          },
          "name":"Mission End Text",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "string",
              "text",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rew",
              null,
              ""
            ]
          ],
          "pos":[
            -326,
            -3618
          ],
          "type":"util/customLua"
        },
        "217":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -130,
            -3758
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "218":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":true,
              "reputation":true,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            444,
            2178
          ],
          "type":"util/customLua"
        },
        "219":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"waitmsg"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -32,
            680
          ],
          "type":"util/customLua"
        },
        "220":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1452,
            -3310
          ],
          "type":"types/genericValue"
        },
        "221":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -144,
            -3674
          ],
          "type":"types/genericValue"
        },
        "222":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            4462,
            120
          ],
          "type":"util/customLua"
        },
        "223":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -284,
            -3268
          ],
          "type":"logic/compare"
        },
        "224":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -480,
            -3254
          ],
          "type":"types/genericValue"
        },
        "225":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1314,
            660
          ],
          "commentText":"",
          "commentTitle":"Towing",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            2618,
            826
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "226":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -1628,
            -4304
          ],
          "type":"scene/getPlayerVehicle"
        },
        "227":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "float":{
              "type":"bool",
              "value":false
            },
            "rangeStart":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "float":true,
              "flow":false,
              "rangeEnd":false,
              "rangeStart":false
            },
            "p_out":{
              "flow":false,
              "random":false
            }
          },
          "pos":[
            -3224,
            -2050
          ],
          "type":"util/randomNumber"
        },
        "228":{
          "data":{
            "value":0
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            -480,
            -3128
          ],
          "type":"types/number"
        },
        "229":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.dmgTable.value\nlocal ptable = extensions.betterpartmgmt.getGeneratedDamageCost()\nlocal priceTableKey = \"\"\nlocal currentDamage = false\nlocal partCost = 0\nlocal totalCost = 0\nlocal advancedRepairCost = extensions.blrglobals.blrFlagGet(\"advrepaircost\")\nlocal extdmg = self.pinIn.extDmg.value or 0\nlocal minCost = extensions.blrutils.blrvarGet(\"minRepairCost\") or 0\n\nif not advancedRepairCost then\nlocal maxExtDmg = self.pinIn.maxExtDmg.value\nlocal extDmgFreeLimit = self.pinIn.extDmgFreeLimit.value\nextdmg = math.min(extdmg, maxExtDmg) -- Caps ext dmg repair cost at $100k\nif extdmg <= extDmgFreeLimit then -- To help avoid issues with body panels that cause ext dmg even after being repaired\nextdmg = 0\nend\nend\n\nfor k,v in pairs(dtable) do\nif dtable[k] ~= nil then\nfor dev,val in pairs(dtable[k]) do\nif val == true then \npriceTableKey = k .. \".\" .. dev\npartCost = ptable[priceTableKey] or 0\ntotalCost = totalCost+partCost\nend\nend\nend\nend\n--total cost only contains mechanical damage so can be stored for use by advanced repair UI\nextensions.blrutils.blrvarSet(\"mechDamageCost\", totalCost)\n--1.14.1 fix, saved damage sent to advanced repair UI \nextensions.blrutils.blrvarSet(\"minDamageCost\", minCost)\n\n\nif advancedRepairCost then\ntotalCost = totalCost + (extdmg or 0)\nelse\ntotalCost = totalCost + (extdmg or 0) / 100 \nend\n\n-- restores saved vehicle damage cost\ntotalCost = math.max(minCost, totalCost)\n\nextensions.customGuiStream.sendEventBrowserVehicleDamage(totalCost)\n\nself.pinOut.totalCost.value = totalCost"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "extDmgFreeLimit":{
              "type":"number",
              "value":1000
            },
            "maxExtDmg":{
              "type":"number",
              "value":10000000
            }
          },
          "hiddenPins":{
            "p_in":{
              "dmgTable":false,
              "extDmg":false,
              "extDmgFreeLimit":true,
              "flow":false,
              "maxExtDmg":true
            },
            "p_out":{
              "costTable":false,
              "flow":false,
              "totalCost":false
            }
          },
          "name":"Calculate Damage Cost",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "dmgTable",
              null,
              ""
            ],
            [
              "out",
              "number",
              "totalCost",
              null,
              ""
            ],
            [
              "out",
              "table",
              "costTable",
              null,
              ""
            ],
            [
              "in",
              "number",
              "extDmg",
              null,
              ""
            ],
            [
              "in",
              "number",
              "maxExtDmg",
              null,
              ""
            ],
            [
              "in",
              "number",
              "extDmgFreeLimit",
              null,
              ""
            ]
          ],
          "pos":[
            -1082,
            -4416
          ],
          "type":"util/customLua"
        },
        "230":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -298,
            -1042
          ],
          "type":"types/genericValue"
        },
        "231":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2476,
            564
          ],
          "commentText":"",
          "commentTitle":"Buying Mode",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1414,
            -3192
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "232":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3112,
            -3744
          ],
          "type":"types/genericValue"
        },
        "233":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Car Details"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            1606,
            -3548
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "234":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2068,
            -3310
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "235":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            66,
            -2316
          ],
          "type":"logic/compare"
        },
        "236":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1872,
            -3534
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "237":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1018,
            -4262
          ],
          "type":"logic/branch"
        },
        "238":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.shopData.value\nlocal daydata = self.pinIn.dayData.value\nlocal pslots = daydata[\"pslots\"]\nlocal cams = {}\nlocal stock = {}\nlocal slots = {}\nlocal models = extensions.blrutils.loadDataFile(\"beamLR/shop/car/\" .. dtable[\"models\"])\nlocal rpresult = {}\nlocal rpchance = tonumber(dtable[\"rpchance\"])\n\nif not models then -- Fallback list loading method so shops can also use short CSV lists\nmodels = extensions.blrutils.ssplit(dtable[\"models\"], \",\")\nend\n\n\nlocal shopID = tonumber(dtable[\"shopid\"])\nlocal shopSeed = extensions.blrutils.getShopSeed(shopID)\n\nlocal pick = {}\nlocal roll = {}\nlocal rproll = {}\n\nmath.randomseed(shopSeed)\nfor i=0,tonumber(dtable[\"slots\"]) do\nroll[i] = math.random()\npick[i] = math.random(1,#models)\nrproll[i] = math.random()\nend\n\n--dump(roll)\n\nfor i=0,tonumber(dtable[\"slots\"]) do\nif roll[i] < tonumber(dtable[\"chance\"]) then\nif not string.match(pslots, i) then\nstock[i] = \"beamLR/shop/car/\" .. models[pick[i]]\nrpresult[i] = rproll[i] < tonumber(rpchance)\nend\nend\nend\n\nfor i=0,tonumber(dtable[\"slots\"]) do\n  slots[\"slotp\" .. i] = dtable[\"slotp\" .. i]\n  slots[\"slotr\" .. i] = dtable[\"slotr\" .. i]\n  cams[\"camp\" .. i] = dtable[\"camp\" .. i]\n  cams[\"camr\" .. i] = dtable[\"camr\" .. i]\nend\n\nself.pinOut.stock.value = stock\nself.pinOut.shopID.value = shopID\nself.pinOut.cams.value = cams\nself.pinOut.slots.value = slots\nself.pinOut.slotCount.value = tonumber(dtable[\"slots\"])\nself.pinOut.rpresult.value = rpresult"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dayData":false,
              "flow":false,
              "shopData":false
            },
            "p_out":{
              "cams":false,
              "flow":false,
              "rpresult":false,
              "shopID":false,
              "slotCount":false,
              "slots":false,
              "stock":false
            }
          },
          "name":"Car Shop Manager",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "table",
              "stock",
              null,
              ""
            ],
            [
              "in",
              "table",
              "shopData",
              null,
              ""
            ],
            [
              "out",
              "number",
              "slotCount",
              null,
              ""
            ],
            [
              "out",
              "table",
              "slots",
              null,
              ""
            ],
            [
              "out",
              "table",
              "cams",
              null,
              ""
            ],
            [
              "in",
              "table",
              "dayData",
              null,
              ""
            ],
            [
              "out",
              "number",
              "shopID",
              null,
              ""
            ],
            [
              "out",
              "table",
              "rpresult",
              null,
              ""
            ]
          ],
          "pos":[
            1452,
            -2960
          ],
          "type":"util/customLua"
        },
        "239":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            418,
            253
          ],
          "commentText":"Need to switch off this UI even when inside mission giver trigger \\nrange if mission is in progress",
          "commentTitle":"",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -504,
            -3332
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "240":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -284,
            -3156
          ],
          "type":"logic/and"
        },
        "241":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.dtable.value\n\nlocal club = dtable[\"club\"]\nlocal opsp = extensions.blrutils.ssplitnum(dtable[\"opsp\"], \",\")\nlocal opsr = extensions.blrutils.ssplitnum(dtable[\"opsr\"], \",\")\nlocal pspos = extensions.blrutils.ssplitnum(dtable[\"pspos\"], \",\")\nlocal psrot = extensions.blrutils.ssplitnum(dtable[\"psrot\"], \",\")\nlocal psscl = extensions.blrutils.ssplitnum(dtable[\"psscl\"], \",\")\nlocal pstrig = dtable[\"pstrig\"]\nlocal cname = dtable[\"cname\"]\nlocal hours = dtable[\"hours\"]\nlocal draglights = tonumber(dtable[\"draglights\"]) == 1\n\nself.pinOut.club.value = club\nself.pinOut.opSpawnPos.value = opsp\nself.pinOut.opSpawnRot.value = opsr\nself.pinOut.pspos.value = pspos\nself.pinOut.psrot.value = psrot\nself.pinOut.psscl.value = psscl\nself.pinOut.cname.value = cname\nself.pinOut.hours.value = hours\n\n--1.14 west coast drag light flag\nextensions.blrglobals.blrFlagSet(\"raceDragLights\", draglights)\nif draglights then\nextensions.blrdragdisplay.loadObjects()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dtable":false,
              "flow":false
            },
            "p_out":{
              "club":false,
              "cname":false,
              "flow":false,
              "hours":false,
              "opSpawnPos":false,
              "opSpawnRot":false,
              "pspos":false,
              "psrot":false,
              "psscl":false
            }
          },
          "name":"Get Race Club Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "club",
              null,
              ""
            ],
            [
              "in",
              "table",
              "dtable",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "opSpawnPos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "opSpawnRot",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "pspos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "psrot",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "psscl",
              null,
              ""
            ],
            [
              "out",
              "string",
              "cname",
              null,
              ""
            ],
            [
              "out",
              "string",
              "hours",
              null,
              ""
            ]
          ],
          "pos":[
            374,
            -1266
          ],
          "type":"util/customLua"
        },
        "242":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([%w%p]+)=([%w%p]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2096,
            -3170
          ],
          "type":"util/customLua"
        },
        "243":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -916
          ],
          "type":"util/customLua"
        },
        "244":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mode":{
              "type":"string",
              "value":"orbit"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mode":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1956,
            -2218
          ],
          "type":"scene/camera/setCameraMode"
        },
        "245":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.file.value = \"beamLR/shop/\" .. self.pinIn.name.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "file":false,
              "flow":false
            }
          },
          "name":"Car Shop File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1900,
            -3170
          ],
          "type":"util/customLua"
        },
        "246":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            374,
            974
          ],
          "type":"logic/flowSwitch"
        },
        "247":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1180,
            -1084
          ],
          "type":"logic/branch"
        },
        "248":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nif extensions.blrglobals.blrFlagGet(\"shopmode\") then\nself.pinOut.vehid.value = extensions.blrutils.blrvarGet(\"playervehid\")\nelse\nself.pinOut.vehid.value = self.pinIn.current.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "vehid":false
            }
          },
          "name":"Actual Player Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            -1628,
            -4066
          ],
          "type":"util/customLua"
        },
        "249":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            766,
            792
          ],
          "type":"logic/frameDelay"
        },
        "250":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local a = self.pinIn.a.value\nlocal b = self.pinIn.b.value\nlocal en = self.pinIn.cond.value == 1\nself.pinOut.flowA.value = self.pinIn.flowA.value and en\nself.pinOut.flowB.value = self.pinIn.flowB.value and en\nself.pinOut.flowC.value = self.pinIn.flowC.value and en"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cond":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "cond":false,
              "flow":false,
              "flowA":false,
              "flowB":false,
              "flowC":false
            },
            "p_out":{
              "flow":false,
              "flowA":false,
              "flowB":false,
              "flowC":false
            }
          },
          "name":"Conditional Multiflow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "cond",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "flowA",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "flowA",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "flowB",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "flowB",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "flowC",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "flowC",
              null,
              ""
            ]
          ],
          "pos":[
            200,
            -636
          ],
          "type":"util/customLua"
        },
        "251":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.progress.value = \"beamLR/races/\" .. self.pinIn.club.value .. \"/progress\""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "club":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "progress":false
            }
          },
          "name":"Get Club Progress File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "club",
              null,
              ""
            ],
            [
              "out",
              "string",
              "progress",
              null,
              ""
            ]
          ],
          "pos":[
            304,
            -1028
          ],
          "type":"util/customLua"
        },
        "252":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -802,
            -4416
          ],
          "type":"types/genericValue"
        },
        "253":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -794,
            -4262
          ],
          "type":"logic/once"
        },
        "254":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"<",
          "pos":[
            1928,
            -2764
          ],
          "type":"logic/compare"
        },
        "255":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            2124,
            -2778
          ],
          "type":"logic/compare"
        },
        "256":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            2474,
            -3044
          ],
          "type":"util/customLua"
        },
        "257":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":false,
              "reset":true,
              "reverseHit":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            -4220
          ],
          "type":"logic/rateLimit"
        },
        "258":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3210,
            -3464
          ],
          "type":"scene/camera/returnToVehicle"
        },
        "259":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1600,
            -4399
          ],
          "type":"logic/bundle"
        },
        "260":{
          "data":{
            "value":1
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            2488,
            -2918
          ],
          "type":"types/number"
        },
        "261":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            2474,
            -2848
          ],
          "type":"util/customLua"
        },
        "262":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2642,
            -3030
          ],
          "type":"types/genericValue"
        },
        "263":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2748,
            -2708
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "264":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"to avoid errors during\\nvehicle garage switch",
          "commentTitle":"set hasNos to false",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            6174,
            -224
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "265":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceDestID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2552,
            -2232
          ],
          "type":"types/genericValue"
        },
        "266":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local toRet = \"\"\nlocal fmt = string.format(\"%%.%df\", self.pinIn.floatPre.value)\nlocal valText = \"\"\n\nif self.pinIn.isFloat.value == true then \nvalText = string.format(fmt, self.pinIn.value.value)\nelse\nvalText = \"\" .. self.pinIn.value.value\nend\n\nif self.pinIn.prefix.value ~= nil and self.pinIn.showPre.value then\ntoRet = self.pinIn.prefix.value .. valText\nelse\ntoRet = self.pinIn.value.value\nend\n\nif self.pinIn.suffix.value ~= nil and self.pinIn.showSuf.value then\ntoRet = toRet .. self.pinIn.suffix.value\nend\n\nself.pinOut.output.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "floatPre":{
              "type":"number",
              "value":2
            },
            "isFloat":{
              "type":"bool",
              "value":true
            },
            "prefix":{
              "type":"string",
              "value":"Repair Cost : $"
            },
            "showPre":{
              "type":"bool",
              "value":true
            },
            "showSuf":{
              "type":"bool",
              "value":false
            },
            "suffix":{
              "type":"string",
              "value":""
            }
          },
          "hiddenPins":{
            "p_in":{
              "floatPre":true,
              "flow":false,
              "isFloat":true,
              "prefix":true,
              "showPre":true,
              "showSuf":true,
              "suffix":true,
              "value":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Prefixed Value Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ],
            [
              "in",
              "string",
              "prefix",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "suffix",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showPre",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showSuf",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "isFloat",
              null,
              ""
            ],
            [
              "in",
              "number",
              "floatPre",
              null,
              ""
            ]
          ],
          "pos":[
            -550,
            -2176
          ],
          "type":"util/customLua"
        },
        "267":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -340,
            -2302
          ],
          "type":"types/genericValue"
        },
        "268":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devtable = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\n\nif ve then\n\nlocal cfid = \"\"\nlocal cfidval = 0\n\nlocal itmd = \"\"\nlocal itsd = \"\"\nlocal splitres = {}\n\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\nfor _,v in pairs(devtable) do\n\nif v == \"odometer\" then \ntoFetch = \"electrics.values.odometer\"\nelseif string.match(v,\"integrity\") then\nsplitres = extensions.blrutils.ssplit(v, \".\")\nitmd = splitres[2]\nitsd = splitres[3]\nif itsd ~= nil then\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition('\" .. itsd .. \"')\"\nelse\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition()\"\nend\nend\n\n\ncfid = \"integ\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[v] = extensions.vluaFetchModule.getVal(cfid)\n\n\ncfidval = cfidval + 1\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.integrityData.value = dtable\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "uid":{
              "type":"string",
              "value":"giteg"
            }
          },
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "integrityData":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Integrity",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "integrityData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ]
          ],
          "pos":[
            6058,
            -524
          ],
          "type":"util/customLua"
        },
        "269":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2776,
            428
          ],
          "type":"logic/compare"
        },
        "270":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -542,
            -2302
          ],
          "type":"types/genericValue"
        },
        "271":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Not enough money!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -312,
            -2176
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "272":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            508,
            -2428
          ],
          "type":"util/customLua"
        },
        "273":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            5246,
            330
          ],
          "type":"util/customLua"
        },
        "274":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"uiTriggerState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            416,
            -776
          ],
          "type":"types/genericValue"
        },
        "275":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal currentMission = {}\nlocal wagerscl = extensions.blrutils.blrvarGet(\"raceWagerScale\") or 1.0\nlocal repscl = extensions.blrutils.blrvarGet(\"raceRepScale\") or 1.0\n\n--1.13.4 fix for target wager bug, deep copy input table to keep original data format on reload\nfor k,v in pairs(self.pinIn.raceData.value) do\ncurrentMission[k] = v\nend\n\nif currentMission then\nlocal processedMission = {} \nself.pinOut.reload.value = self.pinIn.reload.value\n\n-- Now using perfclass config loader, set resulting table in currentMission data\nlocal loadedConfigs = extensions.blrutils.perfclassConfigLoader(currentMission.enemyConfig)\ncurrentMission.enemyModel = loadedConfigs[\"models\"]\ncurrentMission.enemyConfig = loadedConfigs[\"configs\"]\n\n\nif self.pinIn.reload.value then\nprocessedMission = extensions.blrutils.getLastProcessedRace(currentMission)\nelse\nprocessedMission = extensions.blrutils.processRaceRandoms(currentMission)\nend\n\nlocal wagerData = extensions.blrutils.ssplitnum(currentMission[\"wager\"], \",\")\nlocal pwager = extensions.blrutils.getWager()\nlocal wmax = processedMission[\"wager\"]\nlocal wmin = wagerData[1]\nlocal cwager = extensions.blrutils.cap(pwager, wmin, wmax)\n\n\nself.pinOut.desc.value = currentMission.desc\n\nself.pinOut.slips.value = processedMission[\"slips\"]\n\n--1.14.3 wager scaling option\nself.pinOut.wager.value = math.floor(cwager * wagerscl * 100.0) / 100.0\n\nself.pinOut.opModel.value = processedMission[\"enemyModel\"]\nself.pinOut.opConfig.value = processedMission[\"enemyConfig\"]\nself.pinOut.opRisk.value = processedMission[\"enemyRisk\"]\n\nlocal opConfigName = processedMission[\"enemyConfig\"]:gsub(\".pc\", \"\")\nopConfigName = opConfigName:gsub(\"vehicles/\" .. processedMission[\"enemyModel\"] .. \"/\", \"\")\nlocal opConfigData = extensions.core_vehicles.getModel(processedMission[\"enemyModel\"])[\"configs\"][opConfigName]\nlocal opValue = 500\n\nif opConfigData then\nopValue = opConfigData[\"Value\"]\nelse\nprint(\"RACE LOADER MISSING CONFIG INFO FOR MODEL \" .. processedMission[\"enemyModel\"] .. \" USING CONFIG \" .. opConfigName)\nend\n\n\nself.pinOut.basePrice.value = opValue * 0.2\nself.pinOut.partPrice.value = 0\nself.pinOut.scrapVal.value = opValue * 0.05\nself.pinOut.paintdata.value = currentMission.enemyPaint\n\nself.pinOut.laps.value = processedMission[\"laps\"]\n\nself.pinOut.triggers.value = currentMission.triggers\nself.pinOut.wayps.value = processedMission.waypoints--changed for 1.14 looping subsection\nself.pinOut.opifile.value = currentMission.ifile\nself.pinOut.useTraffic.value = processedMission[\"traffic\"]\nself.pinOut.opAvoid.value = tonumber(currentMission.enemyAvoid)\n\nlocal ttable = extensions.blrutils.ssplit(currentMission.triggers, \",\")\nlocal wtable = extensions.blrutils.ssplit(currentMission.waypoints, \",\")\n\nself.pinOut.cpcount.value = #ttable\nself.pinOut.destid.value = scenetree.findObject(ttable[1]):getID()\nself.pinOut.aiwp.value = wtable[1]\n\nself.pinOut.parts.value = processedMission[\"parts\"]\nself.pinOut.reputation.value = math.floor(processedMission[\"rep\"] * repscl)\nself.pinOut.wpspd.value = currentMission.wpspd\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "raceData":false,
              "reload":false
            },
            "p_out":{
              "aiwp":false,
              "basePrice":false,
              "cpcount":false,
              "desc":false,
              "destid":false,
              "flow":false,
              "laps":false,
              "opAvoid":false,
              "opConfig":false,
              "opModel":false,
              "opRisk":false,
              "opifile":false,
              "paintdata":false,
              "partPrice":false,
              "parts":false,
              "reload":false,
              "reputation":false,
              "scrapVal":false,
              "slips":false,
              "triggers":false,
              "useTraffic":false,
              "wager":false,
              "wayps":false,
              "wpspd":false
            }
          },
          "name":"Race Specific Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "reload",
              null,
              ""
            ],
            [
              "out",
              "number",
              "destid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "desc",
              null,
              ""
            ],
            [
              "out",
              "string",
              "aiwp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "wager",
              null,
              ""
            ],
            [
              "out",
              "number",
              "slips",
              null,
              ""
            ],
            [
              "out",
              "string",
              "opModel",
              null,
              ""
            ],
            [
              "out",
              "string",
              "opConfig",
              null,
              ""
            ],
            [
              "out",
              "number",
              "opRisk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "basePrice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "partPrice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "in",
              "table",
              "raceData",
              null,
              ""
            ],
            [
              "out",
              "string",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggers",
              null,
              ""
            ],
            [
              "out",
              "string",
              "wayps",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cpcount",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "reload",
              null,
              ""
            ],
            [
              "out",
              "string",
              "opifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "useTraffic",
              null,
              ""
            ],
            [
              "out",
              "number",
              "opAvoid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "parts",
              null,
              ""
            ],
            [
              "out",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "out",
              "string",
              "wpspd",
              null,
              ""
            ]
          ],
          "pos":[
            -2902,
            -2246
          ],
          "type":"util/customLua"
        },
        "276":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal fullpath = self.pinIn.filename.value\n\nif extensions.blrglobals.blrFlagGet(\"beamstateToggle\") then\nve:queueLuaCommand(\"beamstate.load(\\\"\" .. fullpath .. \"\\\")\" )\nend\n\nself.pinOut.dbgval.value = fullpath"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "dbgval":false,
              "flow":false
            }
          },
          "name":"Load Beamstate From File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dbgval",
              null,
              ""
            ]
          ],
          "pos":[
            5232,
            204
          ],
          "type":"util/customLua"
        },
        "277":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2224,
            621
          ],
          "commentText":"Spawn in chosen garaged car and loads its beamstate\\nUses current car       pos and rot to spawn",
          "commentTitle":"Load Garaged Car",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            4438,
            28
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "278":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"uiTriggerState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            752,
            -720
          ],
          "type":"types/genericValue"
        },
        "279":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "customName":"N2O Init",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            178,
            134
          ],
          "type":"util/customLua"
        },
        "280":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -46,
            -300
          ],
          "type":"scene/getPlayerVehicle"
        },
        "281":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal nid = self.pinIn.nid.value or 0\nif extensions.blrtriggers.isNodeRegistered(nid) then\nlocal menuMode = self.pinIn.menuMode.value or false\nlocal filter = self.pinIn.veid.value\nlocal af = self.pinIn.af.value\nlocal tdata = extensions.blrtriggers.poolTriggerData(nid, filter, menuMode)\nif tdata then\nself.pinOut.enter.value = tdata[\"event\"] == \"enter\"\nself.pinOut.exit.value = tdata[\"event\"] == \"exit\"\nself.pinOut.triggerID.value = tdata[\"triggerID\"]\nself.pinOut.triggerName.value = tdata[\"triggerName\"]\nelse\nself.pinOut.enter.value = false\nself.pinOut.exit.value = false\nend\nif af == nil then\nself.pinOut.active.value = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, menuMode)\nelse\nself.pinOut.active.value = extensions.blrtriggers.getTriggerStatus(nid,filter, af, menuMode)\nend\nelse\nextensions.blrtriggers.registerNode(nid)\nend\n"
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":false
            },
            "nid":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "active":false,
              "enter":false,
              "exit":false,
              "flow":true,
              "triggerID":false,
              "triggerName":false
            }
          },
          "name":"VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "active",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "enter",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "exit",
              null,
              ""
            ],
            [
              "out",
              "number",
              "triggerID",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            -256,
            -5032
          ],
          "type":"util/customLua"
        },
        "282":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            690,
            -2428
          ],
          "type":"types/genericValue"
        },
        "283":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            858,
            -2428
          ],
          "type":"util/customLua"
        },
        "284":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"reloadRace"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -3756,
            -2526
          ],
          "type":"util/customLua"
        },
        "285":{
          "alpha":1,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"config file\\nto player\\ngarage for\\npart edit\\nsystem to\\nwork fine\\n",
          "commentTitle":"now copies",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            2590,
            -3486
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "286":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve\nlocal fullpath = self.pinIn.filename.value\nve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" )\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" ) -- Might fix wheels falling off bug\nself.pinOut.dbgval.value = fullpath\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "dbgval":false,
              "flow":false
            }
          },
          "name":"Save Beamstate To File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dbgval",
              null,
              ""
            ]
          ],
          "pos":[
            4938,
            -594
          ],
          "type":"util/customLua"
        },
        "287":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2098,
            491
          ],
          "commentText":"Saves current car beamstate before it is despawned",
          "commentTitle":"Save Current Car",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            4480,
            -658
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "288":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            948,
            190
          ],
          "type":"util/customLua"
        },
        "289":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3476,
            -342
          ],
          "type":"logic/compare"
        },
        "290":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2986,
            190
          ],
          "type":"types/genericValue"
        },
        "291":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal canPayMoney = false\nlocal canPaySlips = false -- Event restricted vehicles can't be used in pink slips races\nlocal canPay = false -- Final bool showing or hiding accept race button\nlocal toRet = \"\"\nlocal opmodel = self.pinIn.opmodel.value\n\nlocal vehinfo = extensions.blrutils.getVehicleInfoFile(opmodel)\nlocal propername = \"\"\nif (vehinfo[\"Brand\"] and vehinfo[\"Name\"]) then\npropername = vehinfo[\"Brand\"] .. \" \" .. vehinfo[\"Name\"] \nif opmodel == \"pessima\" or opmodel == \"midsize\" then \npropername=propername..\" (\" .. vehinfo[\"Years\"][\"min\"] .. \")\"\nend\nelse\npropername = opmodel\nend\n\n\ntoRet = toRet .. self.pinIn.desc.value .. \"\\n\\nLaps: \" .. self.pinIn.laps.value .. \"\\nCheckpoints: \" .. self.pinIn.cpc.value .. \"\\nOpponent: \" .. propername .. \"\\n\"\n\n\nif self.pinIn.slips.value ~= 0 then\nlocal sev = self.pinIn.ebp.value + self.pinIn.epp.value\nif self.pinIn.wager.value == 0 then\ntoRet = toRet .. \"Wager: Pink Slips\\n\"\nelse\ntoRet = toRet .. \"Wager: Pink Slips + $\" .. self.pinIn.wager.value .. \"\\n\"\nend\nelse\ntoRet = toRet .. \"Wager: $\" .. self.pinIn.wager.value .. \"\\n\"\nend\n\nif self.pinIn.reputation.value ~= 0 then\ntoRet = toRet .. \"Rep Reward: \" .. self.pinIn.reputation.value .. \"\\n\"\nend\n\nif self.pinIn.parts.value ~= \"none\" then\ntoRet = toRet .. \"Part Reward: \" .. self.pinIn.parts.value .. \"\\n\"\nend\n\nif self.pinIn.traffic.value == 1 then\ntoRet = toRet .. \"Traffic: Enabled\\n\"\nelse\ntoRet = toRet .. \"Traffic: Disabled\\n\"\nend\n\nself.pinOut.full.value = toRet\n\ncanPayMoney = self.pinIn.pcash.value >= self.pinIn.wager.value\nif self.pinIn.slips.value ~= 0 then\ncanPaySlips = not extensions.blrglobals.blrFlagGet(\"vehicleEventRestricted\")\nelse\ncanPaySlips = true\nend\ncanPay = canPaySlips and canPayMoney\nself.pinOut.canPay.value = canPay\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cpc":false,
              "desc":false,
              "ebp":false,
              "epp":false,
              "flow":false,
              "laps":false,
              "opmodel":false,
              "parts":false,
              "pcash":false,
              "reputation":false,
              "slips":false,
              "traffic":false,
              "wager":false
            },
            "p_out":{
              "canPay":false,
              "flow":false,
              "full":false
            }
          },
          "name":"Race Description",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "full",
              null,
              ""
            ],
            [
              "in",
              "string",
              "desc",
              null,
              ""
            ],
            [
              "in",
              "number",
              "wager",
              null,
              ""
            ],
            [
              "in",
              "number",
              "slips",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "canPay",
              null,
              ""
            ],
            [
              "in",
              "number",
              "pcash",
              null,
              ""
            ],
            [
              "in",
              "number",
              "ebp",
              null,
              ""
            ],
            [
              "in",
              "number",
              "epp",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "in",
              "string",
              "parts",
              null,
              ""
            ],
            [
              "in",
              "string",
              "opmodel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "traffic",
              null,
              ""
            ]
          ],
          "pos":[
            -1390,
            -1098
          ],
          "type":"util/customLua"
        },
        "292":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2488,
            -3772
          ],
          "type":"types/genericValue"
        },
        "293":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "block":{
              "type":"bool",
              "value":true
            },
            "ignoreUnrestriced":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "block":true,
              "flow":false,
              "id":true,
              "ignoreUnrestriced":true,
              "reset":false
            },
            "p_out":{
              "flow":false,
              "id":true
            }
          },
          "list":[
            "dropPlayerAtCamera",
            "faster_motion",
            "loadHome",
            "nodegrabberAction",
            "nodegrabberStrength",
            "parts_selector",
            "recover_vehicle",
            "reload_all_vehicles",
            "reload_vehicle",
            "saveHome",
            "slower_motion",
            "switch_next_vehicle",
            "switch_previous_vehicle",
            "toggleAITraffic",
            "toggleBigMap",
            "toggleCamera",
            "toggleTraffic",
            "toggle_slow_motion",
            "vehicle_selector"
          ],
          "pos":[
            -718,
            -20
          ],
          "type":"input/blacklistAction"
        },
        "294":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            914,
            -2162
          ],
          "type":"types/genericValue"
        },
        "295":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])\nself.pinOut.nos.value = tonumber(dtable[\"nos\"]) or 0.000000000001\nself.pinOut.avbrdy.value = (tonumber(dtable[\"avbready\"] or \"0\") == 1)\nself.pinOut.fueltype.value = dtable[\"fueltype\"]\nself.pinOut.fuelratio.value = dtable[\"fuelratio\"]\nself.pinOut.oil.value = tonumber(dtable[\"oil\"] or \"-1\") -- -1 fallback value tells set function to use initial value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "avbrdy":false,
              "bsfile":false,
              "config":false,
              "damage":false,
              "flow":false,
              "fuelratio":false,
              "fueltype":false,
              "gas":false,
              "ifile":false,
              "mfile":false,
              "name":true,
              "nos":false,
              "oil":false,
              "paintdata":false,
              "scrapVal":true,
              "type":false
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nos",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "avbrdy",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fuelratio",
              null,
              ""
            ],
            [
              "out",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            1186,
            162
          ],
          "type":"util/customLua"
        },
        "296":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceDesc"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -1154
          ],
          "type":"types/genericValue"
        },
        "297":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -3658,
            -244
          ],
          "type":"util/customLua"
        },
        "298":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            2740,
            -3604
          ],
          "type":"util/customLua"
        },
        "299":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"cgas"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2510,
            -412
          ],
          "type":"util/customLua"
        },
        "300":{
          "data":{
            "value":1
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            2740,
            -3478
          ],
          "type":"types/number"
        },
        "301":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3770,
            -2456
          ],
          "type":"logic/branch"
        },
        "302":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2922,
            -3646
          ],
          "type":"types/genericValue"
        },
        "303":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            766,
            162
          ],
          "type":"types/genericValue"
        },
        "304":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            -640,
            1170
          ],
          "type":"util/customLua"
        },
        "305":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3770,
            -2565
          ],
          "type":"logic/bundle"
        },
        "306":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"stat"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1774,
            -608
          ],
          "type":"util/customLua"
        },
        "307":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":false,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            -318,
            2668
          ],
          "type":"util/customLua"
        },
        "308":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.cameraReset()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Reset Camera",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -634,
            1716
          ],
          "type":"util/customLua"
        },
        "309":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":true,
              "corner_BL":true,
              "corner_BR":true,
              "corner_FL":true,
              "corner_FR":true,
              "damage":false,
              "dirVec":true,
              "dirVecUp":true,
              "flow":false,
              "position":true,
              "rotation":true,
              "velocity":true,
              "velocityVector":true,
              "wheelCenter":true
            }
          },
          "pos":[
            -1390,
            -4080
          ],
          "type":"vehicle/vehicleData"
        },
        "310":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"uiTriggerState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            430,
            -860
          ],
          "type":"types/genericValue"
        },
        "311":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -858,
            1618
          ],
          "type":"logic/branch"
        },
        "312":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"be.nodeGrabber:addStrength(-100)\nbe.nodeGrabber:addStrength(self.pinIn.strength.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "strength":{
              "type":"number",
              "value":15
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "strength":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Forced Grab Strength",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "strength",
              null,
              ""
            ]
          ],
          "pos":[
            -46,
            246
          ],
          "type":"util/customLua"
        },
        "313":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3560,
            -2442
          ],
          "type":"logic/once"
        },
        "314":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"leagueProgressUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3448,
            -1700
          ],
          "type":"types/genericValue"
        },
        "315":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2762,
            -2456
          ],
          "type":"logic/frameDelay"
        },
        "316":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.setFilter(\"all\")\n\nlocal list = extensions.betterpartmgmt.getPartShopList()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"availParts\", list)\n\nlist = extensions.betterpartmgmt.getGarageUIData()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"garageData\", list)\n\nlist = extensions.betterpartmgmt.getFullPartPrices()\nextensions.customGuiStream.sendDataToUI(\"partPrices\", list)\n\nlist = extensions.betterpartmgmt.getPartNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"partNames\", list)\nextensions.customGuiStream.sendRepairData(nil, list, nil)\n\nlist = extensions.betterpartmgmt.getSlotNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"slotNames\", list)\n\nlist = extensions.betterpartmgmt.getVehicleParts()\nextensions.customGuiStream.sendDataToUI(\"usedParts\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIData()\nextensions.customGuiStream.sendDataToUI(\"tuningData\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIValues()\nextensions.customGuiStream.sendDataToUI(\"tuningValues\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesSlider\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesNumfield\", list)\nlist = extensions.betterpartmgmt.getSortedTuningCategories(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedCategories\", list)\nlist = extensions.betterpartmgmt.getSortedTuningFields(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedFields\", list)\n\n-- 1.14 fix to prevent removing main part (bugs the game)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendDataToUI(\"mainpart\", mainpart)\n\n\nextensions.customGuiCallbacks.exec(\"reloadPaint\")\n\nlist = extensions.betterpartmgmt.getPartPreviewImageTable()\nextensions.customGuiStream.sendDataToUI(\"partpreview\", list )\n\nlocal seed = extensions.blrutils.getCareerSeed()\nextensions.customGuiStream.sendDataToUI(\"seed\", seed)\n\nlocal inventory = extensions.betterpartmgmt.getPartInventory()\nextensions.customGuiStream.sendDataToUI(\"ownedParts\", inventory)\n\nlist = extensions.betterpartmgmt.getSortedShopSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedShopSlots\", list)\nlist = extensions.betterpartmgmt.getSortedShopParts()\nextensions.customGuiStream.sendDataToUI(\"sortedShopParts\", list)\nlist = extensions.betterpartmgmt.getSortedGarageSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageSlots\", list)\nlist = extensions.betterpartmgmt.getSortedGarageParts()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageParts\", list)\n\nextensions.blrutils.uiRefreshTemplates()\n\n--1.13 gps\nextensions.blrutils.gpsToggleStateUpdate()\n\n--1.14 selective repair maps\nlocal cmap = extensions.betterpartmgmt.getChildMap()\nlocal pmap = extensions.betterpartmgmt.getParentMap()\nextensions.customGuiStream.sendRepairUIMaps(pmap, cmap)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendRepairUIMainPart(mainpart)"
          },
          "customName":"Send UI Data",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Part List NO PRICE SCALE",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ]
          ],
          "pos":[
            1438,
            1254
          ],
          "type":"util/customLua"
        },
        "317":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"reloadRace"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -3560,
            -2568
          ],
          "type":"util/customLua"
        },
        "318":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2972,
            2657
          ],
          "type":"logic/bundle"
        },
        "319":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            368,
            36
          ],
          "type":"vehicle/removeVehicle"
        },
        "320":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":true,
              "damage":false,
              "dirVec":true,
              "dirVecUp":true,
              "flow":false,
              "position":true,
              "rotation":true,
              "velocity":true,
              "velocityVector":true
            }
          },
          "pos":[
            1956,
            -62
          ],
          "type":"vehicle/vehicleMapData"
        },
        "321":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":true,
              "damage":true,
              "dirVec":true,
              "dirVecUp":true,
              "flow":false,
              "position":false,
              "rotation":false,
              "velocity":true,
              "velocityVector":true
            }
          },
          "pos":[
            4476,
            456
          ],
          "type":"vehicle/vehicleMapData"
        },
        "322":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWager"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3196,
            -2456
          ],
          "type":"types/genericValue"
        },
        "323":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"careerResetRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -326,
            2206
          ],
          "type":"util/customLua"
        },
        "324":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3364,
            -2610
          ],
          "type":"types/genericValue"
        },
        "325":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3378,
            -2484
          ],
          "type":"logic/compare"
        },
        "326":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            838,
            828
          ],
          "commentText":"BLRGlobals system to hand out       certain data to custom LUA and custom UI code\\nLike player money               for part purchases UI",
          "commentTitle":"BLRGlobals",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2996,
            2562
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "327":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -2538,
            2710
          ],
          "type":"util/customLua"
        },
        "328":{
          "data":{
            "debug":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color_in":{
              "type":"color",
              "value":[
                0.49865675000000031503,
                1,
                0,
                1
              ]
            },
            "color_out":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "onlyForward":{
              "type":"bool",
              "value":true
            },
            "staticMarkers":{
              "type":"bool",
              "value":false
            },
            "stop_timer":{
              "type":"number",
              "value":1
            },
            "visibleMarkers":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "clear":false,
              "color_in":true,
              "color_out":true,
              "flow":false,
              "onlyForward":true,
              "position":false,
              "rotation":false,
              "scale":false,
              "staticMarkers":true,
              "stop_timer":true,
              "vehId":false,
              "visibleMarkers":true
            },
            "p_out":{
              "dotAngle":true,
              "flow":true,
              "forward":true,
              "forwardDistance":true,
              "forwardDistanceRelative":true,
              "inside":false,
              "outside":false,
              "partlyInside":false,
              "sideDistance":true,
              "sideDistanceRelative":true,
              "stopped":false,
              "stoppedPercent":true,
              "stopping":true
            }
          },
          "pos":[
            -2692,
            -538
          ],
          "type":"scene/rectMarker"
        },
        "329":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -3266,
            -1658
          ],
          "type":"util/customLua"
        },
        "330":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2720,
            2738
          ],
          "type":"types/genericValue"
        },
        "331":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":false,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2720,
            2836
          ],
          "type":"util/customLua"
        },
        "332":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            2901,
            1352
          ],
          "type":"scene/getPlayerVehicle"
        },
        "333":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            2866,
            1072
          ],
          "type":"logic/compare"
        },
        "334":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2874,
            988
          ],
          "type":"types/genericValue"
        },
        "335":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Gas Station"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            1774,
            -958
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "336":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"psrot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2860,
            -468
          ],
          "type":"types/genericValue"
        },
        "337":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1536,
            666
          ],
          "type":"util/customLua"
        },
        "338":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            320,
            659
          ],
          "commentText":"",
          "commentTitle":"Race Enemy Settings Loader",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2002,
            -714
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "339":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1922,
            -675
          ],
          "type":"logic/bundle"
        },
        "340":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            558,
            324
          ],
          "commentText":"Used for part buying so it \\nalso updates inventory.",
          "commentTitle":"Player Money Sync",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2744,
            2660
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "341":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"psscl"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2860,
            -384
          ],
          "type":"types/genericValue"
        },
        "342":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal useVeh = self.pinIn.useVeh.value\nlocal model = self.pinIn.model.value\nlocal config = self.pinIn.config.value\nlocal pos = vec3(self.pinIn.pos.value)\nlocal rot = quat(self.pinIn.rot.value)\nlocal paint = self.pinIn.paintdata.value\nlocal paintData = extensions.blrutils.ssplit(paint, \",\")\nlocal spawnPaint = {}\nlocal pseed = os.time() * 1000\nif self.pinIn.randPaint.value then\nspawnPaint[1] = extensions.blrutils.createRandomPaint(pseed)\nspawnPaint[2] = extensions.blrutils.createRandomPaint(pseed+1)\nspawnPaint[3] = extensions.blrutils.createRandomPaint(pseed+2)\nelse\nspawnPaint[1] = extensions.blrutils.createPaint(paintData)\nspawnPaint[2] = extensions.blrutils.createPaint(paintData)\nspawnPaint[3] = extensions.blrutils.createPaint(paintData)\nend\nlocal spawnOptions = {config = config, pos = pos, rot = rot, paint = spawnPaint[1], paint2 = spawnPaint[2],paint3 = spawnPaint[3], autoEnterVehicle = useVeh}\nlocal veh = extensions.core_vehicles.spawnNewVehicle(model, spawnOptions)\nveh:setName(\"RaceOpponent\")\nself.pinOut.veid.value = veh:getId()\n\n-- 1.12 fix now using blr var to pass paint data as table to pink slips\nlocal gpaint = {}\nif self.pinIn.randPaint.value then\ngpaint[1] = extensions.blrutils.vehiclePaintToGaragePaint(spawnPaint[1])\ngpaint[2] = extensions.blrutils.vehiclePaintToGaragePaint(spawnPaint[2])\ngpaint[3] = extensions.blrutils.vehiclePaintToGaragePaint(spawnPaint[3])\nextensions.blrutils.blrvarSet(\"raceEnemyPaint\", gpaint)\nelse -- only works for a single paint value\nself.pinOut.pout.value = extensions.blrutils.vehiclePaintToGaragePaint(spawnPaint[1])\nend"
          },
          "customName":"BLR Spawn Veh",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "useVeh":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "config":false,
              "flow":false,
              "model":false,
              "paintdata":false,
              "pos":false,
              "randPaint":false,
              "rot":false,
              "useVeh":true
            },
            "p_out":{
              "flow":false,
              "pout":false,
              "veid":false
            }
          },
          "name":"BLR Spawn Veh OLD",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "string",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "useVeh",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "randPaint",
              null,
              ""
            ],
            [
              "out",
              "string",
              "pout",
              null,
              ""
            ]
          ],
          "pos":[
            -1432,
            -426
          ],
          "type":"util/customLua"
        },
        "343":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3104,
            1184
          ],
          "type":"util/customLua"
        },
        "344":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = {}\ndtable[\"engine\"] = {}\ndtable[\"powertrain\"] = {}\ndtable[\"wheels\"] = {}\n\ntable.insert(dtable[\"engine\"], \"engineReducedTorque\")\ntable.insert(dtable[\"engine\"], \"engineDisabled\")\ntable.insert(dtable[\"engine\"], \"engineLockedUp\")\ntable.insert(dtable[\"engine\"], \"engineIsHydrolocking\")\ntable.insert(dtable[\"engine\"], \"engineHydrolocked\")\ntable.insert(dtable[\"engine\"], \"overRevDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"mildOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"overTorqueDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverTorqueDamage\")\ntable.insert(dtable[\"engine\"], \"impactDamage\")\ntable.insert(dtable[\"engine\"], \"oilpanLeak\")\ntable.insert(dtable[\"engine\"], \"oilRadiatorLeak\")\ntable.insert(dtable[\"engine\"], \"headGasketDamaged\")\ntable.insert(dtable[\"engine\"], \"pistonRingsDamaged\")\ntable.insert(dtable[\"engine\"], \"rodBearingsDamaged\")\ntable.insert(dtable[\"engine\"], \"blockMelted\")\ntable.insert(dtable[\"engine\"], \"oilHot\")\ntable.insert(dtable[\"engine\"], \"cylinderWallsMelted\")\ntable.insert(dtable[\"engine\"], \"radiatorLeak\")\ntable.insert(dtable[\"engine\"], \"coolantHot\")\ntable.insert(dtable[\"engine\"], \"oilLevelCritical\")\ntable.insert(dtable[\"engine\"], \"oilStarvation\")\ntable.insert(dtable[\"engine\"], \"oilLevelTooHigh\")\ntable.insert(dtable[\"engine\"], \"exhaustBroken\")\n\ntable.insert(dtable[\"powertrain\"], \"mainEngine\")\ntable.insert(dtable[\"powertrain\"], \"torqueConverter\")\ntable.insert(dtable[\"powertrain\"], \"gearbox\")\ntable.insert(dtable[\"powertrain\"], \"rangebox\")\ntable.insert(dtable[\"powertrain\"], \"transfercase\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorR\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft\")\ntable.insert(dtable[\"powertrain\"], \"differential_R\")\ntable.insert(dtable[\"powertrain\"], \"transfercase_F\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft_F\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorF\")\ntable.insert(dtable[\"powertrain\"], \"differential_F\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFR\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFR\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRL\")\ntable.insert(dtable[\"powertrain\"], \"clutch\")\n\n\n-- Standard 4 wheel vehicles\ntable.insert(dtable[\"wheels\"], \"FR\")\ntable.insert(dtable[\"wheels\"], \"brakeFR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFR\")\ntable.insert(dtable[\"wheels\"], \"tireFR\")\n\ntable.insert(dtable[\"wheels\"], \"FL\")\ntable.insert(dtable[\"wheels\"], \"brakeFL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFL\")\ntable.insert(dtable[\"wheels\"], \"tireFL\")\n\ntable.insert(dtable[\"wheels\"], \"RR\")\ntable.insert(dtable[\"wheels\"], \"brakeRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR\")\ntable.insert(dtable[\"wheels\"], \"tireRR\")\n\ntable.insert(dtable[\"wheels\"], \"RL\")\ntable.insert(dtable[\"wheels\"], \"brakeRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL\")\ntable.insert(dtable[\"wheels\"], \"tireRL\")\n\n--Pigeon\ntable.insert(dtable[\"wheels\"], \"F\")\ntable.insert(dtable[\"wheels\"], \"brakeF\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatF\")\ntable.insert(dtable[\"wheels\"], \"tireF\")\n\n--Gambler covet\ntable.insert(dtable[\"wheels\"], \"R\")\ntable.insert(dtable[\"wheels\"], \"brakeR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatR\")\ntable.insert(dtable[\"wheels\"], \"tireR\")\n\n--Gambler bolide\ntable.insert(dtable[\"wheels\"], \"RRR\")\ntable.insert(dtable[\"wheels\"], \"brakeRRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRR\")\ntable.insert(dtable[\"wheels\"], \"tireRRR\")\n\ntable.insert(dtable[\"wheels\"], \"RRL\")\ntable.insert(dtable[\"wheels\"], \"brakeRRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRL\")\ntable.insert(dtable[\"wheels\"], \"tireRRL\")\n\n--T series\ntable.insert(dtable[\"wheels\"], \"DW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1R\")\ntable.insert(dtable[\"wheels\"], \"tireDW1R\")\n\ntable.insert(dtable[\"wheels\"], \"DW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1L\")\ntable.insert(dtable[\"wheels\"], \"tireDW1L\")\n\ntable.insert(dtable[\"wheels\"], \"DW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW1RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW1LL\")\n\ntable.insert(dtable[\"wheels\"], \"DW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2R\")\ntable.insert(dtable[\"wheels\"], \"tireDW2R\")\n\ntable.insert(dtable[\"wheels\"], \"DW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2L\")\ntable.insert(dtable[\"wheels\"], \"tireDW2L\")\n\ntable.insert(dtable[\"wheels\"], \"DW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW2RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW2LL\")\n\n--Dually pickup\ntable.insert(dtable[\"wheels\"], \"RR2\")\ntable.insert(dtable[\"wheels\"], \"brakeRR2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR2\")\ntable.insert(dtable[\"wheels\"], \"tireRR2\")\n\ntable.insert(dtable[\"wheels\"], \"RL2\")\ntable.insert(dtable[\"wheels\"], \"brakeRL2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL2\")\ntable.insert(dtable[\"wheels\"], \"tireRL2\")\n\n\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Mech Damage Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            5596,
            -608
          ],
          "type":"util/customLua"
        },
        "345":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "multiLine":false,
          "pos":[
            4980,
            -384
          ],
          "string":"mechdmg",
          "type":"types/string"
        },
        "346":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "shuffle":{
              "type":"bool",
              "value":true
            },
            "spawnGap":{
              "type":"number",
              "value":100
            },
            "spawnMode":{
              "type":"string",
              "value":"road"
            }
          },
          "hiddenPins":{
            "p_in":{
              "dontDelete":true,
              "flow":false,
              "group":false,
              "quantity":false,
              "randomColors":true,
              "reset":false,
              "shuffle":true,
              "spawnGap":true,
              "spawnMode":true,
              "startPos":true,
              "startRot":true
            },
            "p_out":{
              "flow":false,
              "loaded":false,
              "vehicleIds":false
            }
          },
          "pos":[
            -1152,
            652
          ],
          "type":"gameplay/traffic/trafficSpawnGroup"
        },
        "347":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3118,
            1310
          ],
          "type":"types/genericValue"
        },
        "348":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.vehid.value = self.pinIn.idtable.value[self.pinIn.slot.value]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false,
              "slot":false
            },
            "p_out":{
              "flow":false,
              "vehid":false
            }
          },
          "name":"Get Shop Slot VEHID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "slot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "out",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            2880,
            -3016
          ],
          "type":"util/customLua"
        },
        "349":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5400,
            -608
          ],
          "type":"logic/flowSwitch"
        },
        "350":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = {}\ndtable[\"engine\"] = {}\ndtable[\"powertrain\"] = {}\ndtable[\"wheels\"] = {}\n\ntable.insert(dtable[\"engine\"], \"engineReducedTorque\")\ntable.insert(dtable[\"engine\"], \"engineDisabled\")\ntable.insert(dtable[\"engine\"], \"engineLockedUp\")\ntable.insert(dtable[\"engine\"], \"engineIsHydrolocking\")\ntable.insert(dtable[\"engine\"], \"engineHydrolocked\")\ntable.insert(dtable[\"engine\"], \"overRevDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"mildOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"overTorqueDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverTorqueDamage\")\ntable.insert(dtable[\"engine\"], \"impactDamage\")\ntable.insert(dtable[\"engine\"], \"oilpanLeak\")\ntable.insert(dtable[\"engine\"], \"oilRadiatorLeak\")\ntable.insert(dtable[\"engine\"], \"headGasketDamaged\")\ntable.insert(dtable[\"engine\"], \"pistonRingsDamaged\")\ntable.insert(dtable[\"engine\"], \"rodBearingsDamaged\")\ntable.insert(dtable[\"engine\"], \"blockMelted\")\ntable.insert(dtable[\"engine\"], \"oilHot\")\ntable.insert(dtable[\"engine\"], \"cylinderWallsMelted\")\ntable.insert(dtable[\"engine\"], \"radiatorLeak\")\ntable.insert(dtable[\"engine\"], \"coolantHot\")\ntable.insert(dtable[\"engine\"], \"oilLevelCritical\")\ntable.insert(dtable[\"engine\"], \"oilStarvation\")\ntable.insert(dtable[\"engine\"], \"oilLevelTooHigh\")\ntable.insert(dtable[\"engine\"], \"exhaustBroken\")\n\ntable.insert(dtable[\"powertrain\"], \"mainEngine\")\ntable.insert(dtable[\"powertrain\"], \"torqueConverter\")\ntable.insert(dtable[\"powertrain\"], \"gearbox\")\ntable.insert(dtable[\"powertrain\"], \"rangebox\")\ntable.insert(dtable[\"powertrain\"], \"transfercase\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorR\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft\")\ntable.insert(dtable[\"powertrain\"], \"differential_R\")\ntable.insert(dtable[\"powertrain\"], \"transfercase_F\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft_F\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorF\")\ntable.insert(dtable[\"powertrain\"], \"differential_F\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFR\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFR\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRL\")\ntable.insert(dtable[\"powertrain\"], \"clutch\")\n\n\n-- Standard 4 wheel vehicles\ntable.insert(dtable[\"wheels\"], \"FR\")\ntable.insert(dtable[\"wheels\"], \"brakeFR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFR\")\ntable.insert(dtable[\"wheels\"], \"tireFR\")\n\ntable.insert(dtable[\"wheels\"], \"FL\")\ntable.insert(dtable[\"wheels\"], \"brakeFL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFL\")\ntable.insert(dtable[\"wheels\"], \"tireFL\")\n\ntable.insert(dtable[\"wheels\"], \"RR\")\ntable.insert(dtable[\"wheels\"], \"brakeRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR\")\ntable.insert(dtable[\"wheels\"], \"tireRR\")\n\ntable.insert(dtable[\"wheels\"], \"RL\")\ntable.insert(dtable[\"wheels\"], \"brakeRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL\")\ntable.insert(dtable[\"wheels\"], \"tireRL\")\n\n--Pigeon\ntable.insert(dtable[\"wheels\"], \"F\")\ntable.insert(dtable[\"wheels\"], \"brakeF\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatF\")\ntable.insert(dtable[\"wheels\"], \"tireF\")\n\n--Gambler covet\ntable.insert(dtable[\"wheels\"], \"R\")\ntable.insert(dtable[\"wheels\"], \"brakeR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatR\")\ntable.insert(dtable[\"wheels\"], \"tireR\")\n\n--Gambler bolide\ntable.insert(dtable[\"wheels\"], \"RRR\")\ntable.insert(dtable[\"wheels\"], \"brakeRRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRR\")\ntable.insert(dtable[\"wheels\"], \"tireRRR\")\n\ntable.insert(dtable[\"wheels\"], \"RRL\")\ntable.insert(dtable[\"wheels\"], \"brakeRRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRL\")\ntable.insert(dtable[\"wheels\"], \"tireRRL\")\n\n--T series\ntable.insert(dtable[\"wheels\"], \"DW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1R\")\ntable.insert(dtable[\"wheels\"], \"tireDW1R\")\n\ntable.insert(dtable[\"wheels\"], \"DW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1L\")\ntable.insert(dtable[\"wheels\"], \"tireDW1L\")\n\ntable.insert(dtable[\"wheels\"], \"DW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW1RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW1LL\")\n\ntable.insert(dtable[\"wheels\"], \"DW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2R\")\ntable.insert(dtable[\"wheels\"], \"tireDW2R\")\n\ntable.insert(dtable[\"wheels\"], \"DW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2L\")\ntable.insert(dtable[\"wheels\"], \"tireDW2L\")\n\ntable.insert(dtable[\"wheels\"], \"DW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW2RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW2LL\")\n\n--Dually pickup\ntable.insert(dtable[\"wheels\"], \"RR2\")\ntable.insert(dtable[\"wheels\"], \"brakeRR2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR2\")\ntable.insert(dtable[\"wheels\"], \"tireRR2\")\n\ntable.insert(dtable[\"wheels\"], \"RL2\")\ntable.insert(dtable[\"wheels\"], \"brakeRL2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL2\")\ntable.insert(dtable[\"wheels\"], \"tireRL2\")\n\n\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Mech Damage Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            1074,
            736
          ],
          "type":"util/customLua"
        },
        "351":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":130
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5162,
            -608
          ],
          "type":"logic/frameDelay"
        },
        "352":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":true,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            3090,
            -3016
          ],
          "type":"logic/compare"
        },
        "353":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal trig = extensions.blrutils.blrvarGet(\"towtrig\")\nextensions.blrutils.towingTriggerRefresh(self.pinIn.step.value, trig)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "step":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "step":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Tow Trigger Refresh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "step",
              null,
              ""
            ]
          ],
          "pos":[
            3286,
            862
          ],
          "type":"util/customLua"
        },
        "354":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nif extensions.blrglobals.blrFlagGet(\"shopmode\") then\nself.pinOut.vehid.value = extensions.blrutils.blrvarGet(\"playervehid\")\nelse\nself.pinOut.vehid.value = self.pinIn.current.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "vehid":false
            }
          },
          "name":"Actual Player Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            -32,
            -398
          ],
          "type":"util/customLua"
        },
        "355":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.slots.value\nlocal idtable = {} -- KEY: SLOT ID / VAL: VEHID\nlocal slottable = {} -- KEY: VEHID / VAL: SLOT ID\nlocal rpaints = {}\nlocal slotCount = self.pinIn.slotCount.value\nlocal currentPos = {}\nlocal currentRot = {}\nlocal currentCarFile = \"\"\nlocal currentCarFileData = \"\"\nlocal currentCarDataTable = {}\nlocal currentCarModel = \"\"\nlocal currentCarConfig = \"\"\nlocal currentSpawnOptions = {}\nlocal currentCarPaintData = \"\"\nlocal currentSpawnPaint = {}\nlocal shopID = self.pinIn.shopID.value\n-- Config randomization vars\nlocal randomSlots = {}\nlocal ioctx = \"\"\nlocal randomConfig = {}\nlocal slotMap = {}\nlocal randomConfigTable = {}\n\nlocal shopSeed = extensions.blrutils.getShopSeed(shopID)\nlocal carSeed = 0\n\nlocal rpresult = self.pinIn.rpresult.value\n\n\nfor i=0,slotCount-1 do\n\n\n-- Create seed for randomization\ncarSeed = shopSeed+i\n\n-- Create spawn position data from slot parameters\nlocal line = dtable[\"slotp\" .. i]\nlocal iter = 0\nlocal posVal = {}\nlocal rotVal = {}\nfor s in string.gmatch(line,\"([^,]+)\") do\n  posVal[iter] = tonumber(s)\n  iter=iter+1\nend\nline = dtable[\"slotr\" .. i]\niter = 0\nfor s in string.gmatch(line,\"([^,]+)\") do\n  rotVal[iter] = tonumber(s)\n  iter=iter+1\nend\n\ncurrentPos = vec3(posVal[0],posVal[1],posVal[2])\ncurrentRot = quat(rotVal[0], rotVal[1], rotVal[2], rotVal[3])\n\nif self.pinIn.stock.value[i] ~= nil then -- Shop slot not empty, spawning actual car\n\n-- Read chosen shop car file data\ncurrentCarFile = self.pinIn.stock.value[i]\n-- 1.12 fix, old table reading code stopped at spaces\ncurrentCarDataTable = extensions.blrutils.loadDataTable(currentCarFile)\ncurrentCarModel = currentCarDataTable[\"type\"]\ncurrentCarConfig = currentCarDataTable[\"config\"]\nrandomConfigTable[i] = currentCarConfig-- Add to table so that new add to garage node receives expected data\ncurrentCarPaintData = currentCarDataTable[\"paint\"]\n\nprint(currentCarModel)\nprint(currentCarConfig)\n\n-- Config randomization process\nif currentCarDataTable[\"randslots\"] and rpresult[i] then\nrandomSlots = extensions.blrutils.ssplit(currentCarDataTable[\"randslots\"], \",\")       -- Get randomized slot list\nioctx = extensions.betterpartmgmt.getCustomIOCTX(currentCarModel)-- Get custom IOCTX\nslotMap = extensions.betterpartmgmt.getSlotMap(ioctx)-- Get slot map with available parts listed\nfilteredMap = extensions.betterpartmgmt.getFilteredSlotMap(slotMap, randomSlots, {\"cargo\"}) -- 1.15.3 fix, avoids cargo boxes since they cause issue with roll cages\nrandomConfig = extensions.betterpartmgmt.generateConfigVariant(currentCarConfig, filteredMap,carSeed)  -- Generate seeded random config\ncurrentCarConfig = randomConfig\nrandomConfigTable[i] = randomConfig-- Use random config\nend\n\n-- Create paint data, FIXED IN 1.12 TO WORK WITH MULTIPLE PAINTS\nlocal paintData = extensions.blrutils.ssplit(currentCarPaintData, \",\")\nif self.pinIn.randpaint.value then\nif rpresult[i] then\ncurrentSpawnPaint[1] = extensions.blrutils.createRandomPaint(carSeed * 10)\ncurrentSpawnPaint[2] = extensions.blrutils.createRandomPaint(carSeed * 10 + 1)\ncurrentSpawnPaint[3] = extensions.blrutils.createRandomPaint(carSeed * 10 + 2)\nelse -- Will pick factory paints for paint2 and paint3, could be more random (used in roll cage, rims, etc)\ncurrentSpawnPaint[1] = extensions.blrutils.createRandomFactoryPaint(carSeed * 10, currentCarModel)\ncurrentSpawnPaint[2] = extensions.blrutils.createRandomFactoryPaint(carSeed * 10 + 1, currentCarModel)\ncurrentSpawnPaint[3] = extensions.blrutils.createRandomFactoryPaint(carSeed * 10 + 2, currentCarModel)\nend\nrpaints[i] = {}\nrpaints[i][1] = extensions.blrutils.vehiclePaintToGaragePaint(currentSpawnPaint[1])\nrpaints[i][2] = extensions.blrutils.vehiclePaintToGaragePaint(currentSpawnPaint[2])\nrpaints[i][3] = extensions.blrutils.vehiclePaintToGaragePaint(currentSpawnPaint[3])\nelse\ncurrentSpawnPaint[1] = extensions.blrutils.createPaint(paintData)\ncurrentSpawnPaint[2] = extensions.blrutils.createPaint(paintData)\ncurrentSpawnPaint[3] = extensions.blrutils.createPaint(paintData)\nend\n\n-- Ready to spawn car got all needed data\n-- Remember to store spawned IDs to delete\ncurrentSpawnOptions = {config = currentCarConfig, pos = currentPos, rot = currentRot, paint = currentSpawnPaint[1],paint2 = currentSpawnPaint[2], paint3 = currentSpawnPaint[3], autoEnterVehicle = false }\nlocal currentVeh = extensions.core_vehicles.spawnNewVehicle(currentCarModel, currentSpawnOptions)\nidtable[i] = currentVeh:getId()\nslottable[idtable[i]] = i\n\nelse -- Shop slot empty, spawning cone instead of car\n\ncurrentSpawnOptions = {config = \"/vehicles/cones/large.pc\", pos = currentPos, rot = currentRot}\nlocal currentVeh = extensions.core_vehicles.spawnNewVehicle(\"cones\", currentSpawnOptions)\nidtable[i] = currentVeh:getId()\nslottable[idtable[i]] = i\nend\nend\n\nself.pinOut.randpaint.value = self.pinIn.randpaint.value\nself.pinOut.rpaints.value = rpaints\nself.pinOut.spawnids.value = idtable\nself.pinOut.slotmap.value = slottable\nself.pinOut.seed.value = shopSeed\nself.pinOut.rconfigs.value = randomConfigTable\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "randpaint":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "randpaint":false,
              "rpresult":false,
              "shopID":false,
              "slotCount":false,
              "slots":false,
              "stock":false
            },
            "p_out":{
              "flow":false,
              "randpaint":false,
              "rconfigs":false,
              "rpaints":false,
              "seed":false,
              "slotmap":false,
              "spawnids":false
            }
          },
          "name":"Spawn Shop Stock",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "stock",
              null,
              ""
            ],
            [
              "in",
              "number",
              "slotCount",
              null,
              ""
            ],
            [
              "in",
              "table",
              "slots",
              null,
              ""
            ],
            [
              "out",
              "table",
              "spawnids",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "randpaint",
              null,
              ""
            ],
            [
              "out",
              "table",
              "rpaints",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "randpaint",
              null,
              ""
            ],
            [
              "out",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "shopID",
              null,
              ""
            ],
            [
              "out",
              "table",
              "rconfigs",
              null,
              ""
            ],
            [
              "in",
              "table",
              "rpresult",
              null,
              ""
            ],
            [
              "out",
              "table",
              "slotmap",
              null,
              ""
            ]
          ],
          "pos":[
            1760,
            -3002
          ],
          "type":"util/customLua"
        },
        "356":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"pspos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2860,
            -552
          ],
          "type":"types/genericValue"
        },
        "357":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3286,
            -2946
          ],
          "type":"vehicle/enterVehicle"
        },
        "358":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -888
          ],
          "type":"logic/and"
        },
        "359":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            408,
            267
          ],
          "commentText":"",
          "commentTitle":"Race Traffic Remove",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3700,
            -392
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "360":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vec = self.pinIn.rot.value\nfor k,v in pairs(self.pinIn.idtable.value) do\nlocal cam = {}\nlocal camData = {}\nif v ~= -1 then\nextensions.core_camera.getCameraDataById(v)[\"orbit\"]:setDefaultRotation(vec3(vec[1], vec[2], vec[3]))\nextensions.core_camera.getCameraDataById(v)[\"orbit\"]:reset()\ncam = extensions.core_camera.getCameraDataById(v)[\"orbit\"]\ncamData = { veh = scenetree.findObjectById(v), vid = v, dtSim = 0.0001, dtReal = 0.0001, dtRaw = 0.0001, dt = 0.0001, speed = 0, pos=cam.camLastPos, prevPos=cam.camLastPos2, vel=cam.camVel, prevVel=cam.camVel, res = {pos = cam.camLastPos, targetPos = cam.camLastTargetPos, rot = quat(), fov = 60, nearClip = scenetree.theLevelInfo.nearClip} }\nextensions.core_camera.getCameraDataById(v)[\"orbit\"]:update(camData)\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "rot":{
              "type":"vec3",
              "value":[
                160,
                -17,
                0
              ]
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false,
              "rot":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Set Orbit Rot",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "vec3",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ]
          ],
          "pos":[
            2278,
            -3030
          ],
          "type":"util/customLua"
        },
        "361":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3286,
            1100
          ],
          "type":"logic/frameDelay"
        },
        "362":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5162,
            -482
          ],
          "type":"logic/frameDelay"
        },
        "363":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "customName":"Enable Traffic",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            738,
            78
          ],
          "type":"util/customLua"
        },
        "364":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1082,
            1982
          ],
          "type":"types/genericValue"
        },
        "365":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            2138,
            -1448
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "366":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1130,
            -1434
          ],
          "type":"logic/bundle"
        },
        "367":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            1788,
            1156
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "368":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"policeResetRequest\", true)\nextensions.blrutils.copfixReset()\nextensions.blrutils.copfixInit()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Reset Police",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            2320,
            302
          ],
          "type":"util/customLua"
        },
        "369":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1628,
            -1361
          ],
          "type":"logic/bundle"
        },
        "370":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1538,
            1429
          ],
          "commentText":"",
          "commentTitle":"Race UI",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1652,
            -1512
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "371":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Race Menu"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -1460,
            -1322
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "372":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal strfetch = self.pinIn.strfetch.value\nextensions.vluaFetchModule.exec(veid, toFetch, id, strfetch)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"smthfueltotal"
            },
            "strfetch":{
              "type":"bool",
              "value":false
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getSmoothFuelTotal()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":true,
              "flow":false,
              "strfetch":true,
              "toFetch":true,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "strfetch",
              null,
              ""
            ]
          ],
          "pos":[
            1788,
            -1084
          ],
          "type":"util/customLua"
        },
        "373":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5400,
            -468
          ],
          "type":"logic/once"
        },
        "374":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5114,
            -45
          ],
          "type":"logic/bundle"
        },
        "375":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiCallbacks.exec(\"inventoryRefresh\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Inventory Refresh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -606,
            2360
          ],
          "type":"util/customLua"
        },
        "376":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            1998,
            652
          ],
          "type":"util/customLua"
        },
        "377":{
          "count":4,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            },
            "value_4":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false,
              "value_4":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "match_4":false,
              "none":false
            }
          },
          "pos":[
            -1186,
            -1266
          ],
          "type":"logic/switchcase"
        },
        "378":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -368,
            -1434
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "379":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "multiLine":false,
          "pos":[
            864,
            470
          ],
          "string":"emech",
          "type":"types/string"
        },
        "380":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            878,
            540
          ],
          "type":"logic/frameDelay"
        },
        "381":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "asDuration":{
              "type":"bool",
              "value":false
            },
            "input":{
              "type":"number",
              "value":1
            },
            "reverseHit":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2972,
            2710
          ],
          "type":"logic/rateLimit"
        },
        "382":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1376,
            -1224
          ],
          "type":"types/genericValue"
        },
        "383":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal level = extensions.blrutils.getLevelName()\nlocal mtype = self.pinIn.type.value\nlocal file = \"beamLR/missions/\" .. level .. \"/\" .. self.pinIn.gid.value \nlocal dtable = extensions.blrutils.loadDataTable(file)\nlocal outtable = {}\nlocal tspos = {}\nlocal tsrot = {}\n\nlocal mlist = {}\nif mtype == \"small\" then\nmlist = extensions.blrutils.loadDataFile(\"beamLR/missions/\" .. level .. \"/\" .. dtable[\"slist\"])\nelseif mtype == \"trailer\" then\nmlist = extensions.blrutils.loadDataFile(\"beamLR/missions/\" .. level .. \"/\" .. dtable[\"tlist\"])\ntspos = extensions.blrutils.ssplitnum(dtable[\"tspos\"] or \"\", \",\")\ntsrot = extensions.blrutils.ssplitnum(dtable[\"tsrot\"] or \"\", \",\")\nelseif mtype == \"gooseneck\" then\nmlist = extensions.blrutils.loadDataFile(\"beamLR/missions/\" .. level .. \"/\" .. dtable[\"glist\"])\ntspos = extensions.blrutils.ssplitnum(dtable[\"gspos\"] or \"\", \",\")\ntsrot = extensions.blrutils.ssplitnum(dtable[\"gsrot\"] or \"\", \",\")\nend\n\nlocal mcount = #mlist\nfor i=1,mcount do\nouttable[i] = mlist[i]\nend\n\nself.pinOut.count.value = mcount\nself.pinOut.missions.value = outtable\nself.pinOut.tspos.value = tspos\nself.pinOut.tsrot.value = tsrot"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "type":false
            },
            "p_out":{
              "count":false,
              "flow":false,
              "missions":false,
              "tspos":false,
              "tsrot":false
            }
          },
          "name":"Get Giver Missions",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "gid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "count",
              null,
              ""
            ],
            [
              "out",
              "table",
              "missions",
              null,
              ""
            ],
            [
              "in",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "tspos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "tsrot",
              null,
              ""
            ]
          ],
          "pos":[
            -2062,
            -2750
          ],
          "type":"util/customLua"
        },
        "384":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.generateDamageCostTable()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Generate Damage Costs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1452,
            1184
          ],
          "type":"util/customLua"
        },
        "385":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -1854
          ],
          "type":"types/genericValue"
        },
        "386":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ftstr = extensions.blrutils.blrvarGet(\"fuelTypeString\") or \"none\"\nlocal frstr = extensions.blrutils.blrvarGet(\"fuelRatioString\") or \"1.0,0.0,0.0\"\nlocal dtable = self.pinIn.current.value\n\nif self.pinIn.name.value ~= nil then\ndtable[\"name\"] = self.pinIn.name.value\nend\n\nif self.pinIn.type.value ~= nil then\ndtable[\"type\"] = self.pinIn.type.value\nend\n\nif self.pinIn.gas.value ~= nil then\ndtable[\"gas\"] = self.pinIn.gas.value\nend\n\nif self.pinIn.damage.value ~= nil then\ndtable[\"damage\"] = self.pinIn.damage.value\nend\n\nif self.pinIn.nos.value ~= nil then\ndtable[\"nos\"] = self.pinIn.nos.value\nend\n\nif self.pinIn.oil.value ~= nil then\ndtable[\"oil\"] = self.pinIn.oil.value\nend\n\ndtable[\"fueltype\"] = ftstr\ndtable[\"fuelratio\"] = frstr\n\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "bsfile":true,
              "config":true,
              "current":false,
              "damage":false,
              "flow":false,
              "gas":false,
              "mfile":true,
              "name":true,
              "nos":false,
              "oil":false,
              "type":true
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Save Veh Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "current",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "string",
              "type",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "in",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ],
            [
              "in",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            5484,
            -370
          ],
          "type":"util/customLua"
        },
        "387":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1110,
            -874
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "388":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = \"\"\nlocal dtable = self.pinIn.data.value\nfor k,v in pairs(dtable) do\nfiledata = filedata .. k .. \"=\" .. v .. \"\\n\"\nend\nwriteFile(self.pinIn.filename.value, filedata)\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Table To File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            5750,
            -398
          ],
          "type":"util/customLua"
        },
        "389":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ftstr = extensions.blrutils.blrvarGet(\"fuelTypeString\") or \"none\"\nlocal frstr = extensions.blrutils.blrvarGet(\"fuelRatioString\") or \"1.0,0.0,0.0\"\nlocal dtable = self.pinIn.current.value\n\nif self.pinIn.name.value ~= nil then\ndtable[\"name\"] = self.pinIn.name.value\nend\n\nif self.pinIn.type.value ~= nil then\ndtable[\"type\"] = self.pinIn.type.value\nend\n\nif self.pinIn.gas.value ~= nil then\ndtable[\"gas\"] = self.pinIn.gas.value\nend\n\nif self.pinIn.damage.value ~= nil then\ndtable[\"damage\"] = self.pinIn.damage.value\nend\n\nif self.pinIn.nos.value ~= nil then\ndtable[\"nos\"] = self.pinIn.nos.value\nend\n\nif self.pinIn.oil.value ~= nil then\ndtable[\"oil\"] = self.pinIn.oil.value\nend\n\ndtable[\"fueltype\"] = ftstr\ndtable[\"fuelratio\"] = frstr\n\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "damage":false,
              "flow":false,
              "gas":false,
              "name":true,
              "nos":false,
              "oil":false,
              "type":true
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Save Veh Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "current",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "string",
              "type",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ],
            [
              "in",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            374,
            568
          ],
          "type":"util/customLua"
        },
        "390":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2404,
            1156
          ],
          "type":"util/customLua"
        },
        "391":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -662,
            960
          ],
          "type":"gameplay/traffic/trafficScatter"
        },
        "392":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = \"\"\nlocal dtable = self.pinIn.data.value\nfor k,v in pairs(dtable) do\nfiledata = filedata .. k .. \"=\" .. v .. \"\\n\"\nend\nwriteFile(self.pinIn.filename.value, filedata)\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Table To File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            388,
            764
          ],
          "type":"util/customLua"
        },
        "393":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1110,
            -776
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "394":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -928,
            -902
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "395":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Race Over"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1110,
            -678
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "396":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal fn = self.pinIn.file.value\nlocal vid = self.pinIn.vid.value\nextensions.mechDamageLoader.loadDamageFromFile(fn,vid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "vid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Mech Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            5442,
            330
          ],
          "type":"util/customLua"
        },
        "397":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.vehid.value = self.pinIn.idtable.value[self.pinIn.slot.value]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false,
              "slot":false
            },
            "p_out":{
              "flow":false,
              "vehid":false
            }
          },
          "name":"Get Shop Slot VEHID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "slot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "out",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            2860,
            -2876
          ],
          "type":"util/customLua"
        },
        "398":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":true,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            3090,
            -2890
          ],
          "type":"logic/compare"
        },
        "399":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal fn = self.pinIn.file.value\nlocal vid = self.pinIn.vid.value\nextensions.mechDamageLoader.loadDamageFromFile(fn,vid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "vid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Mech Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1536,
            750
          ],
          "type":"util/customLua"
        },
        "400":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3294,
            -2862
          ],
          "type":"vehicle/enterVehicle"
        },
        "401":{
          "alpha":1,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"",
          "commentTitle":"Gas Persistence",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            392,
            840
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "402":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "any",
              "input",
              null,
              ""
            ],
            [
              "out",
              "any",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            724,
            -1826
          ],
          "type":"util/customLua"
        },
        "403":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrtriggers.blrTriggerInit(true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Trigger Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            178,
            288
          ],
          "type":"util/customLua"
        },
        "404":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2306,
            -1742
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "405":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            2782,
            -1742
          ],
          "type":"util/customLua"
        },
        "406":{
          "alpha":1,
          "backgroundColor":[
            0,
            0,
            0,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"BLRUtils extensions to delete \\nsold car file from player garage\\nand rearranges the other files\\nas necessary to update garage",
          "commentTitle":"Vehicle selling system uses",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            2800,
            -2198
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "407":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "customName":"Load Player Prefs",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "filename":{
              "type":"string",
              "value":"beamLR/preferences"
            }
          },
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -192,
            344
          ],
          "type":"util/customLua"
        },
        "408":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1314,
            561
          ],
          "commentText":"",
          "commentTitle":"Selling Mode",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            2520,
            -2240
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "409":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"shop"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1508,
            -2302
          ],
          "type":"util/customLua"
        },
        "410":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1166,
            -3758
          ],
          "type":"types/genericValue"
        },
        "411":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            1088,
            -2162
          ],
          "type":"util/customLua"
        },
        "412":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"pick"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1438,
            -3492
          ],
          "type":"util/customLua"
        },
        "413":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1676,
            -1882
          ],
          "type":"types/genericValue"
        },
        "414":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            1662,
            -2092
          ],
          "type":"util/customLua"
        },
        "415":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2552,
            2836
          ],
          "type":"logic/branch"
        },
        "416":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1452,
            -2008
          ],
          "type":"types/genericValue"
        },
        "417":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1452,
            -1882
          ],
          "type":"util/customLua"
        },
        "418":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2762,
            498
          ],
          "type":"util/customLua"
        },
        "419":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.id.value then\nlocal currentObj = scenetree.findObjectById(self.pinIn.id.value)\nif currentObj ~= nil then\ncurrentObj:delete()\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            -746,
            -678
          ],
          "type":"util/customLua"
        },
        "420":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            2762,
            386
          ],
          "type":"util/customLua"
        },
        "421":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerFilterPlayerTrigID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            416,
            -944
          ],
          "type":"types/genericValue"
        },
        "422":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerFilterPlayerTrigID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            178,
            -426
          ],
          "type":"types/genericValue"
        },
        "423":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerFilterPlayerTrigName"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -38,
            -1322
          ],
          "type":"types/genericValue"
        },
        "424":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.baseprice.value = tonumber(dtable[\"baseprice\"])\nself.pinOut.partprice.value = tonumber(dtable[\"partprice\"])\nself.pinOut.scrapval.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false
            },
            "p_out":{
              "baseprice":true,
              "flow":false,
              "partprice":true,
              "scrapval":false
            }
          },
          "name":"Car Monetary Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "number",
              "baseprice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "partprice",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapval",
              null,
              ""
            ]
          ],
          "pos":[
            1452,
            -1770
          ],
          "type":"util/customLua"
        },
        "425":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1676,
            -1980
          ],
          "type":"types/genericValue"
        },
        "426":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2342,
            2836
          ],
          "type":"types/genericValue"
        },
        "427":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -32,
            -706
          ],
          "type":"logic/frameDelay"
        },
        "428":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local toRet = \"\"\nlocal fmt = string.format(\"%%.%df\", self.pinIn.floatPre.value)\nlocal valText = \"\"\n\nif self.pinIn.isFloat.value == true then \nvalText = string.format(fmt, self.pinIn.value.value)\nelse\nvalText = \"\" .. self.pinIn.value.value\nend\n\nif self.pinIn.prefix.value ~= nil and self.pinIn.showPre.value then\ntoRet = self.pinIn.prefix.value .. valText\nelse\ntoRet = self.pinIn.value.value\nend\n\nif self.pinIn.suffix.value ~= nil and self.pinIn.showSuf.value then\ntoRet = toRet .. self.pinIn.suffix.value\nend\n\nself.pinOut.output.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "floatPre":{
              "type":"number",
              "value":2
            },
            "isFloat":{
              "type":"bool",
              "value":true
            },
            "prefix":{
              "type":"string",
              "value":"Sell Value: $"
            },
            "showPre":{
              "type":"bool",
              "value":true
            },
            "suffix":{
              "type":"string",
              "value":"(SCRAP VALUE)"
            }
          },
          "hiddenPins":{
            "p_in":{
              "floatPre":true,
              "flow":false,
              "isFloat":true,
              "prefix":true,
              "showPre":true,
              "showSuf":false,
              "suffix":true,
              "value":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Prefixed Value Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ],
            [
              "in",
              "string",
              "prefix",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "suffix",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showPre",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showSuf",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "isFloat",
              null,
              ""
            ],
            [
              "in",
              "number",
              "floatPre",
              null,
              ""
            ]
          ],
          "pos":[
            2068,
            -1798
          ],
          "type":"util/customLua"
        },
        "429":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1480,
            -2106
          ],
          "type":"logic/once"
        },
        "430":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            -185
          ],
          "type":"logic/bundle"
        },
        "431":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -1600,
            400
          ],
          "type":"logic/compare"
        },
        "432":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1628,
            -482
          ],
          "type":"logic/flowSwitch"
        },
        "433":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"miss"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            -494,
            -3030
          ],
          "type":"util/customLua"
        },
        "434":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "attempt":true,
              "flow":false
            },
            "p_out":{}
          },
          "pos":[
            1116,
            666
          ],
          "type":"activity/activityStop"
        },
        "435":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\") then\nextensions.blrdragdisplay.resetLights()\nextensions.blrdragdisplay.resetDigits()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Drag Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -704,
            -580
          ],
          "type":"util/customLua"
        },
        "436":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"miss"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            -312,
            -4220
          ],
          "type":"util/customLua"
        },
        "437":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            206,
            -776
          ],
          "type":"logic/flowSwitch"
        },
        "438":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal nid = self.pinIn.nid.value or 0\nif extensions.blrtriggers.isNodeRegistered(nid) then\nlocal menuMode = self.pinIn.menuMode.value or false\nlocal filter = self.pinIn.veid.value\nlocal af = self.pinIn.af.value\nlocal tdata = extensions.blrtriggers.poolTriggerData(nid, filter, menuMode)\nif tdata then\nself.pinOut.enter.value = tdata[\"event\"] == \"enter\"\nself.pinOut.exit.value = tdata[\"event\"] == \"exit\"\nself.pinOut.triggerID.value = tdata[\"triggerID\"]\nself.pinOut.triggerName.value = tdata[\"triggerName\"]\nelse\nself.pinOut.enter.value = false\nself.pinOut.exit.value = false\nend\nif af == nil then\nself.pinOut.active.value = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, menuMode)\nelse\nself.pinOut.active.value = extensions.blrtriggers.getTriggerStatus(nid,filter, af, menuMode)\nend\nelse\nextensions.blrtriggers.registerNode(nid)\nend\n"
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":false
            },
            "nid":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "active":false,
              "enter":false,
              "exit":false,
              "flow":true,
              "triggerID":false,
              "triggerName":false
            }
          },
          "name":"VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "active",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "enter",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "exit",
              null,
              ""
            ],
            [
              "out",
              "number",
              "triggerID",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            -3882,
            -3758
          ],
          "type":"util/customLua"
        },
        "439":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            2672,
            590
          ],
          "commentText":"",
          "commentTitle":"Race Checkpoint Detector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3696,
            -14
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "440":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3000,
            36
          ],
          "type":"logic/compare"
        },
        "441":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2370,
            -510
          ],
          "type":"logic/once"
        },
        "442":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            3510,
            -3744
          ],
          "type":"util/customLua"
        },
        "443":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"race"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            -1628,
            -1350
          ],
          "type":"util/customLua"
        },
        "444":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -3567,
            176
          ],
          "type":"scene/getPlayerVehicle"
        },
        "445":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal nid = self.pinIn.nid.value or 0\nif extensions.blrtriggers.isNodeRegistered(nid) then\nlocal menuMode = self.pinIn.menuMode.value or false\nlocal filter = self.pinIn.veid.value\nlocal af = self.pinIn.af.value\nlocal tdata = extensions.blrtriggers.poolTriggerData(nid, filter, menuMode)\nif tdata then\nself.pinOut.enter.value = tdata[\"event\"] == \"enter\"\nself.pinOut.exit.value = tdata[\"event\"] == \"exit\"\nself.pinOut.triggerID.value = tdata[\"triggerID\"]\nself.pinOut.triggerName.value = tdata[\"triggerName\"]\nelse\nself.pinOut.enter.value = false\nself.pinOut.exit.value = false\nend\nif af == nil then\nself.pinOut.active.value = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, menuMode)\nelse\nself.pinOut.active.value = extensions.blrtriggers.getTriggerStatus(nid,filter, af, menuMode)\nend\nelse\nextensions.blrtriggers.registerNode(nid)\nend\n"
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":false
            },
            "nid":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "active":false,
              "enter":false,
              "exit":false,
              "flow":true,
              "triggerID":false,
              "triggerName":false
            }
          },
          "name":"VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "active",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "enter",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "exit",
              null,
              ""
            ],
            [
              "out",
              "number",
              "triggerID",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            -3266,
            50
          ],
          "type":"util/customLua"
        },
        "446":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"gara"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            2754,
            -440
          ],
          "type":"util/customLua"
        },
        "447":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"repa"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            -970,
            -2078
          ],
          "type":"util/customLua"
        },
        "448":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal nid = self.pinIn.nid.value or 0\nif extensions.blrtriggers.isNodeRegistered(nid) then\nlocal menuMode = self.pinIn.menuMode.value or false\nlocal filter = self.pinIn.veid.value\nlocal af = self.pinIn.af.value\nlocal tdata = extensions.blrtriggers.poolTriggerData(nid, filter, menuMode)\nif tdata then\nself.pinOut.enter.value = tdata[\"event\"] == \"enter\"\nself.pinOut.exit.value = tdata[\"event\"] == \"exit\"\nself.pinOut.triggerID.value = tdata[\"triggerID\"]\nself.pinOut.triggerName.value = tdata[\"triggerName\"]\nelse\nself.pinOut.enter.value = false\nself.pinOut.exit.value = false\nend\nif af == nil then\nself.pinOut.active.value = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, menuMode)\nelse\nself.pinOut.active.value = extensions.blrtriggers.getTriggerStatus(nid,filter, af, menuMode)\nend\nelse\nextensions.blrtriggers.registerNode(nid)\nend\n"
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":false
            },
            "nid":{
              "type":"number",
              "value":6
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "active":false,
              "enter":false,
              "exit":false,
              "flow":true,
              "triggerID":false,
              "triggerName":false
            }
          },
          "name":"VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "active",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "enter",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "exit",
              null,
              ""
            ],
            [
              "out",
              "number",
              "triggerID",
              null,
              ""
            ],
            [
              "out",
              "string",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            -3658,
            386
          ],
          "type":"util/customLua"
        },
        "449":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            460,
            505
          ],
          "commentText":"",
          "commentTitle":"Nitrous",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1596,
            -2142
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "450":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1978,
            78
          ],
          "type":"types/genericValue"
        },
        "451":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3504,
            36
          ],
          "type":"logic/compare"
        },
        "452":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -1782,
            -2764
          ],
          "type":"util/customLua"
        },
        "453":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal fid = self.pinIn.vid.value\nif extensions.blrhooks.getFilter() ~= fid then\nextensions.blrhooks.setFilter(fid)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set BLRHooks Filter",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            512
          ],
          "type":"util/customLua"
        },
        "454":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2944,
            -916
          ],
          "type":"logic/compare"
        },
        "455":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.hasNos.value then\nlocal extensions = require(\"extensions\")\nlocal cost = self.pinIn.cost.value\nlocal veid = self.pinIn.veid.value\nlocal ve = scenetree.findObjectById(veid)\nlocal cap = 0\nlocal mass = 0\nif ve ~= nil then\nlocal massFetch = \"extensions.blrVehicleUtils.getNitrousRemainingVolume()\"\nlocal capFetch = \"extensions.blrVehicleUtils.getNitrousCapacity()\"\nlocal mfid = \"nosmass\"\nlocal cfid = \"noscap\"\nlocal mcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. massFetch .. \",'\" .. mfid .. \"'))\"\nlocal ccmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. capFetch .. \",'\" .. cfid .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(mcmd)\nve:queueLuaCommand(ccmd)\nend\nmass = tonumber(extensions.vluaFetchModule.getVal(mfid)) or 0\ncap = tonumber(extensions.vluaFetchModule.getVal(cfid)) or 0\nend\n\nself.pinOut.mass.value = mass\nself.pinOut.cap.value = cap\nself.pinOut.canFill.value = mass < cap\nself.pinOut.info.value = \"N2O Tank: \" .. string.format(\"%.2f\",mass) .. \"/\" .. string.format(\"%.2f\",cap) .. \" kg\"\nself.pinOut.fillinfo.value = \"Refill N2O ($\" .. string.format(\"%.2f\", (cap-mass) * cost ) .. \")\"\nself.pinOut.fillCost.value = (cap-mass) * cost\nelse\nself.pinOut.mass.value = 0.00001\nself.pinOut.cap.value = 0.00001\nself.pinOut.canFill.value = false\nself.pinOut.info.value = \"No N2O System\"\nself.pinOut.fillinfo.value = \"\"\nself.pinOut.fillCost.value = 0\nend\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cost":{
              "type":"number",
              "value":12
            }
          },
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "hasNos":false,
              "veid":false
            },
            "p_out":{
              "canFill":false,
              "cap":false,
              "fillCost":false,
              "fillinfo":false,
              "flow":false,
              "info":false,
              "mass":false
            }
          },
          "name":"N2O Info",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "mass",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cap",
              null,
              ""
            ],
            [
              "out",
              "string",
              "info",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fillinfo",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "canFill",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "hasNos",
              null,
              ""
            ],
            [
              "out",
              "number",
              "fillCost",
              null,
              ""
            ]
          ],
          "pos":[
            -1340,
            -1910
          ],
          "type":"util/customLua"
        },
        "456":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1614,
            -706
          ],
          "type":"types/genericValue"
        },
        "457":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local winner = self.pinIn.winner.value\nself.pinOut.over.value = (winner ~= 0)\nself.pinOut.won.value = (winner == 1)\n\nif self.pinIn.plyrdy.value ~= 1 then\nself.pinOut.text.value = \"Get In Position\"\nself.pinOut.btntxt.value = \"Give Up\"\nelseif winner == 0 then\nlocal pgtxt = \"Race In Progress!\\n\"\npgtxt = pgtxt .. \"Lap \" .. (self.pinIn.clap.value or 1) .. \"/\".. self.pinIn.laps.value .. \"\\n\"\npgtxt = pgtxt .. \"Checkpoint \" .. (self.pinIn.cpid.value or 1) .. \"/\" .. self.pinIn.cpc.value\nself.pinOut.text.value = pgtxt\nself.pinOut.btntxt.value = \"Give Up\"\nelseif winner == 1 then\nself.pinOut.text.value = \"You won the race!\"\nself.pinOut.btntxt.value = \"Claim Reward\"\nelse\nself.pinOut.text.value = \"You lost the race!\"\nself.pinOut.btntxt.value = \"Continue...\"\nend\n\nself.pinOut.slips.value = self.pinIn.slips.value == 1\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "clap":false,
              "cpc":false,
              "cpid":false,
              "flow":false,
              "laps":false,
              "plyrdy":false,
              "slips":false,
              "winner":false
            },
            "p_out":{
              "btntxt":false,
              "flow":false,
              "over":false,
              "slips":false,
              "text":false,
              "won":false
            }
          },
          "name":"Race Progress",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "winner",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "over",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "won",
              null,
              ""
            ],
            [
              "out",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "string",
              "btntxt",
              null,
              ""
            ],
            [
              "in",
              "number",
              "plyrdy",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "slips",
              null,
              ""
            ],
            [
              "in",
              "number",
              "slips",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clap",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cpid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ]
          ],
          "pos":[
            -1348,
            -706
          ],
          "type":"util/customLua"
        },
        "458":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1628,
            -356
          ],
          "type":"types/genericValue"
        },
        "459":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2194,
            -440
          ],
          "type":"vehicle/freeze"
        },
        "460":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal level = extensions.blrutils.getLevelName()\nlocal dtable = self.pinIn.missions.value\nlocal mid = self.pinIn.mid.value or 1\nlocal filename = \"beamLR/missions/\" .. level .. \"/\"\nfilename = filename .. dtable[mid]\nself.pinOut.filename.value = filename\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mid":false,
              "missions":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Mission File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "missions",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -1768,
            -2652
          ],
          "type":"util/customLua"
        },
        "461":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1572,
            -2089
          ],
          "type":"logic/bundle"
        },
        "462":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2944,
            -1042
          ],
          "type":"types/genericValue"
        },
        "463":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "complete":false,
              "completed":false,
              "flow":false,
              "incomplete":false
            }
          },
          "pos":[
            1096,
            2402
          ],
          "type":"audio/fadeOut"
        },
        "464":{
          "data":{
            "bigFinishMsg":true,
            "playSounds":true,
            "useImgui":false,
            "useMessages":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "countdownMsg":{
              "type":"string",
              "value":"%d"
            },
            "duration":{
              "type":"number",
              "value":3.90000009536743164063
            },
            "finishMsg":{
              "type":"string",
              "value":"Go!"
            },
            "finishMsgDuration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "countdownMsg":true,
              "duration":true,
              "finishMsg":true,
              "finishMsgDuration":true,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "finished":false,
              "flow":false,
              "ongoing":false
            }
          },
          "pos":[
            -2720,
            -286
          ],
          "type":"gameplay/countdown"
        },
        "465":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3154,
            -314
          ],
          "type":"logic/flowSwitch"
        },
        "466":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1564,
            -2036
          ],
          "type":"util/customLua"
        },
        "467":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal parts = extensions.betterpartmgmt.getVehicleParts()\nlocal hasNos = false\nif parts[\"n2o_system\"] then\nhasNos = parts[\"n2o_system\"] ~= \"\"\nend\nself.pinOut.hasNos.value = hasNos"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "hasNos":false
            }
          },
          "name":"N2O Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "hasNos",
              null,
              ""
            ]
          ],
          "pos":[
            -928,
            2374
          ],
          "type":"util/customLua"
        },
        "468":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1230,
            631
          ],
          "commentText":"Waiting for player to get into position.\\nFreezing cars until countdown is over.\\n",
          "commentTitle":"Race Countdown",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3248,
            -714
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "469":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            824,
            394
          ],
          "commentText":"Deletes career files and restores init\\nstate files before restarting",
          "commentTitle":"Reset Career",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1988,
            2170
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "470":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1404,
            -636
          ],
          "type":"logic/once"
        },
        "471":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1774,
            806
          ],
          "type":"logic/branch"
        },
        "472":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -144,
            2206
          ],
          "type":"logic/branch"
        },
        "473":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.resetCareer()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Career",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1348,
            2234
          ],
          "type":"util/customLua"
        },
        "474":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1628,
            2878
          ],
          "type":"logic/frameDelay"
        },
        "475":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1202,
            478
          ],
          "commentText":"Moves time forward and heals player to 100%%\\n",
          "commentTitle":"Fast Forward",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2352,
            1554
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "476":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -1894,
            2486
          ],
          "type":"scene/getPlayerVehicle"
        },
        "477":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"airspdgforce"
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getForceVectorLength()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":false,
              "flow":false,
              "toFetch":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            -298,
            1450
          ],
          "type":"util/customLua"
        },
        "478":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -242,
            1352
          ],
          "type":"scene/getPlayerVehicle"
        },
        "479":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.num.value = tonumber(self.pinIn.str.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "str":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"To Number",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "str",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ]
          ],
          "pos":[
            -74,
            1450
          ],
          "type":"util/customLua"
        },
        "480":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local force = self.pinIn.force.value or 0\nlocal maxforce = self.pinIn.max.value or 999999\nself.pinOut.death.value = force >= maxforce"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "max":{
              "type":"number",
              "value":931
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "force":false,
              "max":false
            },
            "p_out":{
              "death":false,
              "flow":false
            }
          },
          "name":"Fatal Crash",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "force",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "death",
              null,
              ""
            ]
          ],
          "pos":[
            -88,
            1618
          ],
          "type":"util/customLua"
        },
        "481":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            108,
            1632
          ],
          "type":"logic/branch"
        },
        "482":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            122,
            1772
          ],
          "type":"types/genericValue"
        },
        "483":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -732,
            2360
          ],
          "type":"util/customLua"
        },
        "484":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal parts = extensions.betterpartmgmt.getVehicleParts()\nlocal hasNos = false\nif parts[\"n2o_system\"] then\nhasNos = parts[\"n2o_system\"] ~= \"\"\nend\nself.pinOut.hasNos.value = hasNos"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "hasNos":false
            }
          },
          "name":"N2O Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "hasNos",
              null,
              ""
            ]
          ],
          "pos":[
            6016,
            400
          ],
          "type":"util/customLua"
        },
        "485":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            6016,
            470
          ],
          "type":"util/customLua"
        },
        "486":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -46,
            -2974
          ],
          "type":"util/customLua"
        },
        "487":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            360,
            -412
          ],
          "type":"types/genericValue"
        },
        "488":{
          "customName":"Spawn Delay",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1180,
            -552
          ],
          "type":"logic/frameDelay"
        },
        "489":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            698,
            772
          ],
          "commentText":"G Force Calculator used to detect player injury.",
          "commentTitle":"Fatal Accident Detector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -364,
            1316
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "490":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.generateDamageCostTable()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Generate Damage Costs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            6212,
            274
          ],
          "type":"util/customLua"
        },
        "491":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1950,
            2318
          ],
          "type":"logic/frameDelay"
        },
        "492":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.generateDamageCostTable()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Generate Damage Costs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -648,
            2402
          ],
          "type":"util/customLua"
        },
        "493":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"<=",
          "pos":[
            -130,
            1786
          ],
          "type":"logic/compare"
        },
        "494":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1530,
            2234
          ],
          "type":"logic/once"
        },
        "495":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":false,
              "flow":false,
              "health":true,
              "money":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            5456,
            456
          ],
          "type":"util/customLua"
        },
        "496":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local vid = self.pinIn.vid.value\nscenetree.findObjectById(vid):queueLuaCommand(\"extensions.blrVehicleUtils.toggleNitrous()\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Nitrous",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ]
          ],
          "pos":[
            -696,
            -328
          ],
          "type":"util/customLua"
        },
        "497":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal model = self.pinIn.model.value\nlocal config = self.pinIn.config.value\nlocal pos = vec3(self.pinIn.pos.value)\nlocal rot = quat(self.pinIn.rot.value)\nlocal paintdata = self.pinIn.paintdata.value\nlocal avbrdy = self.pinIn.avbrdy.value\nlocal paintA = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintA\"], \",\"))\nif paintdata[\"paintB\"] then\nlocal paintB = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintB\"], \",\"))\nend\nif paintdata[\"paintC\"] then\nlocal paintC = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintC\"], \",\"))\nend\nlocal spawnOptions = {config=config,pos = pos, rot = rot, paint=paintA, paint2=paintB,paint3=paintC}\n\n--1.13 advanced vehicle building \nif avbrdy then\nextensions.blrglobals.blrFlagSet(\"advancedVehicleBuilding\",true)\nend\n\nlocal veh = extensions.blrutils.blrSpawn(model, spawnOptions)\nself.pinOut.veid.value = veh:getId()\n\n-- 1.15.1 fix\nextensions.blrutils.blrvarSet(\"playervehid\", veh:getId())"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "avbrdy":false,
              "config":false,
              "flow":false,
              "model":false,
              "paintdata":false,
              "pos":false,
              "rot":false
            },
            "p_out":{
              "flow":false,
              "veid":false
            }
          },
          "name":"BLR Spawn Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "avbrdy",
              null,
              ""
            ]
          ],
          "pos":[
            4938,
            190
          ],
          "type":"util/customLua"
        },
        "498":{
          "customName":"Del AI CFG call to avoid bug",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3000,
            -174
          ],
          "type":"logic/frameDelay"
        },
        "499":{
          "data":{
            "restoreTod":true
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "play":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "azimuthOverride":true,
              "dayLength":false,
              "dayScale":true,
              "flow":false,
              "nightScale":true,
              "play":false,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1852,
            1800
          ],
          "type":"environment/setTimeOfDay"
        },
        "500":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1740,
            2234
          ],
          "type":"logic/flowSwitch"
        },
        "501":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "azimuthOverride":false,
              "dayLength":false,
              "dayScale":false,
              "nightScale":false,
              "time":false
            }
          },
          "pos":[
            -1866,
            1646
          ],
          "type":"environment/getTimeOfDay"
        },
        "502":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1936,
            2265
          ],
          "type":"logic/bundle"
        },
        "503":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local hours = (self.pinIn.oh.value or 0) / 24.0\nlocal minutes = (self.pinIn.om.value or 0) / 1440.0\nlocal seconds = (self.pinIn.os.value or 0) / 86400.0\n\nlocal current = self.pinIn.ct.value\nlocal offset = hours + minutes + seconds\nlocal rawout = current + offset\nlocal outtime = (current + offset ) % 1.0\n\nlocal newday = (current < 0.5 and rawout >= 0.5 ) or (rawout >= 1.5)\n\nself.pinOut.dayChange.value = newday\nself.pinOut.ot.value = outtime"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "ct":false,
              "flow":false,
              "oh":false,
              "om":false,
              "os":false
            },
            "p_out":{
              "dayChange":false,
              "flow":false,
              "ot":false
            }
          },
          "name":"Get Offset Time",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "ct",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oh",
              null,
              ""
            ],
            [
              "in",
              "number",
              "om",
              null,
              ""
            ],
            [
              "in",
              "number",
              "os",
              null,
              ""
            ],
            [
              "out",
              "number",
              "ot",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "dayChange",
              null,
              ""
            ]
          ],
          "pos":[
            -2076,
            1688
          ],
          "type":"util/customLua"
        },
        "504":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "pos":false,
              "repairVehicle":true,
              "rot":false,
              "safeTeleport":true,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1516,
            2332
          ],
          "type":"vehicle/moveTo"
        },
        "505":{
          "data":{
            "btnName":"Get Offset Time"
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2272,
            1621
          ],
          "type":"events/interactiveButton"
        },
        "506":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4932,
            400
          ],
          "type":"logic/once"
        },
        "507":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4980,
            64
          ],
          "type":"logic/flowSwitch"
        },
        "508":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":100
            },
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1670,
            1828
          ],
          "type":"types/genericValue"
        },
        "509":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5176,
            78
          ],
          "type":"logic/frameDelay"
        },
        "510":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1404,
            2486
          ],
          "type":"scene/camera/returnToVehicle"
        },
        "511":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5400,
            78
          ],
          "type":"logic/once"
        },
        "512":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"~=",
          "pos":[
            -3196,
            1128
          ],
          "type":"logic/compare"
        },
        "513":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3420,
            1268
          ],
          "type":"ui/flashMessage"
        },
        "514":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            614,
            436
          ],
          "commentText":"",
          "commentTitle":"Veh Type Getter",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3444,
            966
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "515":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            3398,
            78
          ],
          "type":"logic/compare"
        },
        "516":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal model = self.pinIn.model.value\nlocal config = self.pinIn.config.value\nlocal pos = vec3(self.pinIn.pos.value)\nlocal rot = quat(self.pinIn.rot.value)\nlocal paintdata = self.pinIn.paintdata.value\nlocal avbrdy = self.pinIn.avbrdy.value\nlocal paintA = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintA\"], \",\"))\nif paintdata[\"paintB\"] then\nlocal paintB = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintB\"], \",\"))\nend\nif paintdata[\"paintC\"] then\nlocal paintC = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintC\"], \",\"))\nend\nlocal spawnOptions = {config=config,pos = pos, rot = rot, paint=paintA, paint2=paintB,paint3=paintC}\n\n--1.13 advanced vehicle building \nif avbrdy then\nextensions.blrglobals.blrFlagSet(\"advancedVehicleBuilding\",true)\nend\n\nlocal veh = extensions.blrutils.blrSpawn(model, spawnOptions)\nself.pinOut.veid.value = veh:getId()\n\n-- 1.15.1 fix\nextensions.blrutils.blrvarSet(\"playervehid\", veh:getId())"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "avbrdy":false,
              "config":false,
              "flow":false,
              "model":false,
              "paintdata":false,
              "pos":false,
              "rot":false
            },
            "p_out":{
              "flow":false,
              "veid":false
            }
          },
          "name":"BLR Spawn Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "avbrdy",
              null,
              ""
            ]
          ],
          "pos":[
            1278,
            204
          ],
          "type":"util/customLua"
        },
        "517":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1340,
            484
          ],
          "type":"logic/once"
        },
        "518":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal id = self.pinIn.carid.value\nlocal count = self.pinIn.count.value\nlocal cevent = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\nlocal ctemplates = {}\n\nlocal extensions = require(\"extensions\")\nextensions.blrutils.deleteFile(\"beamLR/garage/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/garage/config/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/car\" .. id .. \".save.json\")\nextensions.blrutils.deleteFile(\"beamLR/beamstate/mech/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/integrity/car\" .. id)\n\n-- Clearing removed car templates from folder\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. id, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.deleteFile(file)\nend\n\n-- Delete template folder for that car\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. id)\n\nfor v=id+1,count-1 do \nextensions.blrutils.moveFile(\"beamLR/garage/car\" .. v, \"beamLR/garage/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/garage/config/car\" .. v, \"beamLR/garage/config/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/car\" .. v .. \".save.json\",\"beamLR/beamstate/car\" .. v-1 .. \".save.json\")\nextensions.blrutils.moveFile(\"beamLR/beamstate/mech/car\" .. v,\"beamLR/beamstate/mech/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/integrity/car\" .. v,\"beamLR/beamstate/integrity/car\" .. v-1)\n\n-- For current event, check status then edit carid to reflect new ID\nif cevent['status'] ~= \"over\" then\nif tonumber(cevent['carid']) == v then -- Found car registered to event\ncevent['carid'] = v-1\nextensions.blrutils.updateDataTable(\"beamLR/currentTrackEvent\", cevent)\nend\nend\n\n-- For templates, use blrutils.moveFile, first directory is already empty so move can proceed\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. v, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.moveFile(file, file:gsub(\"beamLR/garage/config/template/car\" .. v, \"beamLR/garage/config/template/car\" .. v-1))\nend\n-- Remove last directory which is now empty\nif v==count-1 then\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. v)\nend\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "count":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Remove Garage Car",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ]
          ],
          "pos":[
            2538,
            -2064
          ],
          "type":"util/customLua"
        },
        "519":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1522,
            372
          ],
          "type":"logic/frameDelay"
        },
        "520":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1536,
            470
          ],
          "type":"logic/once"
        },
        "521":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2992,
            -1770
          ],
          "type":"vehicle/removeVehicle"
        },
        "522":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- will handle get and set value\nlocal extensions = require(\"extensions\")\n\nlocal stotal = extensions.blrutils.getDriftTotal()\nlocal scurrent = extensions.blrutils.getDriftCurrent()\nlocal ctotal = self.pinIn.total.value\nlocal ccurrent = self.pinIn.current.value\n\nif ctotal then\nextensions.blrutils.setDriftTotal(ctotal)\nend\n\nif ccurrent then\nextensions.blrutils.setDriftCurrent(ccurrent)\nend\n\nself.pinOut.total.value = stotal\nself.pinOut.current.value = scurrent"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "current":{
              "type":"number",
              "value":0
            },
            "total":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "current":false,
              "flow":false,
              "total":false
            }
          },
          "name":"BLR Drift Score",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "total",
              null,
              ""
            ],
            [
              "out",
              "number",
              "total",
              null,
              ""
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ]
          ],
          "pos":[
            1494,
            1954
          ],
          "type":"util/customLua"
        },
        "523":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3048,
            -2008
          ],
          "type":"util/customLua"
        },
        "524":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2992,
            -1882
          ],
          "type":"types/genericValue"
        },
        "525":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "carUsed":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":false,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            3230,
            -1938
          ],
          "type":"util/customLua"
        },
        "526":{
          "customName":"Loaded",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1138,
            -440
          ],
          "type":"logic/once"
        },
        "527":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2552,
            -2190
          ],
          "type":"types/genericValue"
        },
        "528":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3034,
            -2162
          ],
          "type":"util/customLua"
        },
        "529":{
          "data":{
            "value":1
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            2950,
            -2078
          ],
          "type":"types/number"
        },
        "530":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -584,
            -1966
          ],
          "type":"logic/compare"
        },
        "531":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vdata = extensions.blrutils.getVehicleData()\nlocal ctrig = self.pinIn.ctrig.value\nlocal ccp = self.pinIn.ccp.value\nlocal type = self.pinIn.type.value\nlocal triggers = self.pinIn.triggers.value\nlocal tcount = #triggers\nself.pinOut.tcount.value = tcount\nlocal ttrig = triggers[ccp]\nlocal startTime = self.pinIn.startTime.value\nlocal ttime = self.pinIn.targetTime.value\nlocal ctime = extensions.blrutils.getRaceTime()\nlocal ctimeFormat = extensions.blrutils.msTimeFormat(ctime - startTime)\n\nlocal tdrift = self.pinIn.driftPoints.value\nlocal cdrift = extensions.blrutils.getDriftCombined() -- 1.12 change, now checks for current drift + total\n\n\nif tcount < 2 then\nself.pinOut.showbm.value = false\nend\n\nif ccp == -1 then\nself.pinOut.nextcp.value = 1\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[1]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.finished.value = false\nself.pinOut.failed.value = false\nself.pinOut.timerReady.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.useExtraText.value = type == \"time\"\n\nif tcount > 1 then\nself.pinOut.showbm.value = true\nself.pinOut.bmid.value = scenetree.findObject(triggers[2]):getID()\nend\n\nelseif self.pinIn.completed.value == 1 then\nself.pinOut.finished.value = true\nself.pinOut.nextcp.value = ccp\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.failed.value = false\n\nelse\n\nif type == \"jump\" then\nself.pinOut.finished.value = ctrig == ttrig\nself.pinOut.nextcp.value = ccp\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.failed.value = false\nself.pinOut.useExtraText.value = false\nself.pinOut.timerReady.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.endTime.value = -1\nend\n\nif type == \"speed\" then\nself.pinOut.finished.value = (ctrig == ttrig) and (vdata[\"velocity\"] >= self.pinIn.targetSpd.value)\nself.pinOut.nextcp.value = ccp\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.failed.value = false\nself.pinOut.useExtraText.value = false\nself.pinOut.timerReady.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.endTime.value = -1\nend\n\nif type == \"time\" then\nself.pinOut.useExtraText.value = true\n\nif ctrig == ttrig and self.pinIn.failed.value == 0 then\n\nif ccp == tcount then\nself.pinOut.finished.value = true\nself.pinOut.nextcp.value = ccp\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.startTime.value = self.pinIn.startTime.value\nself.pinOut.failed.value = false\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = ctime\nself.pinOut.showbm.value = false\nself.pinOut.bmid.value = -1\nelseif ccp == 1 then\nself.pinOut.nextcp.value = ccp + 1\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp + 1]):getID()\nself.pinOut.cpsound.value = true\nself.pinOut.finished.value = false\nself.pinOut.setStartTime.value = true\nself.pinOut.startTime.value = extensions.blrutils.getRaceTime()\nself.pinOut.failed.value = false\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = -1\nself.pinOut.showbm.value = tcount > 1 and ccp + 2 <= tcount\nif tcount > 1 and ccp + 2 <= tcount then\nself.pinOut.bmid.value = scenetree.findObject(triggers[ccp + 2]):getID()\nend\nelse\nself.pinOut.nextcp.value = ccp + 1\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp + 1]):getID()\nself.pinOut.cpsound.value = true\nself.pinOut.finished.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.startTime.value = self.pinIn.startTime.value\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = -1\nself.pinOut.showbm.value = tcount > 1 and ccp + 2 <= tcount\nif tcount > 1 and ccp + 2 <= tcount then\nself.pinOut.bmid.value = scenetree.findObject(triggers[ccp + 2]):getID()\nend\nend\nelse\nself.pinOut.cpsound.value = false\nend\nend\n\nif type == \"drift\" then\nself.pinOut.useExtraText.value = true\n\nif ctrig == ttrig and self.pinIn.failed.value == 0 then\n\nif ccp == tcount then \nif cdrift >= tdrift then -- Only allow finishing challenge if drift point target is reached\nself.pinOut.finished.value = true\nself.pinOut.nextcp.value = ccp\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp]):getID()\nself.pinOut.cpsound.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.startTime.value = self.pinIn.startTime.value\nself.pinOut.failed.value = false\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = ctime\nself.pinOut.showbm.value = false\nself.pinOut.bmid.value = -1\nextensions.blrglobals.blrFlagSet(\"updateDriftScore\", false) -- Stop updating drift score\nextensions.customGuiStream.sendCurrentDrift(0) -- Last message to drift UI after finish\nextensions.customGuiStream.sendTotalDrift(cdrift) -- adds current drift to total drift\nend\nelseif ccp == 1 then\nself.pinOut.nextcp.value = ccp + 1\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp + 1]):getID()\nself.pinOut.cpsound.value = true\nself.pinOut.finished.value = false\nself.pinOut.setStartTime.value = true\nself.pinOut.startTime.value = extensions.blrutils.getRaceTime()\nself.pinOut.failed.value = false\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = -1\nself.pinOut.showbm.value = tcount > 1 and ccp + 2 <= tcount\nextensions.blrglobals.blrFlagSet(\"updateDriftScore\", true) -- Start updating drift score\nif tcount > 1 and ccp + 2 <= tcount then\nself.pinOut.bmid.value = scenetree.findObject(triggers[ccp + 2]):getID()\nend\nelse\nself.pinOut.nextcp.value = ccp + 1\nself.pinOut.nexttrigid.value = scenetree.findObject(triggers[ccp + 1]):getID()\nself.pinOut.cpsound.value = true\nself.pinOut.finished.value = false\nself.pinOut.setStartTime.value = false\nself.pinOut.startTime.value = self.pinIn.startTime.value\nself.pinOut.timerReady.value = true\nself.pinOut.endTime.value = -1\nself.pinOut.showbm.value = tcount > 1 and ccp + 2 <= tcount\nif tcount > 1 and ccp + 2 <= tcount then\nself.pinOut.bmid.value = scenetree.findObject(triggers[ccp + 2]):getID()\nend\nend\nelse\nself.pinOut.cpsound.value = false\nend\nend\n\n\nend\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "ccp":false,
              "completed":false,
              "ctrig":false,
              "driftPoints":false,
              "failed":false,
              "flow":false,
              "startTime":false,
              "targetSpd":false,
              "targetTime":false,
              "triggers":false,
              "type":false
            },
            "p_out":{
              "bmid":false,
              "cpsound":false,
              "endTime":false,
              "failed":false,
              "finished":false,
              "flow":false,
              "nextcp":false,
              "nexttrigid":false,
              "setStartTime":false,
              "showbm":false,
              "startTime":false,
              "tcount":false,
              "timerReady":false,
              "useExtraText":false
            }
          },
          "name":"Challenge Completion",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "ctrig",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "ccp",
              null,
              ""
            ],
            [
              "in",
              "string",
              "type",
              null,
              ""
            ],
            [
              "in",
              "table",
              "triggers",
              null,
              ""
            ],
            [
              "in",
              "number",
              "targetSpd",
              null,
              ""
            ],
            [
              "in",
              "number",
              "driftPoints",
              null,
              ""
            ],
            [
              "in",
              "number",
              "targetTime",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nextcp",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "finished",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nexttrigid",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "cpsound",
              null,
              ""
            ],
            [
              "in",
              "number",
              "completed",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "useExtraText",
              null,
              ""
            ],
            [
              "in",
              "number",
              "startTime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "setStartTime",
              null,
              ""
            ],
            [
              "out",
              "number",
              "startTime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "failed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "failed",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "timerReady",
              null,
              ""
            ],
            [
              "out",
              "number",
              "endTime",
              null,
              ""
            ],
            [
              "out",
              "number",
              "tcount",
              null,
              ""
            ],
            [
              "out",
              "number",
              "bmid",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "showbm",
              null,
              ""
            ]
          ],
          "pos":[
            -3882,
            -3338
          ],
          "type":"util/customLua"
        },
        "532":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -858,
            1996
          ],
          "type":"util/customLua"
        },
        "533":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "complete":false,
              "completed":false,
              "flow":false,
              "incomplete":false
            }
          },
          "pos":[
            -2328,
            1814
          ],
          "type":"ui/fadeToBlack"
        },
        "534":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2314,
            1688
          ],
          "type":"logic/flowSwitch"
        },
        "535":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            1590
          ],
          "type":"logic/flowSwitch"
        },
        "536":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "complete":false,
              "completed":false,
              "flow":false,
              "incomplete":false
            }
          },
          "pos":[
            -1376,
            1590
          ],
          "type":"ui/fadeFromBlack"
        },
        "537":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2076,
            1884
          ],
          "type":"vehicle/freeze"
        },
        "538":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -2328,
            1982
          ],
          "type":"scene/getPlayerVehicle"
        },
        "539":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1978,
            1593
          ],
          "type":"logic/bundle"
        },
        "540":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"missionComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            178,
            -4990
          ],
          "type":"types/genericValue"
        },
        "541":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"garageSafeMode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2768,
            -580
          ],
          "type":"util/customLua"
        },
        "542":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\n\nif enabled then\n\nif im.IsItemHovered() then\nlocal down = im.IsMouseClicked(0)\nlocal hold = im.IsMouseDown(0)\nlocal up =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nelse\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse\n\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "enabled":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ]
          ],
          "pos":[
            2152,
            78
          ],
          "type":"util/customLua"
        },
        "543":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":false,
              "flow":false,
              "health":false,
              "money":false,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            570,
            890
          ],
          "type":"util/customLua"
        },
        "544":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2950,
            -594
          ],
          "type":"logic/branch"
        },
        "545":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2880,
            1324
          ],
          "type":"vehicle/freeze"
        },
        "546":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "filename":{
              "type":"string",
              "value":"beamLR/mainData"
            }
          },
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            900,
            -62
          ],
          "type":"util/customLua"
        },
        "547":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            498
          ],
          "type":"types/genericValue"
        },
        "548":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "azimuthOverride":true,
              "dayLength":true,
              "dayScale":true,
              "nightScale":true,
              "time":false
            }
          },
          "pos":[
            766,
            1016
          ],
          "type":"environment/getTimeOfDay"
        },
        "549":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            1032,
            -4458
          ],
          "type":"util/customLua"
        },
        "550":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -298,
            -482
          ],
          "type":"util/customLua"
        },
        "551":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2166,
            -118
          ],
          "type":"types/genericValue"
        },
        "552":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgPeekVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"postEditActionsQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":false,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Peek",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1082,
            1674
          ],
          "type":"util/customLua"
        },
        "553":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Impound Vehicle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            1782,
            1422
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "554":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "health":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":false,
              "money":true,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -1432,
            1856
          ],
          "type":"util/customLua"
        },
        "555":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"\nlocal cost = 0\nlocal prefix = \"\"\n\nif self.pinIn.walking.value == 0 then\ncost = 50\nprefix = \"Call Tow Truck \"\nelse\ncost = 10\nprefix = \"Take Bus \"\nend\n\nlocal costtext = string.format(\"($%.2f)\", cost )\nlocal fulltext = prefix .. costtext\nself.pinOut.txt.value = fulltext\nself.pinOut.cost.value = cost"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "walking":false
            },
            "p_out":{
              "cost":false,
              "flow":false,
              "txt":false
            }
          },
          "name":"Towing Text",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "walking",
              null,
              ""
            ],
            [
              "out",
              "string",
              "txt",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            2160,
            -34
          ],
          "type":"util/customLua"
        },
        "556":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1216,
            337
          ],
          "commentText":"",
          "commentTitle":"Pink Slips",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2954,
            -1106
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "557":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal id = self.pinIn.carid.value\nlocal count = self.pinIn.count.value\nlocal cevent = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\nlocal ctemplates = {}\n\nlocal extensions = require(\"extensions\")\nextensions.blrutils.deleteFile(\"beamLR/garage/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/garage/config/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/car\" .. id .. \".save.json\")\nextensions.blrutils.deleteFile(\"beamLR/beamstate/mech/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/integrity/car\" .. id)\n\n-- Clearing removed car templates from folder\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. id, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.deleteFile(file)\nend\n\n-- Delete template folder for that car\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. id)\n\nfor v=id+1,count-1 do \nextensions.blrutils.moveFile(\"beamLR/garage/car\" .. v, \"beamLR/garage/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/garage/config/car\" .. v, \"beamLR/garage/config/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/car\" .. v .. \".save.json\",\"beamLR/beamstate/car\" .. v-1 .. \".save.json\")\nextensions.blrutils.moveFile(\"beamLR/beamstate/mech/car\" .. v,\"beamLR/beamstate/mech/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/integrity/car\" .. v,\"beamLR/beamstate/integrity/car\" .. v-1)\n\n-- For current event, check status then edit carid to reflect new ID\nif cevent['status'] ~= \"over\" then\nif tonumber(cevent['carid']) == v then -- Found car registered to event\ncevent['carid'] = v-1\nextensions.blrutils.updateDataTable(\"beamLR/currentTrackEvent\", cevent)\nend\nend\n\n-- For templates, use blrutils.moveFile, first directory is already empty so move can proceed\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. v, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.moveFile(file, file:gsub(\"beamLR/garage/config/template/car\" .. v, \"beamLR/garage/config/template/car\" .. v-1))\nend\n-- Remove last directory which is now empty\nif v==count-1 then\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. v)\nend\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "count":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Remove Garage Car",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ]
          ],
          "pos":[
            -2684,
            -1420
          ],
          "type":"util/customLua"
        },
        "558":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2908,
            -1350
          ],
          "type":"types/genericValue"
        },
        "559":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            -1252
          ],
          "type":"vehicle/removeVehicle"
        },
        "560":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -2916,
            -1224
          ],
          "type":"scene/getPlayerVehicle"
        },
        "561":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2488,
            -1322
          ],
          "type":"util/customLua"
        },
        "562":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2258,
            -1322
          ],
          "type":"types/genericValue"
        },
        "563":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"outstandingTicket"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1942,
            1212
          ],
          "type":"types/genericValue"
        },
        "564":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal filedata = \"\"\nlocal filename = \"beamLR/garage/car\" .. (self.pinIn.count.value)\nlocal paintdata = {}\n\n-- 1.12 fix, random paints now loaded as blrvar table\nif self.pinIn.randpaint.value then\npaintdata = extensions.blrutils.blrvarGet(\"raceEnemyPaint\")\nelse\npaintdata[1] = self.pinIn.paintdata.value\npaintdata[2] = self.pinIn.paintdata.value\npaintdata[3] = self.pinIn.paintdata.value\nend\n\nfiledata = \"name=car \" .. (self.pinIn.count.value + 1) .. \"\\n\"\nfiledata = filedata .. \"type=\" .. self.pinIn.model.value .. \"\\n\"\nfiledata = filedata .. \"gas=2\" .. \"\\n\"\nfiledata = filedata .. \"baseprice=\" .. self.pinIn.baseprice.value .. \"\\n\"\nfiledata = filedata .. \"partprice=\" .. self.pinIn.partprice.value .. \"\\n\"\nfiledata = filedata .. \"scrapval=\" .. self.pinIn.scrapval.value .. \"\\n\"\nfiledata = filedata .. \"paintA=\" .. paintdata[1] .. \"\\n\"\nfiledata = filedata .. \"paintB=\" .. paintdata[2] .. \"\\n\"\nfiledata = filedata .. \"paintC=\" .. paintdata[3] .. \"\\n\"\nfiledata = filedata .. \"damage=0\\n\"\nfiledata = filedata .. \"impoundval=0\\n\"\nfiledata = filedata .. \"nos=0\\n\"\nfiledata = filedata .. \"avbready=0\\n\"\nwriteFile(filename, filedata)\n\nextensions.blrutils.copyFile(self.pinIn.config.value, \"beamLR/garage/config/car\" .. (self.pinIn.count.value))\nextensions.blrutils.copyFile(self.pinIn.ifile.value, \"beamLR/beamstate/integrity/car\" .. (self.pinIn.count.value))\n\nlocal mechdata = extensions.mechDamageLoader.getNewCarMechData()\nwriteFile(\"beamLR/beamstate/mech/car\" .. (self.pinIn.count.value), mechdata)\n\nFS:directoryCreate(\"beamLR/garage/config/template/car\" .. (self.pinIn.count.value))"
          },
          "customName":"Add Car To Garage",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "baseprice":false,
              "config":false,
              "count":false,
              "flow":false,
              "ifile":false,
              "model":false,
              "paintdata":false,
              "partprice":false,
              "randpaint":false,
              "scrapval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Add Car To Garage (PINK SLIPS)",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "number",
              "baseprice",
              null,
              ""
            ],
            [
              "in",
              "number",
              "partprice",
              null,
              ""
            ],
            [
              "in",
              "number",
              "scrapval",
              null,
              ""
            ],
            [
              "in",
              "string",
              "paintdata",
              null,
              ""
            ],
            [
              "in",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "randpaint",
              null,
              ""
            ]
          ],
          "pos":[
            -2314,
            -1070
          ],
          "type":"util/customLua"
        },
        "565":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            824,
            1755
          ],
          "commentText":"",
          "commentTitle":"Police & Tickets",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1750,
            210
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "566":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -1474,
            -202
          ],
          "type":"util/customLua"
        },
        "567":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local namelib = self.pinIn.nlib.value\nlocal ticket = \"Utah State Police Ticket\\n--------------------\\nInfractions\\n\"\nlocal cost = 0\nlocal costtable = self.pinIn.cdata.value\nlocal olist = self.pinIn.olist.value\nlocal walking = self.mgr.variables:get(\"playerIsWalking\")\n\nfor k,v in pairs(olist) do\nticket = ticket .. (namelib[v] or v) .. \": $\" .. string.format(\"%.2f\",costtable[v] or 69) .. \"\\n\"\ncost = cost + (costtable[v] or 69)\nend\n\nif walking ~= 1 then\nticket = ticket .. \"\\nTotal: $\" .. string.format(\"%.2f\", cost) .. \"\\n\" \nticket = ticket .. \"\\nThe corrupt cops want you to pay in cash or they'll impound your vehicle!\"\nelse\nticket = \"Cops decided to let it slide this time.\"\ncost = 0\nend\n\nself.pinOut.tkttxt.value = ticket\nself.pinOut.cost.value = cost\n\nwriteFile(\"beamLR/policeTicket\", ticket)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cdata":false,
              "flow":false,
              "nlib":false,
              "olist":false
            },
            "p_out":{
              "cost":false,
              "flow":false,
              "tkttxt":false
            }
          },
          "name":"Update Ticket",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "olist",
              null,
              ""
            ],
            [
              "in",
              "table",
              "cdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "out",
              "string",
              "tkttxt",
              null,
              ""
            ],
            [
              "in",
              "table",
              "nlib",
              null,
              ""
            ]
          ],
          "pos":[
            2404,
            1296
          ],
          "type":"util/customLua"
        },
        "568":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -1642,
            -132
          ],
          "type":"scene/getPlayerVehicle"
        },
        "569":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "DX":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -2090,
            -1042
          ],
          "type":"util/customLua"
        },
        "570":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1922,
            -1042
          ],
          "type":"types/genericValue"
        },
        "571":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -1922,
            -888
          ],
          "type":"util/customLua"
        },
        "572":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"outstandingTicket"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1998,
            778
          ],
          "type":"types/genericValue"
        },
        "573":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            1796,
            1702
          ],
          "type":"logic/compare"
        },
        "574":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            2188,
            1702
          ],
          "type":"logic/compare"
        },
        "575":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1992,
            1702
          ],
          "type":"types/genericValue"
        },
        "576":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -326,
            2332
          ],
          "type":"logic/once"
        },
        "577":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            2412,
            1604
          ],
          "type":"util/customLua"
        },
        "578":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1796,
            1870
          ],
          "type":"types/genericValue"
        },
        "579":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            1950,
            1870
          ],
          "type":"util/customLua"
        },
        "580":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4938,
            -104
          ],
          "type":"types/genericValue"
        },
        "581":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2180,
            456
          ],
          "type":"types/genericValue"
        },
        "582":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1852,
            1184
          ],
          "type":"util/customLua"
        },
        "583":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketText"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2180,
            358
          ],
          "type":"types/genericValue"
        },
        "584":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1942,
            540
          ],
          "type":"types/genericValue"
        },
        "585":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":false
            }
          },
          "opSymbol":"==",
          "pos":[
            1774,
            652
          ],
          "type":"logic/compare"
        },
        "586":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1992,
            260
          ],
          "type":"logic/flowSwitch"
        },
        "587":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2012,
            344
          ],
          "type":"logic/once"
        },
        "588":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -1656,
            1128
          ],
          "type":"logic/compare"
        },
        "589":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"trafficEnableFlag"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1852,
            1282
          ],
          "type":"types/genericValue"
        },
        "590":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            1030
          ],
          "type":"logic/once"
        },
        "591":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":false
            }
          },
          "opSymbol":"==",
          "pos":[
            -1256,
            1142
          ],
          "type":"logic/compare"
        },
        "592":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            250,
            58
          ],
          "commentText":"",
          "commentTitle":"Stat UI End Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            2296,
            868
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "593":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2286,
            1870
          ],
          "type":"types/genericValue"
        },
        "594":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2082,
            1366
          ],
          "type":"logic/branch"
        },
        "595":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1202,
            323
          ],
          "commentText":"Used by pink slips and impounding mechanic, removes player vehicle from garage\\nand sends player into walk mode before despawning the vehicle. Does not pay money\\nlike selling mechanic.",
          "commentTitle":"BeamLR Vehicle Delete",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2940,
            -1484
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "596":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2390,
            680
          ],
          "type":"vehicle/freeze"
        },
        "597":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve\nlocal fullpath = self.pinIn.filename.value\nve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" )\nve:queueLuaCommand(\"beamstate.save(\\\"\" .. fullpath .. \"\\\")\" ) -- Might fix wheels falling off bug\nself.pinOut.dbgval.value = fullpath\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "dbgval":false,
              "flow":false
            }
          },
          "name":"Save Beamstate To File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dbgval",
              null,
              ""
            ]
          ],
          "pos":[
            2880,
            1912
          ],
          "type":"util/customLua"
        },
        "598":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":false
            }
          },
          "opSymbol":"~=",
          "pos":[
            2180,
            722
          ],
          "type":"logic/compare"
        },
        "599":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2404,
            750
          ],
          "type":"types/genericValue"
        },
        "600":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.dmg.value\nextensions.mechDamageLoader.saveDamageToFile(self.pinIn.file.value, dtable)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dmg":false,
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Mech Damage",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "dmg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            3398,
            2066
          ],
          "type":"util/customLua"
        },
        "601":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            2838,
            1576
          ],
          "type":"util/customLua"
        },
        "602":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":false,
              "config":true,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":false,
              "name":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "string",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ]
          ],
          "pos":[
            2866,
            1744
          ],
          "type":"util/customLua"
        },
        "603":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2656,
            1940
          ],
          "type":"util/customLua"
        },
        "604":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.data.value = jsonReadFile(self.pinIn.file.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "data":false,
              "flow":false
            }
          },
          "name":"Load JSON Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "out",
              "table",
              "data",
              null,
              ""
            ]
          ],
          "pos":[
            -1306,
            652
          ],
          "type":"util/customLua"
        },
        "605":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3174,
            -3324
          ],
          "type":"logic/branch"
        },
        "606":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2642,
            1590
          ],
          "type":"types/genericValue"
        },
        "607":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1858,
            946
          ],
          "type":"logic/flowSwitch"
        },
        "608":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":false,
              "arrest":false,
              "arrestValue":true,
              "collisions":true,
              "evade":false,
              "evadeValue":true,
              "flow":false,
              "mode":false,
              "offenses":false,
              "offensesList":false,
              "policeWrecks":true,
              "roadblocks":true,
              "score":false,
              "sightValue":false,
              "timeElapsed":false,
              "uniqueOffenses":true
            }
          },
          "pos":[
            1774,
            372
          ],
          "type":"gameplay/traffic/pursuitInformation"
        },
        "609":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local mode = self.pinIn.mode.value or 0\nlocal score = self.pinIn.score.value\nlocal sight = self.pinIn.sight.value\nlocal offenses = self.pinIn.offenses.value\nlocal olist = self.pinIn.olist.value\nlocal time = self.pinIn.time.value\nlocal topay = self.pinIn.gottkt.value\nlocal tickettxt = self.pinIn.tkttxt.value\nlocal viewTicket = false\nlocal uiactive = false\nlocal cost = self.pinIn.tktcost.value\n\nlocal txt = \"\"\nlocal btntxt = \"\"\n\nif mode == 0 then\n\nif topay > 0 then\ntxt = self.pinIn.tkttxt.value\nviewTicket=true\nif cost > 0 then\nbtntxt = \"Pay Ticket (\" .. string.format(\"$%.2f\", cost) .. \")\"\nelse\nbtntxt = \"Close Menu\"\nend\nuiactive = true\nelse\ntxt = \"Not Being Chased\"\nbtntxt = \"Close Menu\"\nuiactive = false\nend\n\nelseif mode >= 1 then\ntxt = \"Police! Stop Right Now!\\n\"\ntxt = txt .. \"Wanted Level : \" .. mode .. \"/3\\n\"\ntxt = txt .. \"Score : \" .. string.format(\"%.2f\",score) .. \"\\n\"\ntxt = txt .. \"Visibility : \" .. string.format(\"%.2f\",sight*100) .. \"%%\\n\"\ntxt = txt .. \"Time : \" .. string.format(\"%.2f\", time) .. \"\\n\"\ntxt = txt .. \"Offenses : \\n\"\n\nfor k,v in pairs(olist) do\ntxt = txt .. k .. \" - \" .. v .. \"\\n\"\nend\nuiactive = true\n\nelseif mode == -1 then\ntxt = \"Busted!\"\nuiactive = true\n\nend\n\nself.pinOut.text.value = txt\nself.pinOut.btntxt.value = btntxt\nself.pinOut.oticket.value = viewTicket\nself.pinOut.uiactive.value = uiactive"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gottkt":false,
              "mode":false,
              "offenses":false,
              "olist":false,
              "score":false,
              "sight":false,
              "time":false,
              "tktcost":false,
              "tkttxt":false
            },
            "p_out":{
              "btntxt":false,
              "flow":false,
              "oticket":false,
              "text":false,
              "uiactive":false
            }
          },
          "name":"Police Pursuit UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "mode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "score",
              null,
              ""
            ],
            [
              "in",
              "number",
              "sight",
              null,
              ""
            ],
            [
              "in",
              "number",
              "offenses",
              null,
              ""
            ],
            [
              "in",
              "table",
              "olist",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gottkt",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "out",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "string",
              "btntxt",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tktcost",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkttxt",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "oticket",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "uiactive",
              null,
              ""
            ]
          ],
          "pos":[
            2348,
            372
          ],
          "type":"util/customLua"
        },
        "610":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Police Info"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            1942,
            848
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "611":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"cops"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1774,
            904
          ],
          "type":"util/customLua"
        },
        "612":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1810,
            1548
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "613":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1802,
            1100
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "614":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2642,
            1814
          ],
          "type":"util/customLua"
        },
        "615":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            2628,
            1730
          ],
          "type":"scene/getPlayerVehicle"
        },
        "616":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3888,
            1856
          ],
          "type":"util/customLua"
        },
        "617":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3874,
            1926
          ],
          "type":"vehicle/removeVehicle"
        },
        "618":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = {}\ndtable[\"engine\"] = {}\ndtable[\"powertrain\"] = {}\ndtable[\"wheels\"] = {}\n\ntable.insert(dtable[\"engine\"], \"engineReducedTorque\")\ntable.insert(dtable[\"engine\"], \"engineDisabled\")\ntable.insert(dtable[\"engine\"], \"engineLockedUp\")\ntable.insert(dtable[\"engine\"], \"engineIsHydrolocking\")\ntable.insert(dtable[\"engine\"], \"engineHydrolocked\")\ntable.insert(dtable[\"engine\"], \"overRevDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"mildOverrevDamage\")\ntable.insert(dtable[\"engine\"], \"overTorqueDanger\")\ntable.insert(dtable[\"engine\"], \"catastrophicOverTorqueDamage\")\ntable.insert(dtable[\"engine\"], \"impactDamage\")\ntable.insert(dtable[\"engine\"], \"oilpanLeak\")\ntable.insert(dtable[\"engine\"], \"oilRadiatorLeak\")\ntable.insert(dtable[\"engine\"], \"headGasketDamaged\")\ntable.insert(dtable[\"engine\"], \"pistonRingsDamaged\")\ntable.insert(dtable[\"engine\"], \"rodBearingsDamaged\")\ntable.insert(dtable[\"engine\"], \"blockMelted\")\ntable.insert(dtable[\"engine\"], \"oilHot\")\ntable.insert(dtable[\"engine\"], \"cylinderWallsMelted\")\ntable.insert(dtable[\"engine\"], \"radiatorLeak\")\ntable.insert(dtable[\"engine\"], \"coolantHot\")\ntable.insert(dtable[\"engine\"], \"oilLevelCritical\")\ntable.insert(dtable[\"engine\"], \"oilStarvation\")\ntable.insert(dtable[\"engine\"], \"oilLevelTooHigh\")\ntable.insert(dtable[\"engine\"], \"exhaustBroken\")\n\ntable.insert(dtable[\"powertrain\"], \"mainEngine\")\ntable.insert(dtable[\"powertrain\"], \"torqueConverter\")\ntable.insert(dtable[\"powertrain\"], \"gearbox\")\ntable.insert(dtable[\"powertrain\"], \"rangebox\")\ntable.insert(dtable[\"powertrain\"], \"transfercase\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorR\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft\")\ntable.insert(dtable[\"powertrain\"], \"differential_R\")\ntable.insert(dtable[\"powertrain\"], \"transfercase_F\")\ntable.insert(dtable[\"powertrain\"], \"driveshaft_F\")\ntable.insert(dtable[\"powertrain\"], \"torsionReactorF\")\ntable.insert(dtable[\"powertrain\"], \"differential_F\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFR\")\ntable.insert(dtable[\"powertrain\"], \"halfshaftFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleFR\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRL\")\ntable.insert(dtable[\"powertrain\"], \"wheelaxleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRR\")\ntable.insert(dtable[\"powertrain\"], \"spindleRL\")\ntable.insert(dtable[\"powertrain\"], \"clutch\")\n\n\n-- Standard 4 wheel vehicles\ntable.insert(dtable[\"wheels\"], \"FR\")\ntable.insert(dtable[\"wheels\"], \"brakeFR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFR\")\ntable.insert(dtable[\"wheels\"], \"tireFR\")\n\ntable.insert(dtable[\"wheels\"], \"FL\")\ntable.insert(dtable[\"wheels\"], \"brakeFL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatFL\")\ntable.insert(dtable[\"wheels\"], \"tireFL\")\n\ntable.insert(dtable[\"wheels\"], \"RR\")\ntable.insert(dtable[\"wheels\"], \"brakeRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR\")\ntable.insert(dtable[\"wheels\"], \"tireRR\")\n\ntable.insert(dtable[\"wheels\"], \"RL\")\ntable.insert(dtable[\"wheels\"], \"brakeRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL\")\ntable.insert(dtable[\"wheels\"], \"tireRL\")\n\n--Pigeon\ntable.insert(dtable[\"wheels\"], \"F\")\ntable.insert(dtable[\"wheels\"], \"brakeF\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatF\")\ntable.insert(dtable[\"wheels\"], \"tireF\")\n\n--Gambler covet\ntable.insert(dtable[\"wheels\"], \"R\")\ntable.insert(dtable[\"wheels\"], \"brakeR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatR\")\ntable.insert(dtable[\"wheels\"], \"tireR\")\n\n--Gambler bolide\ntable.insert(dtable[\"wheels\"], \"RRR\")\ntable.insert(dtable[\"wheels\"], \"brakeRRR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRR\")\ntable.insert(dtable[\"wheels\"], \"tireRRR\")\n\ntable.insert(dtable[\"wheels\"], \"RRL\")\ntable.insert(dtable[\"wheels\"], \"brakeRRL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRRL\")\ntable.insert(dtable[\"wheels\"], \"tireRRL\")\n\n--T series\ntable.insert(dtable[\"wheels\"], \"DW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1R\")\ntable.insert(dtable[\"wheels\"], \"tireDW1R\")\n\ntable.insert(dtable[\"wheels\"], \"DW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1L\")\ntable.insert(dtable[\"wheels\"], \"tireDW1L\")\n\ntable.insert(dtable[\"wheels\"], \"DW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW1RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW1LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW1LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW1LL\")\n\ntable.insert(dtable[\"wheels\"], \"DW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2R\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2R\")\ntable.insert(dtable[\"wheels\"], \"tireDW2R\")\n\ntable.insert(dtable[\"wheels\"], \"DW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2L\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2L\")\ntable.insert(dtable[\"wheels\"], \"tireDW2L\")\n\ntable.insert(dtable[\"wheels\"], \"DW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2RR\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2RR\")\ntable.insert(dtable[\"wheels\"], \"tireDW2RR\")\n\ntable.insert(dtable[\"wheels\"], \"DW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeDW2LL\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatDW2LL\")\ntable.insert(dtable[\"wheels\"], \"tireDW2LL\")\n\n--Dually pickup\ntable.insert(dtable[\"wheels\"], \"RR2\")\ntable.insert(dtable[\"wheels\"], \"brakeRR2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRR2\")\ntable.insert(dtable[\"wheels\"], \"tireRR2\")\n\ntable.insert(dtable[\"wheels\"], \"RL2\")\ntable.insert(dtable[\"wheels\"], \"brakeRL2\")\ntable.insert(dtable[\"wheels\"], \"brakeOverHeatRL2\")\ntable.insert(dtable[\"wheels\"], \"tireRL2\")\n\n\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Mech Damage Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            3118,
            1758
          ],
          "type":"util/customLua"
        },
        "619":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devices = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal cfid = \"\"\nlocal cfidval = 0\nlocal cfidb = \"\"\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\n-- Loop to fetch damage values and add them to table\n\nfor k,v in pairs(devices) do\ndtable[k] = {}\nfor _,dev in pairs(devices[k]) do\n\ntoFetch = \"damageTracker.getDamage('\" .. k .. \"', '\" .. dev .. \"')\"\ncfid = \"dmgtrk\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n\nif dev == \"engineReducedTorque\" or dev == \"mildOverrevDamage\" or dev == \"catastrophicOverTorqueDamage\" then\ncfidb = cfid .. \"B\"\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\n\n-- Now fetching extra values in some cases\nif dev == \"engineReducedTorque\" or dev == \"mildOverrevDamage\" then\ntoFetch = \"powertrain.getDevice('mainEngine').outputTorqueState\"\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfidb ..\"'))\" \nve:queueLuaCommand(vecmd)\ndtable[k][dev] = tostring(extensions.vluaFetchModule.getVal(cfid)) .. \",\" .. tostring(extensions.vluaFetchModule.getVal(cfidb))\nelseif dev == \"catastrophicOverTorqueDamage\" then\ntoFetch = \"powertrain.getDevice('mainEngine').overTorqueDamage\"\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfidb ..\"'))\" \nve:queueLuaCommand(vecmd)\ndtable[k][dev] = tostring(extensions.vluaFetchModule.getVal(cfid)) .. \",\" .. tostring(extensions.vluaFetchModule.getVal(cfidb))\nelse\ndtable[k][dev] = extensions.vluaFetchModule.getVal(cfid)\nend\n\n\ncfidval = cfidval + 1\nend\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.damageData.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "uid":{
              "type":"string",
              "value":"impmech"
            }
          },
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":true,
              "veid":false
            },
            "p_out":{
              "damageData":false,
              "flow":false,
              "ready":true
            }
          },
          "name":"Detailed Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "damageData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ]
          ],
          "pos":[
            3510,
            1772
          ],
          "type":"util/customLua"
        },
        "620":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2384,
            428
          ],
          "type":"logic/compare"
        },
        "621":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1510,
            744
          ],
          "commentText":"",
          "commentTitle":"Impound",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            2618,
            1540
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "622":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3888,
            2024
          ],
          "type":"types/genericValue"
        },
        "623":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "carUsed":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":false,
              "flow":false,
              "health":true,
              "money":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            3398,
            2178
          ],
          "type":"util/customLua"
        },
        "624":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            3804,
            92
          ],
          "type":"logic/compare"
        },
        "625":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            4014,
            204
          ],
          "type":"logic/compare"
        },
        "626":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            3804,
            162
          ],
          "type":"types/genericValue"
        },
        "627":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2398,
            22
          ],
          "type":"logic/branch"
        },
        "628":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.key.value] = self.pinIn.val.value\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"impoundval"
            },
            "val":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            4112,
            -48
          ],
          "type":"util/customLua"
        },
        "629":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            4106,
            106
          ],
          "type":"util/customLua"
        },
        "630":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.tkey.value] = self.pinIn.tval.value or 0\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nprint(ndata)\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tkey":{
              "type":"string",
              "value":"impoundval"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "tkey":true,
              "tval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            3034,
            1576
          ],
          "type":"util/customLua"
        },
        "631":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            4742,
            -104
          ],
          "type":"util/customLua"
        },
        "632":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2642,
            2178
          ],
          "type":"logic/flowSwitch"
        },
        "633":{
          "data":{
            "name":"BeamNGTrigger_HighwayDragFinish"
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "name":false
            },
            "p_out":{
              "objID":false
            }
          },
          "pos":[
            -1970,
            162
          ],
          "type":"scene/idByName"
        },
        "634":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3048,
            2178
          ],
          "type":"logic/frameDelay"
        },
        "635":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2656,
            2069
          ],
          "type":"logic/bundle"
        },
        "636":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1586,
            498
          ],
          "type":"types/genericValue"
        },
        "637":{
          "customName":"Was Walking?",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            1004,
            36
          ],
          "type":"logic/compare"
        },
        "638":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3118,
            2038
          ],
          "type":"logic/flowSwitch"
        },
        "639":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1270,
            106
          ],
          "type":"util/customLua"
        },
        "640":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1200,
            50
          ],
          "type":"util/customLua"
        },
        "641":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2496,
            -1252
          ],
          "type":"logic/branch"
        },
        "642":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":90
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3398,
            1940
          ],
          "type":"logic/frameDelay"
        },
        "643":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local currentObj = scenetree.findObjectById(self.pinIn.id.value)\nif currentObj then\ncurrentObj:delete()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            4728,
            498
          ],
          "type":"util/customLua"
        },
        "644":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4904,
            470
          ],
          "type":"logic/frameDelay"
        },
        "645":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3650,
            1940
          ],
          "type":"logic/once"
        },
        "646":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            604,
            631
          ],
          "commentText":"",
          "commentTitle":"Rep And Part Rewards",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3588,
            -1414
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "647":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3560,
            -1375
          ],
          "type":"logic/bundle"
        },
        "648":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal points = self.pinIn.points.value\nlocal limits = self.pinIn.limits.value\nlocal id = self.pinIn.vehId.value\nlocal laps = self.pinIn.laps.value\nlocal mode = self.pinIn.speedMode.value\nlocal lane = self.pinIn.useLanes.value\nlocal risk = self.pinIn.risk.value\nlocal avoid = self.pinIn.avoid.value == 1\nlocal speed = self.pinIn.routeSpd.value\nlocal count = #points\nlocal codrivability = self.pinIn.codrivability.value\nlocal wpspd = self.pinIn.wpspd.value\n\nlocal wtable = extensions.blrutils.ssplit(points, \",\")\nlocal spdtable = {}\nlocal spdsplit = {}\nlocal spdtfirst = false\n\nlocal cwp = \"\"\nlocal clim = 0\n\nlocal args = \"{\"\n\nif laps ~= nil then\nargs = args .. \"noOfLaps = \" .. laps .. \",\"\nend\n\nif lane ~= nil then\nargs = args .. \"driveInLane = \" .. extensions.blrutils.boolToText(lane, \"'on'\", \"'off'\") .. \",\"\nend\n\nif avoid ~= nil then\nargs = args .. \"avoidCars = \" .. extensions.blrutils.boolToText(avoid, \"'on'\", \"'off'\") .. \",\"\nend\n\nif risk ~= nil then\nargs = args .. \"aggression = \" .. risk .. \",\"\nend\n\nif speed ~= nil then\nargs = args .. \"routeSpeed = \" .. speed .. \",\"\nend\n\nif mode ~= nil then\nargs = args .. \"routeSpeedMode = '\" .. mode .. \"',\"\nend\n\nif wpspd ~= nil then\nspdtable = extensions.blrutils.ssplit(wpspd, \",\")\nspdtfirst = true\nargs = args .. \"wpSpeeds = {\"\nfor k,v in pairs(spdtable) do\nspdsplit = extensions.blrutils.ssplit(v, \":\")\nif not spdtfirst then \nargs = args .. \",\"\nelse\nspdtfirst = false\nend\nargs = args .. spdsplit[1] .. \"=\" .. tonumber(spdsplit[2])\nend\nargs = args .. \"},\"\nend\n\nargs = args .. \"wpTargetList = {\"\nfor k,v in ipairs(wtable) do\nargs = args .. \"'\" .. wtable[k] .. \"'\"\nif k ~= count then\nargs = args .. \",\"\nend\nend\nargs = args .. \"}\"\n\nif limits ~= nil then\nargs = args .. \",wpSpeeds = {\"\nfor k,v in ipairs(wtable) do\nargs = args .. wtable[k] .. \"=\" .. ltable[k] \nif k ~= count then\nargs = args .. \",\"\nend\nend\nargs = args .. \"}\"\nend\n\nargs = args .. \"}\"\n\nlocal veh = scenetree.findObjectById(self.pinIn.vehId.value)\n\nprint(args)\n\nif veh ~= nil then\nveh:queueLuaCommand(\"ai.setCutOffDrivability(\" .. codrivability .. \")\")\nveh:queueLuaCommand(\"ai.driveUsingPath(\" .. args .. \")\")\nend\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "codrivability":{
              "type":"number",
              "value":1
            },
            "laps":{
              "type":"number",
              "value":99
            },
            "routeSpd":{
              "type":"number",
              "value":111
            },
            "speedMode":{
              "type":"string",
              "value":"limit"
            },
            "useLanes":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "avoid":false,
              "codrivability":false,
              "flow":false,
              "laps":true,
              "limits":true,
              "points":false,
              "risk":false,
              "routeSpd":true,
              "speedMode":true,
              "useLanes":true,
              "vehId":false,
              "wpspd":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"AI Custom Path",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehId",
              null,
              ""
            ],
            [
              "in",
              "string",
              "points",
              null,
              ""
            ],
            [
              "in",
              "string",
              "limits",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "in",
              "string",
              "speedMode",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "useLanes",
              null,
              ""
            ],
            [
              "in",
              "number",
              "risk",
              null,
              ""
            ],
            [
              "in",
              "number",
              "routeSpd",
              null,
              ""
            ],
            [
              "in",
              "number",
              "avoid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "codrivability",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wpspd",
              null,
              ""
            ]
          ],
          "pos":[
            -928,
            -384
          ],
          "type":"util/customLua"
        },
        "649":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1614,
            120
          ],
          "type":"scene/singleMarker"
        },
        "650":{
          "alpha":1,
          "backgroundColor":[
            0.50196081399917602539,
            0.50196081399917602539,
            0.50196081399917602539,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"RESTORE GAS AFTER \\nINTEGRITY OTHERWISE\\nGAS VAL IS RESET",
          "commentTitle":"SINCE 0.26 NEED TO",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            1106,
            -1792
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "651":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3224,
            -636
          ],
          "type":"types/genericValue"
        },
        "652":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal trigs = self.pinIn.trigs.value\nlocal ways = self.pinIn.wps.value\nlocal cid = self.pinIn.current.value\nlocal lap = self.pinIn.clap.value\nlocal count = self.pinIn.cpc.value\nlocal laps = self.pinIn.laps.value\nlocal ttable = extensions.blrutils.ssplit(trigs, \",\")\nlocal wtable = extensions.blrutils.ssplit(ways, \",\")\nlocal ntg = \"\"\nlocal nwa = \"\"\nlocal nid = 0\nlocal nla = 0\nlocal finish = false\nlocal ftid = 0\nlocal followtrig = \"\"\nlocal showfollow = false\nlocal pstatus = self.pinIn.status.value or 0\nlocal lstrig = extensions.blrutils.blrvarGet(\"racelstrig\")\nlocal vid = self.pinIn.vid.value\nlocal ftime = 0\nlocal fspeed = 0\n\nif pstatus == -1 then\nnid = 1\nntg = ttable[nid]\nnla = 1\nfinish = false\nshowfollow = count > 1\nif showfollow then\nfollowtrig = ttable[2]\nend\n\nelse\n\nif cid == count then\nif lstrig > 0 then\nnid = lstrig\nelse\nnid = 1\nend\nntg = ttable[nid]\nnwa = wtable[nid]\nnla = lap + 1\nfinish = (laps == lap)\nif finish then\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\")then\nftime = extensions.blrutils.blrvarGet(\"raceElapsedTime\")\nfspeed = extensions.blrutils.getVehicleData(vid)[\"velocity\"]\nextensions.blrdragdisplay.setTime(\"right\", ftime)\nextensions.blrdragdisplay.setSpeed(\"right\", fspeed)\nextensions.blrdragdisplay.finishCamera(5)\nend\nend\nelse\nnid = cid + 1\nntg = ttable[nid]\nnwa = wtable[nid]\nnla = lap\nend\n\nif count <= 1 then\nshowfollow = false\nfollowtrig = \"none\"\nftid = -1\nelseif nid == count then\nif lstrig > 0 then\nftid = lstrig\nelse\nftid = 1\nend\nfollowtrig = ttable[ftid]\nshowfollow = (lap < laps)\nelse\nftid = nid + 1\nfollowtrig = ttable[ftid]\nshowfollow = true\nend\n\nend\n\nself.pinOut.nextTrig.value = ntg\nself.pinOut.nextWp.value = nwa\nself.pinOut.nextId.value = nid\nself.pinOut.newLap.value = nla\nself.pinOut.finished.value = finish\nself.pinOut.ftrig.value = followtrig\nself.pinOut.showft.value = showfollow\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "clap":false,
              "cpc":false,
              "current":false,
              "flow":false,
              "laps":false,
              "status":false,
              "trigs":false,
              "vid":false,
              "wps":false
            },
            "p_out":{
              "finished":false,
              "flow":false,
              "ftrig":false,
              "newLap":false,
              "nextId":false,
              "nextTrig":false,
              "nextWp":false,
              "showft":false
            }
          },
          "name":"Race Next CP",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ],
            [
              "in",
              "string",
              "trigs",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wps",
              null,
              ""
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "string",
              "nextTrig",
              null,
              ""
            ],
            [
              "out",
              "string",
              "nextWp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nextId",
              null,
              ""
            ],
            [
              "out",
              "number",
              "newLap",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clap",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "finished",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ftrig",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "showft",
              null,
              ""
            ],
            [
              "in",
              "number",
              "status",
              null,
              ""
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ]
          ],
          "pos":[
            -2608,
            22
          ],
          "type":"util/customLua"
        },
        "653":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1844,
            907
          ],
          "type":"logic/bundle"
        },
        "654":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>Checkpoint"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -1404,
            442
          ],
          "type":"audio/playOnce"
        },
        "655":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceRepReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3378,
            -1364
          ],
          "type":"types/genericValue"
        },
        "656":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            -3210,
            -1364
          ],
          "type":"logic/compare"
        },
        "657":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "on":false,
          "pos":[
            -1796,
            428
          ],
          "type":"logic/flowSwitch"
        },
        "658":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1418,
            8
          ],
          "type":"logic/flowSwitch"
        },
        "659":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1222,
            134
          ],
          "type":"logic/flowSwitch"
        },
        "660":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1586,
            274
          ],
          "type":"logic/flowSwitch"
        },
        "661":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1222,
            8
          ],
          "type":"logic/branch"
        },
        "662":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal extras = self.pinIn.extras.value\nlocal triggerExtras = {}\nlocal scalevals = {}\nlocal shopID = 0\nlocal priceScale = 1.5\nif extras and extras ~= \"\" then\nif FS:fileExists(extras) then\ntriggerExtras = extensions.blrutils.loadDataTable(self.pinIn.extras.value)\nif triggerExtras[\"shopID\"] and triggerExtras[\"scale\"] then\nshopID = tonumber(triggerExtras[\"shopID\"])\nscalevals = extensions.blrutils.ssplitnum(triggerExtras[\"scale\"], \",\")\npriceScale = extensions.blrutils.getPartShopPriceScale(shopID, scalevals[1], scalevals[2])\nend\nend\nend\n\nextensions.customGuiStream.sendDataToUI(\"shopPriceScale\", priceScale)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "extras":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Price Scale",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            -1670,
            1688
          ],
          "type":"util/customLua"
        },
        "663":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"~=",
          "pos":[
            -1796,
            302
          ],
          "type":"logic/compare"
        },
        "664":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -620,
            1800
          ],
          "type":"logic/once"
        },
        "665":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -858,
            1702
          ],
          "type":"logic/frameDelay"
        },
        "666":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.forceSetFlag(k,v)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"postEditActionsQueued"
            },
            "val":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -634,
            1590
          ],
          "type":"util/customLua"
        },
        "667":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            726,
            1013
          ],
          "commentText":"Fixes weird bug with orbit camera using delayed call to restore cam and\\nalso restores gas value after part edit.\\nupdated for odometer & integrity\\nworks with tuning vars apply\\n",
          "commentTitle":"Post Part Edit Actions",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1120,
            1554
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "668":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"pgas"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -962,
            1856
          ],
          "type":"util/customLua"
        },
        "669":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1642,
            1744
          ],
          "type":"types/genericValue"
        },
        "670":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -872,
            1814
          ],
          "type":"scene/getPlayerVehicle"
        },
        "671":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value or 0\nlocal key = self.pinIn.key.value\nextensions.customGuiStream.sendDataToUI(key,val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerDamage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Value To UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -1026,
            -3674
          ],
          "type":"util/customLua"
        },
        "672":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"~=",
          "pos":[
            -1586,
            -3562
          ],
          "type":"logic/compare"
        },
        "673":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"uiRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1586,
            -3674
          ],
          "type":"types/genericValue"
        },
        "674":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            810,
            351
          ],
          "commentText":"Sends player damage to UI for garage menu.\\nAlso deals with UI Init Request to send back\\npart list and damage cost after UI reset \\n(happens when player hits escape)",
          "commentTitle":"Player Damage UI Sync & UI INIT REQ PROCESS",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1610,
            -3794
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "675":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3076,
            960
          ],
          "type":"logic/flowSwitch"
        },
        "676":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3196,
            1002
          ],
          "type":"logic/branch"
        },
        "677":{
          "customName":"Disable Walking Injury",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"~=",
          "pos":[
            108,
            1450
          ],
          "type":"logic/compare"
        },
        "678":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.mechDamageLoader.getIntegrityDevices()\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Integrity Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            942,
            862
          ],
          "type":"util/customLua"
        },
        "679":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -319,
            2822
          ],
          "type":"scene/getPlayerVehicle"
        },
        "680":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -312,
            1618
          ],
          "type":"logic/branch"
        },
        "681":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceLeague"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3700,
            -2092
          ],
          "type":"types/genericValue"
        },
        "682":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local club = self.pinIn.club.value\nself.pinOut.folder.value = \"beamLR/races/\" .. club .. \"/\" .. self.pinIn.league.value .. \"/\"\nself.pinOut.progress.value = \"beamLR/races/\" .. club .. \"/progress\""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "club":false,
              "flow":false,
              "league":false
            },
            "p_out":{
              "flow":false,
              "folder":false,
              "progress":false
            }
          },
          "name":"Get Race League",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "out",
              "string",
              "folder",
              null,
              ""
            ],
            [
              "in",
              "string",
              "club",
              null,
              ""
            ],
            [
              "out",
              "string",
              "progress",
              null,
              ""
            ]
          ],
          "pos":[
            -3728,
            -1966
          ],
          "type":"util/customLua"
        },
        "683":{
          "data":{
            "aboveSpacing":10,
            "belowSpacing":10
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3468,
            -62
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "684":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local folder = self.pinIn.folder.value\nlocal rtable = {}\nlocal count = #FS:findFiles(folder, \"*\", 0)\nself.pinOut.raceCount.value = count\nfor i=0,count-1 do\nrtable[i] = \"race\" .. i\nend\nself.pinOut.races.value = rtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "folder":false
            },
            "p_out":{
              "flow":false,
              "raceCount":false,
              "races":false
            }
          },
          "name":"Race League Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "raceCount",
              null,
              ""
            ],
            [
              "out",
              "table",
              "races",
              null,
              ""
            ],
            [
              "in",
              "string",
              "folder",
              null,
              ""
            ]
          ],
          "pos":[
            -3728,
            -1812
          ],
          "type":"util/customLua"
        },
        "685":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.data.value\nlocal league = self.pinIn.league.value\nlocal pstring = dtable[league]\n\nlocal count = self.pinIn.count.value\nlocal races = self.pinIn.races.value\n\nlocal prog = {}\nlocal remain = {}\n\nlocal rcount = 0\nlocal pcount = 0\n\nif pstring ~= \"0\" then\nlocal ptable = extensions.blrutils.ssplit(pstring:sub(1,#pstring-1), \",\")\n\nfor k,v in pairs(ptable) do\nprog[v] = true\npcount= pcount + 1\nend\n\nfor k,v in pairs(races) do\nif not prog[v] then\nremain[rcount] = v\nrcount = rcount + 1\nend\nend\n\nelse\nremain = races\nrcount = count\nend\n\nself.pinOut.prog.value = prog\nself.pinOut.remain.value = remain\nself.pinOut.rcount.value = rcount\nself.pinOut.rrange.value = rcount -1"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "count":false,
              "data":false,
              "flow":false,
              "league":false,
              "races":false
            },
            "p_out":{
              "flow":false,
              "prog":false,
              "rcount":false,
              "remain":false,
              "rrange":false
            }
          },
          "name":"Get League Progress",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "table",
              "prog",
              null,
              ""
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ],
            [
              "out",
              "table",
              "remain",
              null,
              ""
            ],
            [
              "out",
              "number",
              "rcount",
              null,
              ""
            ],
            [
              "in",
              "table",
              "races",
              null,
              ""
            ],
            [
              "out",
              "number",
              "rrange",
              null,
              ""
            ]
          ],
          "pos":[
            -3490,
            -1882
          ],
          "type":"util/customLua"
        },
        "686":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -3490,
            -1980
          ],
          "type":"util/customLua"
        },
        "687":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            626,
            -1406
          ],
          "type":"util/customLua"
        },
        "688":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devtable = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal cfid = \"\"\nlocal cfidval = 0\n\nlocal itmd = \"\"\nlocal itsd = \"\"\nlocal splitres = {}\n\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\nfor _,v in pairs(devtable) do\n\nif v == \"odometer\" then \ntoFetch = \"electrics.values.odometer\"\nelseif string.match(v,\"integrity\") then\nsplitres = extensions.blrutils.ssplit(v, \".\")\nitmd = splitres[2]\nitsd = splitres[3]\nif itsd ~= nil then\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition('\" .. itsd .. \"')\"\nelse\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition()\"\nend\nend\n\n\ncfid = \"integ\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[v] = extensions.vluaFetchModule.getVal(cfid)\n\n\ncfidval = cfidval + 1\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.integrityData.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "uid":{
              "type":"string",
              "value":"persiteg"
            }
          },
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "integrityData":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Integrity",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "integrityData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ]
          ],
          "pos":[
            976,
            904
          ],
          "type":"util/customLua"
        },
        "689":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "value":false
            },
            "p_out":{
              "flow":false,
              "value":false
            }
          },
          "pos":[
            -3210,
            -1896
          ],
          "type":"util/getTableValueByKey"
        },
        "690":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            290,
            -2092
          ],
          "type":"util/customLua"
        },
        "691":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.fullpath.value = self.pinIn.folder.value .. self.pinIn.file.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "folder":false
            },
            "p_out":{
              "flow":false,
              "fullpath":false
            }
          },
          "name":"Get File In Folder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "folder",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fullpath",
              null,
              ""
            ]
          ],
          "pos":[
            -3266,
            -1770
          ],
          "type":"util/customLua"
        },
        "692":{
          "alpha":1,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"race victory happens. can\\nalso send progress data to\\npre-race UI to show league\\nand how many races left to\\nwin before next league",
          "commentTitle":"Should be updated when",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -3192,
            -2212
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "693":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal mass = self.pinIn.mass.value\nif mass == 0 then mass = 0.000000000001 end\nif extensions.blrutils.nitrousCheck(veid) then\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(string.format(\"energyStorage.getStorage(\\\"mainBottle\\\"):setRemainingMass(%.12f)\", mass))\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set N2O",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ]
          ],
          "pos":[
            5302,
            456
          ],
          "type":"util/customLua"
        },
        "694":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local rcount = self.pinIn.rcount.value\nlocal league = self.pinIn.league.value\nlocal prog = self.pinIn.prog.value\nlocal full = self.pinIn.full.value\nlocal next = \"\"\nlocal nps = \"\"\nlocal crace = self.pinIn.crace.value\n\nprog[crace] = true\n\nfor k,v in pairs(prog) do\nnps = nps .. k .. \",\"\nend\n\nif league ~= \"hero\" then\nfull[league] = nps\nend\n\nif rcount == 1 then\nif league == \"bronze\" then\nnext = \"silver\"\nelseif league == \"silver\" then\nnext = \"gold\"\nelseif league == \"gold\" then\nnext = \"hero\"\nelse\nnext = \"hero\"\nend\nelse\nnext = league\nend\n\nfull[\"current\"] = next\n\nself.pinOut.league.value = next\nself.pinOut.newfull.value = full\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "crace":false,
              "flow":false,
              "full":false,
              "league":false,
              "prog":false,
              "rcount":false
            },
            "p_out":{
              "flow":false,
              "league":false,
              "newfull":false
            }
          },
          "name":"Update League Progress",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "rcount",
              null,
              ""
            ],
            [
              "out",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "table",
              "prog",
              null,
              ""
            ],
            [
              "in",
              "table",
              "full",
              null,
              ""
            ],
            [
              "in",
              "string",
              "crace",
              null,
              ""
            ],
            [
              "out",
              "table",
              "newfull",
              null,
              ""
            ]
          ],
          "pos":[
            -508,
            -398
          ],
          "type":"util/customLua"
        },
        "695":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            892,
            -2288
          ],
          "type":"util/customLua"
        },
        "696":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = \"\"\nlocal dtable = self.pinIn.data.value\nfor k,v in pairs(dtable) do\nfiledata = filedata .. k .. \"=\" .. v .. \"\\n\"\nend\nwriteFile(self.pinIn.filename.value, filedata)\n\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Table To File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -298,
            -370
          ],
          "type":"util/customLua"
        },
        "697":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.mechDamageLoader.getIntegrityDevices()\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Integrity Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            276,
            -1882
          ],
          "type":"util/customLua"
        },
        "698":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devtable = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal cfid = \"\"\nlocal cfidval = 0\n\nlocal itmd = \"\"\nlocal itsd = \"\"\nlocal splitres = {}\n\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\nfor _,v in pairs(devtable) do\n\nif v == \"odometer\" then \ntoFetch = \"electrics.values.odometer\"\nelseif string.match(v,\"integrity\") then\nsplitres = extensions.blrutils.ssplit(v, \".\")\nitmd = splitres[2]\nitsd = splitres[3]\nif itsd ~= nil then\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition('\" .. itsd .. \"')\"\nelse\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition()\"\nend\nend\n\n\ncfid = \"integ\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[v] = extensions.vluaFetchModule.getVal(cfid)\n\n\ncfidval = cfidval + 1\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.integrityData.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "uid":{
              "type":"string",
              "value":"repair"
            }
          },
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "integrityData":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Integrity",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "integrityData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ]
          ],
          "pos":[
            486,
            -2064
          ],
          "type":"util/customLua"
        },
        "699":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceLeague"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -276,
            -272
          ],
          "type":"types/genericValue"
        },
        "700":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2958,
            -2456
          ],
          "type":"logic/flowSwitch"
        },
        "701":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":true,
              "walk":false
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            4490,
            -1042
          ],
          "type":"util/customLua"
        },
        "702":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2706,
            -2596
          ],
          "type":"logic/compare"
        },
        "703":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2580,
            -2649
          ],
          "type":"logic/bundle"
        },
        "704":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"leagueProgressUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2916,
            -2596
          ],
          "type":"types/genericValue"
        },
        "705":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            600,
            334
          ],
          "commentText":"Gotta reload league progress\\ndata tables for next race.",
          "commentTitle":"League Progress Updated",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2982,
            -2688
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "706":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -984,
            -1448
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "707":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal league = self.pinIn.league.value or \"none\"\nlocal lcount = self.pinIn.lcount.value or 0\nlocal rcount = self.pinIn.rcount.value or 0\nlocal club = self.pinIn.club.value or \"none\"\nlocal hours = extensions.blrutils.ssplitnum(self.pinIn.hours.value, \",\")\nlocal active = extensions.blrutils.timeDetector(hours[1], hours[2])\nlocal starthour = extensions.blrutils.hoursTimeString(hours[1])\nlocal endhour = extensions.blrutils.hoursTimeString(hours[2])\n\nlocal txt = \"\"\ntxt = txt .. \"Club: \" .. club .. \"\\n\"\ntxt = txt .. \"League: \" .. league .. \"\\n\"\nif league == \"hero\" then\ntxt = txt .. \"Race club completed!\"\nelse\ntxt = txt .. \"Completed \" .. lcount-rcount .. \"/\" .. lcount .. \" races\"\nend\n\nif not active then\ntxt = txt .. \"\\n\\nClub not currently racing!\\nHours: \" .. starthour .. \" to \" .. endhour \nend\n\nself.pinOut.text.value = txt\nself.pinOut.active.value = active"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "club":false,
              "flow":false,
              "hours":false,
              "lcount":false,
              "league":false,
              "rcount":false
            },
            "p_out":{
              "active":false,
              "flow":false,
              "text":false
            }
          },
          "name":"League Progress Text",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "string",
              "club",
              null,
              ""
            ],
            [
              "in",
              "number",
              "lcount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rcount",
              null,
              ""
            ],
            [
              "out",
              "string",
              "text",
              null,
              ""
            ],
            [
              "in",
              "string",
              "hours",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "active",
              null,
              ""
            ]
          ],
          "pos":[
            -1222,
            -1476
          ],
          "type":"util/customLua"
        },
        "708":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -284,
            -1655
          ],
          "type":"logic/bundle"
        },
        "709":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            -1910
          ],
          "type":"logic/frameDelay"
        },
        "710":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            724,
            -2022
          ],
          "type":"logic/once"
        },
        "711":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -1910
          ],
          "type":"logic/flowSwitch"
        },
        "712":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal itable = self.pinIn.iteg.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.saveIntegrityToFile(file, itable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "iteg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "iteg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            480,
            -2190
          ],
          "type":"util/customLua"
        },
        "713":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":200
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            136,
            -1728
          ],
          "type":"logic/frameDelay"
        },
        "714":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -2316
          ],
          "type":"logic/flowSwitch"
        },
        "715":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            648,
            -2316
          ],
          "type":"logic/frameDelay"
        },
        "716":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            724,
            -2190
          ],
          "type":"logic/once"
        },
        "717":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "on":false,
          "pos":[
            -1858,
            792
          ],
          "type":"logic/flowSwitch"
        },
        "718":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1054,
            1254
          ],
          "type":"util/customLua"
        },
        "719":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.val.value = self.pinIn.num.value ~= 0"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "num":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"Int To Bool",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "num",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -1648,
            1282
          ],
          "type":"util/customLua"
        },
        "720":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.val.value then\nself.pinOut.num.value = self.pinIn.tval.value\nelse\nself.pinOut.num.value = self.pinIn.fval.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fval":{
              "type":"number",
              "value":0
            },
            "tval":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fval":true,
              "tval":true,
              "val":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"Bool To Int",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            -872,
            1254
          ],
          "type":"util/customLua"
        },
        "721":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerFilterPlayerTrigName"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            556,
            -776
          ],
          "type":"types/genericValue"
        },
        "722":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal map = extensions.blrutils.getLevelName()\nself.pinOut.file.value = \"beamLR/mapdata/\" .. map .. \"/markers\"\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "file":false,
              "flow":false
            }
          },
          "name":"Get Map Marker File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            626,
            1506
          ],
          "type":"util/customLua"
        },
        "723":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            416,
            1604
          ],
          "type":"util/customLua"
        },
        "724":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.deleteMarkers()\nlocal dtable = self.pinIn.markers.value\nextensions.blrutils.spawnMarkers(dtable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "markers":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Spawn Map Markers",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "markers",
              null,
              ""
            ]
          ],
          "pos":[
            634,
            1604
          ],
          "type":"util/customLua"
        },
        "725":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":true,
              "config":false,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":true,
              "name":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            -858,
            2066
          ],
          "type":"util/customLua"
        },
        "726":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -746,
            1968
          ],
          "type":"util/customLua"
        },
        "727":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"podo"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -564,
            1968
          ],
          "type":"util/customLua"
        },
        "728":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal odoval = self.pinIn.odo.value or 0\nextensions.mechDamageLoader.forceSetOdometer(self.pinIn.veid.value, odoval)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "odo":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Odometer",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "odo",
              null,
              ""
            ]
          ],
          "pos":[
            -620,
            2066
          ],
          "type":"util/customLua"
        },
        "729":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveConfig(self.pinIn.filename.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save BLR Veh Config",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -620,
            2164
          ],
          "type":"util/customLua"
        },
        "730":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveInventoryToFile(\"beamLR/partinv\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Part Inventory",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1096,
            2346
          ],
          "type":"util/customLua"
        },
        "731":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveInventoryToFile(\"beamLR/partinv\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Part Inventory",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2426,
            2934
          ],
          "type":"util/customLua"
        },
        "732":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ]
          ],
          "pos":[
            -2370,
            2710
          ],
          "type":"util/customLua"
        },
        "733":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.setFilter(\"all\")\n\nlocal walking = self.pinIn.walking.value == 1\n\nif not walking then\nlocal list = extensions.betterpartmgmt.getPartShopList()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"availParts\", list)\n\nlist = extensions.betterpartmgmt.getGarageUIData()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"garageData\", list)\n\nlist = extensions.betterpartmgmt.getFullPartPrices()\nextensions.customGuiStream.sendDataToUI(\"partPrices\", list)\n\nlist = extensions.betterpartmgmt.getPartNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"partNames\", list)\nextensions.customGuiStream.sendRepairData(nil, list, nil)\n\nlist = extensions.betterpartmgmt.getSlotNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"slotNames\", list)\n\nlist = extensions.betterpartmgmt.getVehicleParts()\nextensions.customGuiStream.sendDataToUI(\"usedParts\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIData()\nextensions.customGuiStream.sendDataToUI(\"tuningData\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIValues()\nextensions.customGuiStream.sendDataToUI(\"tuningValues\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesSlider\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesNumfield\", list)\n\nlist = extensions.betterpartmgmt.getSortedTuningCategories(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedCategories\", list)\nlist = extensions.betterpartmgmt.getSortedTuningFields(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedFields\", list)\n\n\nextensions.customGuiCallbacks.exec(\"reloadPaint\")\n\nlist = extensions.betterpartmgmt.getPartPreviewImageTable()\nextensions.customGuiStream.sendDataToUI(\"partpreview\", list )\n\nlocal seed = extensions.blrutils.getCareerSeed()\nextensions.customGuiStream.sendDataToUI(\"seed\", seed)\n\nlocal inventory = extensions.betterpartmgmt.getPartInventory()\nextensions.customGuiStream.sendDataToUI(\"ownedParts\", inventory)\n\nlocal extras = self.pinIn.extras.value\nlocal triggerExtras = {}\nlocal scalevals = {}\nlocal shopID = 0\nlocal priceScale = 1.5\nif extras and extras ~= \"\" then\nif FS:fileExists(extras) then\ntriggerExtras = extensions.blrutils.loadDataTable(self.pinIn.extras.value)\nif triggerExtras[\"shopID\"] and triggerExtras[\"scale\"] then\nshopID = tonumber(triggerExtras[\"shopID\"])\nscalevals = extensions.blrutils.ssplitnum(triggerExtras[\"scale\"], \",\")\npriceScale = extensions.blrutils.getPartShopPriceScale(shopID, scalevals[1], scalevals[2])\nend\nend\nend\n\nextensions.customGuiStream.sendDataToUI(\"shopPriceScale\", priceScale or 1.5)\n\nlocal selected = extensions.blrutils.blrvarGet(\"uiinitSelectedEventFile\")\nlocal uid = extensions.blrutils.blrvarGet(\"uiinitSelectedEventUID\")\nextensions.customGuiStream.sendEventBrowserList(extensions.blrutils.eventBrowserGetList())\nif selected then\nlocal eseed = extensions.blrutils.getEventSeed(uid)\nextensions.customGuiStream.sendEventBrowserData(extensions.blrutils.eventBrowserGetData(selected, eseed))\nextensions.customGuiStream.sendEventBrowserSelectedUID(uid)\nend\nextensions.blrglobals.blrFlagSet(\"eventBrowserReloadCar\", true)\nlocal inspection = extensions.blrutils.getEventInspectionStatus()\nextensions.customGuiStream.sendEventBrowserInspectionStatus(inspection)\n\nextensions.blrglobals.blrFlagSet(\"eventRestrictUpdate\", true) -- Request update for vehicle restriction state\n\nlist = extensions.betterpartmgmt.getSortedShopSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedShopSlots\", list)\nlist = extensions.betterpartmgmt.getSortedShopParts()\nextensions.customGuiStream.sendDataToUI(\"sortedShopParts\", list)\nlist = extensions.betterpartmgmt.getSortedGarageSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageSlots\", list)\nlist = extensions.betterpartmgmt.getSortedGarageParts()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageParts\", list)\nend\n\nextensions.blrutils.uiRefreshTemplates()\n\n-- 1.11 fix for score keeping UIs not reloading during init\nextensions.customGuiStream.driftUIinitreload()\nextensions.customGuiStream.deliveryUIinitreload()\nextensions.customGuiStream.gameOverUIinitreload()\n\n\n-- 1.13 advanced vehicle building toggle\nlocal avbtoggle = extensions.blrglobals.blrFlagGet(\"avbToggle\")\nextensions.customGuiStream.sendDataToUI(\"avbToggle\", avbtoggle)\n\n\n--1.13 gps\nextensions.customGuiStream.gpsUIInitReload()\n\n--game options\nextensions.customGuiStream.sendCurrentOptionValues()\n\n--1.14 selective repair maps\nlocal cmap = extensions.betterpartmgmt.getChildMap()\nlocal pmap = extensions.betterpartmgmt.getParentMap()\nextensions.customGuiStream.sendRepairUIMaps(pmap, cmap)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendRepairUIMainPart(mainpart)\n\n-- 1.14 fix to prevent removing main part (bugs the game)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendDataToUI(\"mainpart\", mainpart)\n\n-- 1.15 item inventory\nextensions.customGuiStream.sendItemInventory()\n\n--1.15.3 custom timer app\nextensions.customGuiStream.sendTimerData()\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "extras":false,
              "flow":false,
              "walking":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Init Request",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "extras",
              null,
              ""
            ],
            [
              "in",
              "number",
              "walking",
              null,
              ""
            ]
          ],
          "pos":[
            -984,
            -3758
          ],
          "type":"util/customLua"
        },
        "734":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"uiInitRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1390,
            -3758
          ],
          "type":"util/customLua"
        },
        "735":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1404,
            -3674
          ],
          "type":"logic/branch"
        },
        "736":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"uiInitRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1404,
            -3548
          ],
          "type":"util/customLua"
        },
        "737":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            584,
            -902
          ],
          "type":"types/genericValue"
        },
        "738":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1452,
            -3058
          ],
          "type":"util/customLua"
        },
        "739":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1452,
            -3156
          ],
          "type":"types/genericValue"
        },
        "740":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.tdata.value\nself.pinOut.shopFile.value = dtable[\"shopfile\"]\nself.pinOut.dayData.value = extensions.blrutils.loadDataTable(\"beamLR/shop/daydata/\" .. dtable[\"shopfile\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "tdata":false
            },
            "p_out":{
              "dayData":false,
              "flow":false,
              "shopFile":false
            }
          },
          "name":"Car Shop Extra Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "tdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "shopFile",
              null,
              ""
            ],
            [
              "out",
              "table",
              "dayData",
              null,
              ""
            ]
          ],
          "pos":[
            1662,
            -3170
          ],
          "type":"util/customLua"
        },
        "741":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.dtable.value\nself.pinOut.league.value = dtable[\"current\"]\nself.pinOut.bronze.value = dtable[\"bronze\"]\nself.pinOut.silver.value = dtable[\"silver\"]\nself.pinOut.gold.value = dtable[\"gold\"]\nself.pinOut.hero.value = dtable[\"hero\"]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dtable":false,
              "flow":false
            },
            "p_out":{
              "bronze":true,
              "flow":false,
              "gold":true,
              "hero":true,
              "league":false,
              "silver":true
            }
          },
          "name":"Club Progress Info",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "league",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bronze",
              null,
              ""
            ],
            [
              "out",
              "string",
              "silver",
              null,
              ""
            ],
            [
              "out",
              "string",
              "gold",
              null,
              ""
            ],
            [
              "out",
              "string",
              "hero",
              null,
              ""
            ],
            [
              "in",
              "table",
              "dtable",
              null,
              ""
            ]
          ],
          "pos":[
            612,
            -1308
          ],
          "type":"util/customLua"
        },
        "742":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.val.value then\nself.pinOut.num.value = self.pinIn.tval.value\nelse\nself.pinOut.num.value = self.pinIn.fval.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fval":{
              "type":"number",
              "value":0
            },
            "tval":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fval":true,
              "tval":true,
              "val":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"Bool To Int",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            164,
            680
          ],
          "type":"util/customLua"
        },
        "743":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -298,
            442
          ],
          "type":"scene/getPlayerVehicle"
        },
        "744":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"scenetree.SpawnedVehicles:deleteAllObjects()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete All Vehicles",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            550,
            64
          ],
          "type":"util/customLua"
        },
        "745":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"waitmsgState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -46,
            792
          ],
          "type":"types/genericValue"
        },
        "746":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":true,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            150,
            792
          ],
          "type":"logic/compare"
        },
        "747":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value or 0\nlocal key = self.pinIn.key.value\nextensions.customGuiStream.sendDataToUI(key,val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"waitmsg"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Value To UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -32,
            932
          ],
          "type":"util/customLua"
        },
        "748":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":true,
              "damage":true,
              "dirVec":true,
              "dirVecUp":true,
              "flow":false,
              "position":false,
              "rotation":false,
              "velocity":true,
              "velocityVector":true
            }
          },
          "pos":[
            522,
            -76
          ],
          "type":"vehicle/vehicleMapData"
        },
        "749":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Must be in vehicle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -598,
            -1812
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "750":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"careerResetRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -158,
            2332
          ],
          "type":"util/customLua"
        },
        "751":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            628,
            422
          ],
          "commentText":"",
          "commentTitle":"UI Career Reset Request",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -364,
            2142
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "752":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            66,
            2206
          ],
          "type":"logic/flowSwitch"
        },
        "753":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"cvgid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -3196,
            1296
          ],
          "type":"util/customLua"
        },
        "754":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3560,
            -1322
          ],
          "type":"types/genericValue"
        },
        "755":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value or 0\nlocal key = self.pinIn.key.value\nextensions.customGuiStream.sendDataToUI(key,val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Value To UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -3014,
            1296
          ],
          "type":"util/customLua"
        },
        "756":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -3560,
            -1210
          ],
          "type":"util/customLua"
        },
        "757":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.veid.value)\nif veh and map.objects[veh:getId()] then\nself.pinOut.damage.value = map.objects[veh:getId()].damage\nelse \nself.pinOut.damage.value = 0\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "damage":false,
              "flow":false
            }
          },
          "name":"Get Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ]
          ],
          "pos":[
            5806,
            64
          ],
          "type":"util/customLua"
        },
        "758":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1368,
            1114
          ],
          "type":"vehicle/recoverInPlace"
        },
        "759":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal map = extensions.blrutils.getLevelName()\nlocal group = extensions.blrutils.loadDataFile(\"beamLR/mapdata/\" .. map .. \"/traffic\")[1]\nlocal folder = \"beamLR/spawngroups/\" .. group .. \"/\"\nlocal traffic = folder .. \"traffic.json\"\nlocal cops = folder .. \"cops.json\"\nlocal trucks = folder .. \"trucks.json\"\nself.pinOut.traffic.value = traffic\nself.pinOut.police.value = cops\nself.pinOut.trucks.value = trucks"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "police":false,
              "traffic":false,
              "trucks":false
            }
          },
          "name":"Map Traffic Groups",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "traffic",
              null,
              ""
            ],
            [
              "out",
              "string",
              "police",
              null,
              ""
            ],
            [
              "out",
              "string",
              "trucks",
              null,
              ""
            ]
          ],
          "pos":[
            -1662,
            848
          ],
          "type":"util/customLua"
        },
        "760":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":true,
              "reputation":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            -3196,
            -1210
          ],
          "type":"util/customLua"
        },
        "761":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2286,
            -2778
          ],
          "type":"types/genericValue"
        },
        "762":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            6016,
            64
          ],
          "type":"vehicle/recoverInPlace"
        },
        "763":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            6044,
            176
          ],
          "type":"logic/compare"
        },
        "764":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5470,
            148
          ],
          "type":"logic/flowSwitch"
        },
        "765":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.initDayChangeSystem()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Init Day Change Sys",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -256,
            8
          ],
          "type":"util/customLua"
        },
        "766":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5568,
            64
          ],
          "type":"logic/frameDelay"
        },
        "767":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5610,
            218
          ],
          "type":"logic/once"
        },
        "768":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePartReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3546,
            -1070
          ],
          "type":"types/genericValue"
        },
        "769":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            934,
            1072
          ],
          "type":"logic/compare"
        },
        "770":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.veid.value)\nif veh and map.objects[veh:getId()] then\nself.pinOut.damage.value = map.objects[veh:getId()].damage\nelse \nself.pinOut.damage.value = 0\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "damage":false,
              "flow":false
            }
          },
          "name":"Get Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ]
          ],
          "pos":[
            1102,
            1142
          ],
          "type":"util/customLua"
        },
        "771":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            570,
            1114
          ],
          "type":"logic/frameDelay"
        },
        "772":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            780,
            1114
          ],
          "type":"logic/once"
        },
        "773":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "checkVelocity":{
              "type":"number",
              "value":0.01000000000000003664
            }
          },
          "hiddenPins":{
            "p_in":{
              "aiVehId":false,
              "checkVelocity":true,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false,
              "stopped":false
            }
          },
          "pos":[
            -2006,
            400
          ],
          "type":"vehicle/ai/stop"
        },
        "774":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -2272,
            -2652
          ],
          "type":"util/customLua"
        },
        "775":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.missionFile.value = dtable[\"missionFile\"]\nself.pinOut.shopFile.value = dtable[\"shopFile\"]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "missionFile":false,
              "shopFile":false
            }
          },
          "name":"Part Shop Extra Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "missionFile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "shopFile",
              null,
              ""
            ]
          ],
          "pos":[
            -2272,
            -2540
          ],
          "type":"util/customLua"
        },
        "776":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            5302,
            -258
          ],
          "type":"types/genericValue"
        },
        "777":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2852,
            2178
          ],
          "type":"logic/flowSwitch"
        },
        "778":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2852,
            2052
          ],
          "type":"logic/frameDelay"
        },
        "779":{
          "alpha":1,
          "backgroundColor":[
            0.50196081399917602539,
            0.50196081399917602539,
            0.50196081399917602539,
            1.00392162799835205078
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"ACTIVE FLOW BECAUSE THE\\nPOLICE CODE WILL UNFREEZE\\nWHEN \"you can drive away\" \\nSHOWS UP IN THE UI",
          "commentTitle":"THIS FREEZE NODE NEEDS",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            2352,
            546
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "780":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            402,
            484
          ],
          "type":"types/genericValue"
        },
        "781":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2866,
            1660
          ],
          "type":"types/genericValue"
        },
        "782":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            4518,
            -594
          ],
          "type":"util/customLua"
        },
        "783":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            4476,
            232
          ],
          "type":"util/customLua"
        },
        "784":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            948,
            260
          ],
          "type":"util/customLua"
        },
        "785":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            368,
            -62
          ],
          "type":"util/customLua"
        },
        "786":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Gold"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            1046,
            -4752
          ],
          "type":"audio/playOnce"
        },
        "787":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1082,
            -4808
          ],
          "type":"logic/flowSwitch"
        },
        "788":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal allparts = extensions.blrutils.ssplit(self.pinIn.parts.value, \",\")\nif allparts[1] ~= \"none\" then\nfor i=1,#allparts do\nextensions.betterpartmgmt.addToInventory(allparts[i])\nend\nextensions.betterpartmgmt.saveInventoryToFile(\"beamLR/partInv\")\nend\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "parts":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Process Part Reward",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "parts",
              null,
              ""
            ]
          ],
          "pos":[
            -3364,
            -1070
          ],
          "type":"util/customLua"
        },
        "789":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3378,
            -1224
          ],
          "type":"types/genericValue"
        },
        "790":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -270,
            -4878
          ],
          "type":"scene/getPlayerVehicle"
        },
        "791":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local vid = self.pinIn.vid.value\nlocal automode = self.pinIn.auto.value\nlocal ctime = core_environment.getTimeOfDay().time\nlocal mode = self.pinIn.mode.value -- 0=OFF,1=LOWBEAM,2=HIGHBEAM\n\nif automode then -- Turns on and off at set time (5PM to 7AM)\nif not (ctime >= 0.2083 and ctime <= 0.7916) then\nmode = 0\nend\nend\n\nscenetree.findObjectById(vid):queueLuaCommand(\"electrics.setLightsState(\" .. mode .. \")\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "auto":{
              "type":"bool",
              "value":true
            },
            "mode":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "auto":false,
              "flow":false,
              "mode":false,
              "vid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mode",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "auto",
              null,
              ""
            ]
          ],
          "pos":[
            -816,
            -300
          ],
          "type":"util/customLua"
        },
        "792":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.96049094200134277344,
            0.96048134565353393555,
            0.96048134565353393555,
            1
          ],
          "commentSize":[
            2252,
            1443
          ],
          "commentText":"",
          "commentTitle":"Challenges",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3948,
            -4340
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "793":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "azimuthOverride":false,
              "dayLength":false,
              "dayScale":false,
              "nightScale":false,
              "time":false
            }
          },
          "pos":[
            -1012,
            36
          ],
          "type":"environment/getTimeOfDay"
        },
        "794":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3644,
            260
          ],
          "type":"types/genericValue"
        },
        "795":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "raceMode":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "flow":false,
              "raceMode":true,
              "useGenericMissionDataApp":true,
              "value":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -732,
            484
          ],
          "type":"ui/cornerTimerBLR"
        },
        "796":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local time = self.pinIn.inTime.value\nlocal timeval = (time * 24.0 * 60.0 * 60.0) + (12.0 * 60.0 * 60.0)\nlocal uitime = math.floor(timeval % (24.0*60.0 * 60.0))\nself.pinOut.outTime.value = uitime"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "inTime":false
            },
            "p_out":{
              "flow":false,
              "outTime":false
            }
          },
          "name":"Day Time to UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "inTime",
              null,
              ""
            ],
            [
              "out",
              "number",
              "outTime",
              null,
              ""
            ]
          ],
          "pos":[
            -956,
            512
          ],
          "type":"util/customLua"
        },
        "797":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -3924,
            -3534
          ],
          "type":"scene/getPlayerVehicle"
        },
        "798":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeCheckpoint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3434,
            -3758
          ],
          "type":"types/genericValue"
        },
        "799":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3924,
            -3461
          ],
          "type":"logic/bundle"
        },
        "800":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2944,
            -3324
          ],
          "type":"logic/branch"
        },
        "801":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeCheckpoint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3126,
            -3128
          ],
          "type":"types/genericValue"
        },
        "802":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local myObj = scenetree.findObjectById(self.pinIn.newPin.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "newPin":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "newPin",
              null,
              ""
            ]
          ],
          "pos":[
            -2678,
            -3688
          ],
          "type":"util/customLua"
        },
        "803":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                1,
                0,
                0.00006008148190000433,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":4
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2468,
            -3590
          ],
          "type":"scene/singleMarker"
        },
        "804":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            -3800
          ],
          "type":"logic/flowSwitch"
        },
        "805":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Gold"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":true,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -2090,
            -3786
          ],
          "type":"audio/playOnce"
        },
        "806":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3672,
            25
          ],
          "type":"logic/bundle"
        },
        "807":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2664,
            -3576
          ],
          "type":"logic/compare"
        },
        "808":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2860,
            -3464
          ],
          "type":"logic/branch"
        },
        "809":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2524,
            -3800
          ],
          "type":"logic/branch"
        },
        "810":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3910,
            -4094
          ],
          "type":"types/genericValue"
        },
        "811":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3924,
            -4010
          ],
          "type":"logic/compare"
        },
        "812":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            -3730
          ],
          "type":"logic/once"
        },
        "813":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1880,
            -4290
          ],
          "type":"types/genericValue"
        },
        "814":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -1894,
            -4192
          ],
          "type":"util/customLua"
        },
        "815":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1894,
            -4066
          ],
          "type":"types/genericValue"
        },
        "816":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1894,
            -3940
          ],
          "type":"types/genericValue"
        },
        "817":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Daredevil Challenges"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":true,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -3728,
            -4276
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "818":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"dare"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            -3924,
            -4276
          ],
          "type":"util/customLua"
        },
        "819":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -1894,
            -3758
          ],
          "type":"util/customLua"
        },
        "820":{
          "count":3,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "none":false
            }
          },
          "pos":[
            -3238,
            -4220
          ],
          "type":"logic/switchcase"
        },
        "821":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3294,
            -4122
          ],
          "type":"types/genericValue"
        },
        "822":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            872,
            -3366
          ],
          "type":"util/customLua"
        },
        "823":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2370,
            -4304
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "824":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2944,
            -4192
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "825":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":4
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Accept"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -2762,
            -4290
          ],
          "type":"util/customLua"
        },
        "826":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -3448,
            -4038
          ],
          "type":"util/customLua"
        },
        "827":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3658,
            -4052
          ],
          "type":"types/genericValue"
        },
        "828":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal toRet = {}\nlocal index = 1\nfor k,v in pairs(dtable) do\ntoRet[index] = dtable[\"c\" .. index]\nindex = index+1\nend\nself.pinOut.count.value = index-1\nself.pinOut.cfiles.value = toRet\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false
            },
            "p_out":{
              "cfiles":false,
              "count":false,
              "flow":false
            }
          },
          "name":"Get Challenges ",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "number",
              "count",
              null,
              ""
            ],
            [
              "out",
              "table",
              "cfiles",
              null,
              ""
            ]
          ],
          "pos":[
            -3644,
            -3912
          ],
          "type":"util/customLua"
        },
        "829":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal unit = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal dtable = self.pinIn.cfiles.value\nlocal pick = self.pinIn.pick.value\nlocal cfile = \"beamLR/challenges/\" .. extensions.blrutils.getLevelName() .. \"/\" .. dtable[pick]\nlocal ctable = extensions.blrutils.loadDataTable(cfile)\nlocal processed = extensions.blrutils.processChallengeRandoms(ctable)\nlocal timeFormat = {}\nlocal txttmp = \"\"\nself.pinOut.traffic.value = tonumber(ctable[\"traffic\"]) == 1\nself.pinOut.desc.value = ctable[\"desc\"]\nself.pinOut.type.value = ctable[\"type\"]\nself.pinOut.trigs.value = extensions.blrutils.ssplit(ctable[\"triggers\"], \",\")\nself.pinOut.wager.value = processed[\"wager\"]\nself.pinOut.reputation.value = processed[\"rep\"]\nself.pinOut.targetSpd.value = processed[\"targetspd\"]\nself.pinOut.targetTime.value = processed[\"targettime\"]\nself.pinOut.driftPoints.value = processed[\"driftpts\"]\nself.pinOut.gmwp.value = ctable[\"gmwp\"]\n\nlocal infotxt = ctable[\"desc\"] .. \"\\n\"\ninfotxt = infotxt .. \"Wager: $\" .. processed[\"wager\"] .. \"\\n\"\ninfotxt = infotxt .. \"Rep: \" .. processed[\"rep\"] .. \"\\n\"\n\nif processed[\"targetspd\"] ~= nil then\nif unit == \"imperial\" then\ntxttmp = string.format(\"%.1f\", (processed[\"targetspd\"]*2.237))\ninfotxt = infotxt .. \"Target Speed: \" ..  txttmp .. \" mph \\n\"\nelse\ntxttmp = string.format(\"%.1f\", (processed[\"targetspd\"]*3.6))\ninfotxt = infotxt .. \"Target Speed: \" .. txttmp .. \" km/h \\n\"\nend\nend\n\nif processed[\"driftpts\"] ~= nil then\ninfotxt = infotxt .. \"Drift Points: \" .. processed[\"driftpts\"] .. \"\\n\"\nend\n\nif tonumber(ctable[\"traffic\"]) == 1 then\ninfotxt = infotxt .. \"Traffic: Enabled\\n\"\nelse\ninfotxt = infotxt .. \"Traffic: Disabled\\n\"\nend\n\nif processed[\"targettime\"] ~= nil then\ntimeFormat = extensions.blrutils.msTimeFormat(tonumber(processed[\"targettime\"]))\ninfotxt = infotxt .. \"Target Time: \" .. string.format(\"%02d\",timeFormat[\"minutes\"]) .. \":\" .. string.format(\"%02d\",timeFormat[\"seconds\"]) .. \".\" .. string.format(\"%03d\",timeFormat[\"milliseconds\"])  .. \"\\n\"\nend\n\nself.pinOut.infotxt.value = infotxt\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cfiles":false,
              "flow":false,
              "pick":false
            },
            "p_out":{
              "desc":false,
              "driftPoints":false,
              "flow":false,
              "gmwp":false,
              "infotxt":false,
              "reputation":false,
              "targetSpd":false,
              "targetTime":false,
              "traffic":false,
              "trigs":false,
              "type":false,
              "wager":false
            }
          },
          "name":"Get Challenge Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "cfiles",
              null,
              ""
            ],
            [
              "in",
              "number",
              "pick",
              null,
              ""
            ],
            [
              "out",
              "string",
              "desc",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "number",
              "wager",
              null,
              ""
            ],
            [
              "out",
              "table",
              "trigs",
              null,
              ""
            ],
            [
              "out",
              "number",
              "targetSpd",
              null,
              ""
            ],
            [
              "out",
              "number",
              "targetTime",
              null,
              ""
            ],
            [
              "out",
              "number",
              "driftPoints",
              null,
              ""
            ],
            [
              "out",
              "string",
              "infotxt",
              null,
              ""
            ],
            [
              "out",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "out",
              "string",
              "gmwp",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "traffic",
              null,
              ""
            ]
          ],
          "pos":[
            -3238,
            -4066
          ],
          "type":"util/customLua"
        },
        "830":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2972,
            1926
          ],
          "type":"logic/branch"
        },
        "831":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2076,
            -4164
          ],
          "type":"util/customLua"
        },
        "832":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "float":{
              "type":"bool",
              "value":false
            },
            "rangeStart":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "float":true,
              "flow":false,
              "rangeEnd":false,
              "rangeStart":false
            },
            "p_out":{
              "flow":false,
              "random":false
            }
          },
          "pos":[
            -3448,
            -3912
          ],
          "type":"util/randomNumber"
        },
        "833":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            -1474,
            834
          ],
          "type":"logic/compare"
        },
        "834":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal map = extensions.blrutils.getLevelName()\nself.pinOut.file.value = \"beamLR/mapdata/\" .. map .. \"/triggers\"\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "file":false,
              "flow":false
            }
          },
          "name":"Get Map Trigger File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -74,
            568
          ],
          "type":"util/customLua"
        },
        "835":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            136,
            568
          ],
          "type":"util/customLua"
        },
        "836":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal idtable = {station = 1, repair = 2, usedcarshop = 3, partshop = 4,  garage=5,race=6}\nlocal tname = self.pinIn.name.value\nlocal tdata = self.pinIn.tdata.value\n\nif tdata[tname] == nil then\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nelse\nlocal tsplit = extensions.blrutils.ssplit(tdata[tname], \",\")\nlocal type = tsplit[1]\nlocal extras = tsplit[2]\nif type ~= nil then\nself.pinOut.typeName.value = type\nself.pinOut.typeID.value = idtable[type]\nif extras ~= nil then\nself.pinOut.extras.value = \"beamLR/mapdata/\" .. extensions.blrutils.getLevelName() .. \"/triggerData/\" .. extras\nelse\nself.pinOut.extras.value = \"none\"\nend\nelse\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false,
              "tdata":false
            },
            "p_out":{
              "extras":false,
              "flow":false,
              "typeID":false,
              "typeName":false
            }
          },
          "name":"Trigger Name To Type",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "typeName",
              null,
              ""
            ],
            [
              "out",
              "number",
              "typeID",
              null,
              ""
            ],
            [
              "in",
              "table",
              "tdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            514,
            -1056
          ],
          "type":"util/customLua"
        },
        "837":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2272,
            -3562
          ],
          "type":"types/genericValue"
        },
        "838":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"challengeComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2272,
            -3646
          ],
          "type":"types/genericValue"
        },
        "839":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2776,
            -4164
          ],
          "type":"types/genericValue"
        },
        "840":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            -2558,
            -4234
          ],
          "type":"logic/compare"
        },
        "841":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"challengeUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3014,
            -4038
          ],
          "type":"types/genericValue"
        },
        "842":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3182,
            -3548
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "843":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Give Up"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -2720,
            -3338
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "844":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.cflow_not.value = self.pinIn.flow.value and (self.pinIn.cstatus.value ~= 1)\nself.pinOut.cflow.value = self.pinIn.flow.value and (self.pinIn.cstatus.value == 1)\nself.pinOut.mflow_not.value = self.pinIn.flow.value and (self.pinIn.mstatus.value == 0)\nself.pinOut.mflow.value = self.pinIn.flow.value and (self.pinIn.mstatus.value ~= 0)\nself.pinOut.rflow.value = self.pinIn.flow.value and (self.pinIn.rstatus.value == 1)\nself.pinOut.rflow_not.value = self.pinIn.flow.value and (self.pinIn.rstatus.value ~= 1)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cstatus":false,
              "flow":false,
              "mstatus":false,
              "rstatus":false
            },
            "p_out":{
              "cflow":false,
              "cflow_not":false,
              "flow":false,
              "mflow":false,
              "mflow_not":false,
              "rflow":false,
              "rflow_not":false
            }
          },
          "name":"Active Mission UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "mstatus",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rstatus",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cstatus",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "mflow",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "rflow",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "cflow",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "mflow_not",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "rflow_not",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "cflow_not",
              null,
              ""
            ]
          ],
          "pos":[
            528,
            -426
          ],
          "type":"util/customLua"
        },
        "845":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -412
          ],
          "type":"logic/and"
        },
        "846":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"avbToggle\", false)",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal options = extensions.blrutils.loadDataTable(\"beamLR/options\")\nlocal ctraffic = tonumber(options[\"crazytraffic\"])\nlocal ttotal = (tonumber(options[\"traffic\"]) + tonumber(options[\"police\"]) + tonumber(options[\"trucks\"]))\nif ctraffic == 0 then\nself.pinOut.traffic.value = tonumber(options[\"traffic\"])\nself.pinOut.police.value = tonumber(options[\"police\"])\nself.pinOut.trucks.value = tonumber(options[\"trucks\"])\nself.pinOut.pool.value = math.floor(ttotal - (ttotal / 3))--Changed in 0.28, value now used as amount of active vehs when pooling\nelse\nself.pinOut.traffic.value = 8\nself.pinOut.police.value = 8\nself.pinOut.trucks.value = 8\nself.pinOut.pool.value = 18\nend\nself.pinOut.sseed.value = tonumber(options[\"sseed\"])\nself.pinOut.risk.value = tonumber(options[\"trisk\"]) or 0.7\nself.pinOut.copstrict.value = tonumber(options[\"copstrict\"]) or 0.08\nself.pinOut.sleepTime.value = tonumber(options[\"sleeptime\"]) or 8\nself.pinOut.raceRandPaint.value = (tonumber(options[\"raceRandPaint\"]) == 1) or false\n\nlocal copfix = tonumber(options[\"autoCopfix\"] or \"1\")\nextensions.blrglobals.blrFlagSet(\"roleFixToggle\", copfix == 1)\nlocal bstoggle = tonumber(options[\"bstoggle\"] or \"0\") --can turn this default to 1 when issue is fixed, for old option files\nextensions.blrglobals.blrFlagSet(\"beamstateToggle\", bstoggle == 1)\n\nlocal timescale = tonumber(options[\"timescale\"] or \"1\")\nlocal daytime = 86400.000 / timescale\nself.pinOut.daytime.value = daytime\n\n--1.13 advanced vehicle building\nlocal avbtoggle = tonumber(options[\"avbtoggle\"] or \"0\")==1\nextensions.blrglobals.blrFlagSet(\"avbToggle\", avbtoggle)\nself.pinOut.avbtoggle.value = avbtoggle\n\n--1.13 gps (0=default, 1=always on, 2=always off)\nlocal gpsmode = tonumber(options[\"gpsmode\"] or 0)\nextensions.blrutils.blrvarSet(\"gpsmode\", gpsmode)\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", false)\n\n--1.13 advanced repair cost\nlocal arctoggle = tonumber(options[\"advrepaircost\"] or \"0\")==1\nextensions.blrglobals.blrFlagSet(\"advrepaircost\", arctoggle)\n\n--1.14 imgui layout \nlocal imscale = tonumber(options[\"imscale\"] or \"1\")\nextensions.ui_imguiUtils.changeUIScale(imscale)\nlocal imautosave = tonumber(options[\"imautosave\"] or \"1\")\nextensions.blrglobals.blrFlagSet(\"imautosave\", imautosave == 1)\nextensions.blrutils.loadCustomIMGUILayout()\n\n--1.14 drag cinematic effects\nlocal dragslowmo = tonumber(options[\"dragslowmo\"] or \"1\")\nextensions.blrglobals.blrFlagSet(\"dragslowmo\",dragslowmo  == 1)\n\n--1.14 option file saved target wager\nlocal targetwager = tonumber(options[\"targetwager\"] or \"100\")\nextensions.blrutils.setWager(targetwager)\n\n--1.14 groundmarkers global toggle\nlocal gmtoggle = tonumber(options[\"gmtoggle\"] or \"100\")\nextensions.blrglobals.blrFlagSet(\"gmtoggle\",gmtoggle  == 1)\n\n--1.14 race traffic mode switch\nlocal raceTrafficMode = tonumber(options[\"rtmode\"] or \"0\")\nextensions.blrutils.blrvarSet(\"raceTrafficMode\", raceTrafficMode)\n\n--1.14 floating markers toggle\nlocal fmtoggle = tonumber(options[\"fmtoggle\"] or \"1\")\nextensions.blrglobals.blrFlagSet(\"fmtoggle\",fmtoggle  == 1)\n\n--1.14 advanced repair UI toggle\nlocal aruitoggle = tonumber(options[\"useadvrepairui\"] or \"0\")\nextensions.blrglobals.blrFlagSet(\"useadvrepairui\",aruitoggle  == 1)\n\n--1.14.1 fast traffic toggle\nlocal tfasttoggle = tonumber(options[\"tfasttoggle\"] or \"0\")\nextensions.blrglobals.blrFlagSet(\"fastTrafficToggle\",tfasttoggle  == 1)\n\n--1.14.2 part edit safe mode toggle\nlocal gsafemode = tonumber(options[\"gsafemode\"] or \"0\")\nextensions.blrglobals.blrFlagSet(\"garageSafeModeToggle\",gsafemode == 1)\n\n--1.14.3 part image viewer mode\nlocal imgmode = tonumber(options[\"imgmode\"] or \"0\")\nextensions.customGuiStream.imageUIMode(imgmode)\n\n--1.14.3 race wager & rep scale\nlocal wagerscl = tonumber(options[\"wagerscl\"] or \"1.0\")\nextensions.blrutils.blrvarSet(\"raceWagerScale\", wagerscl)\nlocal repscl = tonumber(options[\"repscl\"] or \"1.0\")\nextensions.blrutils.blrvarSet(\"raceRepScale\", repscl)\n\n\n-- Finish by sending loaded options to ui\nextensions.customGuiStream.sendCurrentOptionValues()\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "avbtoggle":false,
              "copstrict":false,
              "daytime":false,
              "flow":false,
              "police":false,
              "pool":false,
              "raceRandPaint":false,
              "risk":false,
              "sleepTime":false,
              "sseed":false,
              "traffic":false,
              "trucks":false
            }
          },
          "name":"Load BLR Options",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "traffic",
              null,
              ""
            ],
            [
              "out",
              "number",
              "police",
              null,
              ""
            ],
            [
              "out",
              "number",
              "trucks",
              null,
              ""
            ],
            [
              "out",
              "number",
              "pool",
              null,
              ""
            ],
            [
              "out",
              "number",
              "sseed",
              null,
              ""
            ],
            [
              "out",
              "number",
              "risk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "copstrict",
              null,
              ""
            ],
            [
              "out",
              "number",
              "sleepTime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "raceRandPaint",
              null,
              ""
            ],
            [
              "out",
              "number",
              "daytime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "avbtoggle",
              null,
              ""
            ]
          ],
          "pos":[
            -626,
            190
          ],
          "type":"util/customLua"
        },
        "847":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            1110,
            -1714
          ],
          "type":"util/customLua"
        },
        "848":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            1088,
            -1854
          ],
          "type":"util/customLua"
        },
        "849":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            -360,
            204
          ],
          "type":"util/customLua"
        },
        "850":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            3972,
            -258
          ],
          "type":"util/customLua"
        },
        "851":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            5918,
            344
          ],
          "type":"util/customLua"
        },
        "852":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            1942,
            -2008
          ],
          "type":"util/customLua"
        },
        "853":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            2488,
            -3156
          ],
          "type":"util/customLua"
        },
        "854":{
          "data":{
            "fadeEnd":150,
            "fadeStart":100
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                0.20000000000000001110,
                0.53000000000000002665,
                1,
                1
              ]
            }
          },
          "hiddenPins":{
            "p_in":{
              "clear":false,
              "color":true,
              "cutOffDrivability":true,
              "flow":false,
              "penaltyAboveCutoff":true,
              "penaltyBelowCutoff":true,
              "target":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2538,
            1898
          ],
          "type":"gameplay/groundmarkers"
        },
        "855":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2250,
            -2134
          ],
          "type":"logic/frameDelay"
        },
        "856":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2306,
            -2008
          ],
          "type":"logic/once"
        },
        "857":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2110,
            -2036
          ],
          "type":"logic/flowSwitch"
        },
        "858":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value or 0\nlocal key = self.pinIn.key.value\nextensions.customGuiStream.sendDataToUI(key,val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"waitmsg"
            },
            "val":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Value To UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1956,
            -2106
          ],
          "type":"util/customLua"
        },
        "859":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            1984,
            1352
          ],
          "type":"util/customLua"
        },
        "860":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            3594,
            2192
          ],
          "type":"util/customLua"
        },
        "861":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"trailer"
            },
            "value_2":{
              "type":"string",
              "value":"gooseneck"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            -494,
            -4962
          ],
          "type":"logic/switchcase"
        },
        "862":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            764
          ],
          "type":"logic/once"
        },
        "863":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":true,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3538,
            -2988
          ],
          "type":"vehicle/freeze"
        },
        "864":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            614,
            506
          ],
          "commentText":"",
          "commentTitle":"Groundmarkers",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2996,
            1512
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "865":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2964,
            1716
          ],
          "type":"util/customLua"
        },
        "866":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2762,
            1702
          ],
          "type":"types/genericValue"
        },
        "867":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2278,
            -3450
          ],
          "type":"util/customLua"
        },
        "868":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2748,
            1800
          ],
          "type":"logic/compare"
        },
        "869":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.val.value then\nself.pinOut.num.value = self.pinIn.tval.value\nelse\nself.pinOut.num.value = self.pinIn.fval.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fval":{
              "type":"number",
              "value":0
            },
            "tval":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fval":true,
              "tval":true,
              "val":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"Bool To Int",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            -2958,
            1814
          ],
          "type":"util/customLua"
        },
        "870":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2580,
            1702
          ],
          "type":"logic/branch"
        },
        "871":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2754,
            1940
          ],
          "type":"types/genericValue"
        },
        "872":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            1046,
            -3366
          ],
          "type":"util/customLua"
        },
        "873":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            444,
            -4206
          ],
          "type":"util/customLua"
        },
        "874":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2026,
            -3660
          ],
          "type":"logic/once"
        },
        "875":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.data.value = jsonReadFile(self.pinIn.file.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "data":false,
              "flow":false
            }
          },
          "name":"Load JSON Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "out",
              "table",
              "data",
              null,
              ""
            ]
          ],
          "pos":[
            -1460,
            1016
          ],
          "type":"util/customLua"
        },
        "876":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1852,
            1058
          ],
          "type":"logic/flowSwitch"
        },
        "877":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehicleIds":false
            },
            "p_out":{
              "activated":false,
              "flow":false,
              "total":true,
              "vehicleIds":false
            }
          },
          "pos":[
            -928,
            918
          ],
          "type":"gameplay/traffic/trafficActivate"
        },
        "878":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cid":{
              "type":"number",
              "value":6
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Abandon"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            640,
            -3926
          ],
          "type":"util/customLua"
        },
        "879":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cid":{
              "type":"number",
              "value":7
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Accept"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            332,
            -3142
          ],
          "type":"util/customLua"
        },
        "880":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":7
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Refuse"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            802,
            -3002
          ],
          "type":"util/customLua"
        },
        "881":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal spawn = extensions.blrutils.getMapSpawn()\nself.pinOut.pos.value = spawn[\"pos\"]\nself.pinOut.rot.value = spawn[\"rot\"]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "pos":false,
              "rot":false
            }
          },
          "name":"Get Map Spawn",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "rot",
              null,
              ""
            ]
          ],
          "pos":[
            -1838,
            3088
          ],
          "type":"util/customLua"
        },
        "882":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            -886,
            2192
          ],
          "type":"util/customLua"
        },
        "883":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "pos":false,
              "repairVehicle":true,
              "rot":false,
              "safeTeleport":true,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1642,
            3004
          ],
          "type":"vehicle/moveTo"
        },
        "884":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1446,
            3074
          ],
          "type":"scene/camera/returnToVehicle"
        },
        "885":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1838,
            2990
          ],
          "type":"logic/once"
        },
        "886":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal missionID = extensions.gameplay_missions_missionManager.getForegroundMissionId()\nif missionID then\nlocal missionData = gameplay_missions_missions.getMissionById(missionID)\nextensions.gameplay_missions_missionManager.startFromWithinMission(missionData, {})\nelse\nself.graph.mgr:queueForRestart()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mission Restart",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1614,
            2514
          ],
          "type":"util/customLua"
        },
        "887":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1908,
            2430
          ],
          "type":"logic/once"
        },
        "888":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1376,
            2892
          ],
          "type":"logic/once"
        },
        "889":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve ~= nil then\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"towspd"
            },
            "toFetch":{
              "type":"string",
              "value":"electrics.values.airspeed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":false,
              "flow":false,
              "toFetch":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            2636,
            988
          ],
          "type":"util/customLua"
        },
        "890":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local speed = tonumber(self.pinIn.fetchspd.value or \"0\")\nlocal maxspd = self.pinIn.maxspd.value\nself.pinOut.cantow.value = speed <= maxspd"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "maxspd":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchspd":false,
              "flow":false,
              "maxspd":false
            },
            "p_out":{
              "cantow":false,
              "flow":false
            }
          },
          "name":"Tow Speed Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "fetchspd",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "cantow",
              null,
              ""
            ],
            [
              "in",
              "number",
              "maxspd",
              null,
              ""
            ]
          ],
          "pos":[
            2642,
            1240
          ],
          "type":"util/customLua"
        },
        "891":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2642,
            1380
          ],
          "type":"logic/branch"
        },
        "892":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal msforce = tonumber(extensions.vluaFetchModule.getVal(\"airspdgforce\")) or 0\nlocal gforce = msforce / 9.81\nself.pinOut.gforce.value = gforce"
          },
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "gforce":false
            }
          },
          "name":"Get Fetched G Force",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "number",
              "gforce",
              null,
              ""
            ]
          ],
          "pos":[
            -32,
            -5508
          ],
          "type":"util/customLua"
        },
        "893":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionFailG"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            192,
            -5508
          ],
          "type":"types/genericValue"
        },
        "894":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3700,
            -2232
          ],
          "type":"types/genericValue"
        },
        "895":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3504,
            -2232
          ],
          "type":"logic/compare"
        },
        "896":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            388,
            -5522
          ],
          "type":"logic/compare"
        },
        "897":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":3
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            710,
            -5018
          ],
          "type":"types/genericValue"
        },
        "898":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionFailG"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1544,
            -2540
          ],
          "type":"types/genericValue"
        },
        "899":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Trailer Delivery"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            318,
            -3366
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "900":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1874,
            435
          ],
          "commentText":"",
          "commentTitle":"Failure Detector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -504,
            -5558
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "901":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            374,
            414
          ],
          "type":"scene/getPlayerVehicle"
        },
        "902":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.C.value = self.pinIn.A.value or self.pinIn.B.value"
          },
          "customColor":[
            0.52150166034698486328,
            0.52149641513824462891,
            0.52150166034698486328,
            0.75000000000000000000
          ],
          "customIcon":"fg_gate_icon_and",
          "customIconColor":[
            1,
            0.99998998641967773438,
            0.99998998641967773438,
            0.80000001192092895508
          ],
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "C":false,
              "flow":false
            }
          },
          "name":"OR GATE",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "A",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "B",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "C",
              null,
              ""
            ]
          ],
          "pos":[
            2166,
            638
          ],
          "type":"util/customLua"
        },
        "903":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ttype = self.pinIn.type.value\nlocal toRet = {}\nif ttype == \"trailer\" then toRet = {5,8,10} \nelseif ttype == \"gooseneck\" then toRet = {5,17,10}\nend\nself.pinOut.scale.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "type":false
            },
            "p_out":{
              "flow":false,
              "scale":false
            }
          },
          "name":"Trailer Spot Scale",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "scale",
              null,
              ""
            ]
          ],
          "pos":[
            -290,
            -4808
          ],
          "type":"util/customLua"
        },
        "904":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.updateShopDailyData(self.pinIn.shopFile.value, self.pinIn.slot.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "shopFile":false,
              "slot":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Shop Day Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "shopFile",
              null,
              ""
            ],
            [
              "in",
              "number",
              "slot",
              null,
              ""
            ]
          ],
          "pos":[
            2250,
            -3338
          ],
          "type":"util/customLua"
        },
        "905":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1572,
            -1448
          ],
          "type":"util/customLua"
        },
        "906":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.idtable.value\nlocal veh = {}\nfor k,v in pairs(dtable) do\nveh = {}\nif v ~= -1 then\nveh = scenetree.findObjectById(v)\nif veh ~= nil then\ncore_vehicleBridge.executeAction(veh,'setFreeze', self.pinIn.freeze.value)\nend\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Freeze",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "freeze",
              null,
              ""
            ]
          ],
          "pos":[
            2292,
            -3156
          ],
          "type":"util/customLua"
        },
        "907":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1174,
            435
          ],
          "commentText":"",
          "commentTitle":"Completion detector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -518,
            -5068
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "908":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -2104,
            -2792
          ],
          "type":"util/customLua"
        },
        "909":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.initStartSeed(self.pinIn.sseed.value)\nextensions.blrutils.setGameDay(self.pinIn.day.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "day":false,
              "flow":false,
              "sseed":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"RNG Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "day",
              null,
              ""
            ],
            [
              "in",
              "number",
              "sseed",
              null,
              ""
            ]
          ],
          "pos":[
            1200,
            -6
          ],
          "type":"util/customLua"
        },
        "910":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.input.value\nlocal units = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal seed = extensions.blrutils.getDailySeed() + tonumber(dtable[\"id\"])\nlocal processed = extensions.blrutils.processGasStationRandoms(dtable, seed)\nlocal cost_regular = tonumber(processed[\"cost\"])\nlocal cost_midgrade = tonumber(processed[\"cost_midgrade\"])\nlocal cost_premium = tonumber(processed[\"cost_premium\"])\nlocal cost_diesel = tonumber(processed[\"cost_diesel\"])\nlocal cost_selected = extensions.blrutils.blrvarGet(\"smoothFuelSetCost\")\nlocal fueling = extensions.blrglobals.blrFlagGet(\"smoothFueling\")\n\nlocal pricetxt_regular = \"\"\nlocal pricetxt_midgrade = \"\"\nlocal pricetxt_premium = \"\"\nlocal pricetxt_diesel = \"\"\n\nlocal btntxt_regular = \"\"\nlocal btntxt_midgrade = \"\"\nlocal btntxt_premium = \"\"\nlocal btntxt_diesel = \"\"\n\nif units == \"imperial\" then\npricetxt_regular = \"$\" .. string.format(\"%.2f\",math.floor(cost_regular * 3.785 * 100.0) / 100.0) .. \" / Gallon\"\npricetxt_midgrade = \"$\" .. string.format(\"%.2f\",math.floor(cost_midgrade * 3.785 * 100.0) / 100.0) .. \" / Gallon\"\npricetxt_premium = \"$\" .. string.format(\"%.2f\",math.floor(cost_premium * 3.785 * 100.0) / 100.0) .. \" / Gallon\"\npricetxt_diesel = \"$\" .. string.format(\"%.2f\",math.floor(cost_diesel * 3.785 * 100.0) / 100.0) .. \" / Gallon\"\nelse\npricetxt_regular = \"$\" .. string.format(\"%.2f\",cost_regular) .. \" / Liter\"\npricetxt_midgrade = \"$\" .. string.format(\"%.2f\",cost_midgrade) .. \" / Liter\"\npricetxt_premium = \"$\" .. string.format(\"%.2f\",cost_premium) .. \" / Liter\"\npricetxt_diesel = \"$\" .. string.format(\"%.2f\",cost_diesel) .. \" / Liter\"\nend\n\nif fueling then\nbtntxt_regular = \"Stop Refuel\"\nelse\nbtntxt_regular = \"Regular \" .. pricetxt_regular\nbtntxt_midgrade = \"Mid-Grade \" .. pricetxt_midgrade\nbtntxt_premium = \"Premium \" .. pricetxt_premium\nbtntxt_diesel = \"Diesel \" .. pricetxt_diesel\nend\n\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.cost_regular.value = cost_regular\nself.pinOut.cost_midgrade.value = cost_midgrade\nself.pinOut.cost_premium.value = cost_premium\nself.pinOut.cost_diesel.value = cost_diesel\nself.pinOut.btntxt.value = btntxt_regular\nself.pinOut.midgrade.value = btntxt_midgrade\nself.pinOut.premium.value = btntxt_premium\nself.pinOut.diesel.value = btntxt_diesel\nself.pinOut.fueling.value = fueling\nself.pinOut.cost_selected.value = cost_selected"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "btntxt":false,
              "cost_diesel":false,
              "cost_midgrade":false,
              "cost_premium":false,
              "cost_regular":false,
              "cost_selected":false,
              "diesel":false,
              "flow":false,
              "fueling":false,
              "info":false,
              "midgrade":false,
              "name":false,
              "premium":false
            }
          },
          "name":"Gas Station Data V3",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "input",
              null,
              ""
            ],
            [
              "out",
              "string",
              "info",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost_regular",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost_midgrade",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost_premium",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost_diesel",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "btntxt",
              null,
              ""
            ],
            [
              "out",
              "string",
              "diesel",
              null,
              ""
            ],
            [
              "out",
              "string",
              "midgrade",
              null,
              ""
            ],
            [
              "out",
              "string",
              "premium",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "fueling",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cost_selected",
              null,
              ""
            ]
          ],
          "pos":[
            1558,
            -1364
          ],
          "type":"util/customLua"
        },
        "911":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            3356,
            -328
          ],
          "type":"types/genericValue"
        },
        "912":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2202,
            -1322
          ],
          "type":"logic/branch"
        },
        "913":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value * self.pinIn.Z.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "Z":{
              "type":"number",
              "value":1.50000000000000000000
            }
          },
          "hiddenPins":{
            "p_in":{
              "X":false,
              "Z":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X*Z",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "Z",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            3356,
            -272
          ],
          "type":"util/customLua"
        },
        "914":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5492,
            -90
          ],
          "type":"types/genericValue"
        },
        "915":{
          "alpha":1,
          "backgroundColor":[
            0,
            0,
            0,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"between veh type detect\\nand trigger sending UI data",
          "commentTitle":"1.13 fix for race condition ->",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            5292,
            -84
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "916":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local toRet = \"\"\nlocal fmt = string.format(\"%%.%df\", self.pinIn.floatPre.value)\nlocal valText = \"\"\n\nif self.pinIn.isFloat.value == true then \nvalText = string.format(fmt, self.pinIn.value.value)\nelse\nvalText = \"\" .. self.pinIn.value.value\nend\n\nif self.pinIn.prefix.value ~= nil and self.pinIn.showPre.value then\ntoRet = self.pinIn.prefix.value .. valText\nelse\ntoRet = self.pinIn.value.value\nend\n\nif self.pinIn.suffix.value ~= nil and self.pinIn.showSuf.value then\ntoRet = toRet .. self.pinIn.suffix.value\nend\n\nself.pinOut.output.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "floatPre":{
              "type":"number",
              "value":2
            },
            "isFloat":{
              "type":"bool",
              "value":true
            },
            "prefix":{
              "type":"string",
              "value":"Call Mechanic ($"
            },
            "showPre":{
              "type":"bool",
              "value":true
            },
            "showSuf":{
              "type":"bool",
              "value":true
            },
            "suffix":{
              "type":"string",
              "value":")"
            }
          },
          "hiddenPins":{
            "p_in":{
              "floatPre":true,
              "flow":false,
              "isFloat":true,
              "prefix":true,
              "showPre":true,
              "showSuf":true,
              "suffix":true,
              "value":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Prefixed Value Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ],
            [
              "in",
              "string",
              "prefix",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "suffix",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showPre",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showSuf",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "isFloat",
              null,
              ""
            ],
            [
              "in",
              "number",
              "floatPre",
              null,
              ""
            ]
          ],
          "pos":[
            3328,
            -216
          ],
          "type":"util/customLua"
        },
        "917":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal fullpath = self.pinIn.filename.value\n\nif extensions.blrglobals.blrFlagGet(\"beamstateToggle\") then\nve:queueLuaCommand(\"beamstate.load(\\\"\" .. fullpath .. \"\\\")\" )\nend\n\nself.pinOut.dbgval.value = fullpath"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "dbgval":false,
              "flow":false
            }
          },
          "name":"Load Beamstate From File",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dbgval",
              null,
              ""
            ]
          ],
          "pos":[
            1508,
            554
          ],
          "type":"util/customLua"
        },
        "918":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -984,
            -1781
          ],
          "type":"logic/bundle"
        },
        "919":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":true,
              "config":true,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":true,
              "mfile":true,
              "name":true,
              "paintdata":true,
              "scrapVal":false,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            3552,
            -286
          ],
          "type":"util/customLua"
        },
        "920":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal extras = self.pinIn.extras.value\nlocal triggerExtras = {}\nlocal scalevals = {}\nlocal shopID = 0\nlocal priceScale = 1.5\nif FS:fileExists(extras) then\ntriggerExtras = extensions.blrutils.loadDataTable(self.pinIn.extras.value)\nif triggerExtras[\"shopID\"] and triggerExtras[\"scale\"] then\nshopID = tonumber(triggerExtras[\"shopID\"])\nscalevals = extensions.blrutils.ssplitnum(triggerExtras[\"scale\"], \",\")\npriceScale = extensions.blrutils.getPartShopPriceScale(shopID, scalevals[1], scalevals[2])\nend\nend\n\nextensions.customGuiStream.sendDataToUI(\"shopPriceScale\", priceScale)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "extras":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Shop Price Scale",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            780,
            -356
          ],
          "type":"util/customLua"
        },
        "921":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.setFilter(\"all\")\n\nlocal list = extensions.betterpartmgmt.getPartShopList()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"availParts\", list)\n\nlist = extensions.betterpartmgmt.getGarageUIData()\nlist = extensions.betterpartmgmt.categoryFilter(list, true)\nextensions.customGuiStream.sendDataToUI(\"garageData\", list)\n\nlist = extensions.betterpartmgmt.getFullPartPrices()\nextensions.customGuiStream.sendDataToUI(\"partPrices\", list)\n\nlist = extensions.betterpartmgmt.getPartNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"partNames\", list)\nextensions.customGuiStream.sendRepairData(nil, list, nil)\n\nlist = extensions.betterpartmgmt.getSlotNameLibrary()\nextensions.customGuiStream.sendDataToUI(\"slotNames\", list)\n\nlist = extensions.betterpartmgmt.getVehicleParts()\nextensions.customGuiStream.sendDataToUI(\"usedParts\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIData()\nextensions.customGuiStream.sendDataToUI(\"tuningData\", list)\n\nlist = extensions.betterpartmgmt.getTuningUIValues()\nextensions.customGuiStream.sendDataToUI(\"tuningValues\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesSlider\", list)\nextensions.customGuiStream.sendDataToUI(\"tuningValuesNumfield\", list)\nlist = extensions.betterpartmgmt.getSortedTuningCategories(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedCategories\", list)\nlist = extensions.betterpartmgmt.getSortedTuningFields(false)\nextensions.customGuiStream.sendDataToUI(\"tuningSortedFields\", list)\n\n-- 1.14 fix to prevent removing main part (bugs the game)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendDataToUI(\"mainpart\", mainpart)\n\n\nextensions.customGuiCallbacks.exec(\"reloadPaint\")\n\nlist = extensions.betterpartmgmt.getPartPreviewImageTable()\nextensions.customGuiStream.sendDataToUI(\"partpreview\", list )\n\nlocal seed = extensions.blrutils.getCareerSeed()\nextensions.customGuiStream.sendDataToUI(\"seed\", seed)\n\nlocal inventory = extensions.betterpartmgmt.getPartInventory()\nextensions.customGuiStream.sendDataToUI(\"ownedParts\", inventory)\n\nlist = extensions.betterpartmgmt.getSortedShopSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedShopSlots\", list)\nlist = extensions.betterpartmgmt.getSortedShopParts()\nextensions.customGuiStream.sendDataToUI(\"sortedShopParts\", list)\nlist = extensions.betterpartmgmt.getSortedGarageSlots()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageSlots\", list)\nlist = extensions.betterpartmgmt.getSortedGarageParts()\nextensions.customGuiStream.sendDataToUI(\"sortedGarageParts\", list)\n\nextensions.blrutils.uiRefreshTemplates()\n\n--1.13 gps\nextensions.blrutils.gpsToggleStateUpdate()\n\n--1.14 selective repair maps\nlocal cmap = extensions.betterpartmgmt.getChildMap()\nlocal pmap = extensions.betterpartmgmt.getParentMap()\nextensions.customGuiStream.sendRepairUIMaps(pmap, cmap)\nlocal mainpart = extensions.betterpartmgmt.getMainPartChild()\nextensions.customGuiStream.sendRepairUIMainPart(mainpart)"
          },
          "customName":"Send UI Data",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Part List NO PRICE SCALE",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ]
          ],
          "pos":[
            6226,
            204
          ],
          "type":"util/customLua"
        },
        "922":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal newday = extensions.blrutils.getGameDay() + 1\nlocal ntable = {}\nextensions.blrutils.setGameDay(newday)\nntable[\"day\"] = newday\nextensions.blrutils.updateDataTable(\"beamLR/mainData\", ntable)\nextensions.blrutils.resetShopDailyData()\nlocal selected = extensions.blrutils.blrvarGet(\"uiinitSelectedEventFile\")\nlocal uid = extensions.blrutils.blrvarGet(\"uiinitSelectedEventUID\")\nif uid then\nlocal eseed = extensions.blrutils.getEventSeed(uid)\nextensions.customGuiStream.sendEventBrowserList(extensions.blrutils.eventBrowserGetList())\nif selected then\nextensions.customGuiStream.sendEventBrowserData(extensions.blrutils.eventBrowserGetData(selected, eseed))\nextensions.customGuiStream.sendEventBrowserSelectedUID(uid)\nend\nend\n-- 1.14.1 added gas station displays tied to RNG based gas price\nextensions.blrutils.blrStationDisplays()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Current Day",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            430,
            2066
          ],
          "type":"util/customLua"
        },
        "923":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1880,
            1926
          ],
          "type":"logic/branch"
        },
        "924":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal newday = extensions.blrutils.getGameDay() + 1\nlocal ntable = {}\nextensions.blrutils.setGameDay(newday)\nntable[\"day\"] = newday\nextensions.blrutils.updateDataTable(\"beamLR/mainData\", ntable)\nextensions.blrutils.resetShopDailyData()\nlocal selected = extensions.blrutils.blrvarGet(\"uiinitSelectedEventFile\")\nlocal uid = extensions.blrutils.blrvarGet(\"uiinitSelectedEventUID\")\nif uid then\nlocal eseed = extensions.blrutils.getEventSeed(uid)\nextensions.customGuiStream.sendEventBrowserList(extensions.blrutils.eventBrowserGetList())\nif selected then\nextensions.customGuiStream.sendEventBrowserData(extensions.blrutils.eventBrowserGetData(selected, eseed))\nextensions.customGuiStream.sendEventBrowserSelectedUID(uid)\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Current Day",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1642,
            1982
          ],
          "type":"util/customLua"
        },
        "925":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            3566,
            -454
          ],
          "type":"types/genericValue"
        },
        "926":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            3776,
            -594
          ],
          "type":"util/customLua"
        },
        "927":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            3538,
            -384
          ],
          "type":"util/customLua"
        },
        "928":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local toRet = \"\"\nlocal fmt = string.format(\"%%.%df\", self.pinIn.floatPre.value)\nlocal valText = \"\"\n\nif self.pinIn.isFloat.value == true then \nvalText = string.format(fmt, self.pinIn.value.value)\nelse\nvalText = \"\" .. self.pinIn.value.value\nend\n\nif self.pinIn.prefix.value ~= nil and self.pinIn.showPre.value then\ntoRet = self.pinIn.prefix.value .. valText\nelse\ntoRet = self.pinIn.value.value\nend\n\nif self.pinIn.suffix.value ~= nil and self.pinIn.showSuf.value then\ntoRet = toRet .. self.pinIn.suffix.value\nend\n\nself.pinOut.output.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "floatPre":{
              "type":"number",
              "value":2
            },
            "isFloat":{
              "type":"bool",
              "value":true
            },
            "prefix":{
              "type":"string",
              "value":"Scrap Car ($"
            },
            "showPre":{
              "type":"bool",
              "value":true
            },
            "showSuf":{
              "type":"bool",
              "value":true
            },
            "suffix":{
              "type":"string",
              "value":")"
            }
          },
          "hiddenPins":{
            "p_in":{
              "floatPre":true,
              "flow":false,
              "isFloat":true,
              "prefix":true,
              "showPre":true,
              "showSuf":true,
              "suffix":true,
              "value":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Prefixed Value Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ],
            [
              "in",
              "string",
              "prefix",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "suffix",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showPre",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showSuf",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "isFloat",
              null,
              ""
            ],
            [
              "in",
              "number",
              "floatPre",
              null,
              ""
            ]
          ],
          "pos":[
            3524,
            -160
          ],
          "type":"util/customLua"
        },
        "929":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1356,
            477
          ],
          "commentText":"Like selling but cheaper\\n",
          "commentTitle":"Scrap Vehicle",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            4466,
            -1232
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "930":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal id = self.pinIn.carid.value\nlocal count = self.pinIn.count.value\nlocal cevent = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\nlocal ctemplates = {}\n\nlocal extensions = require(\"extensions\")\nextensions.blrutils.deleteFile(\"beamLR/garage/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/garage/config/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/car\" .. id .. \".save.json\")\nextensions.blrutils.deleteFile(\"beamLR/beamstate/mech/car\" .. id)\nextensions.blrutils.deleteFile(\"beamLR/beamstate/integrity/car\" .. id)\n\n-- Clearing removed car templates from folder\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. id, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.deleteFile(file)\nend\n\n-- Delete template folder for that car\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. id)\n\nfor v=id+1,count-1 do \nextensions.blrutils.moveFile(\"beamLR/garage/car\" .. v, \"beamLR/garage/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/garage/config/car\" .. v, \"beamLR/garage/config/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/car\" .. v .. \".save.json\",\"beamLR/beamstate/car\" .. v-1 .. \".save.json\")\nextensions.blrutils.moveFile(\"beamLR/beamstate/mech/car\" .. v,\"beamLR/beamstate/mech/car\" .. v-1)\nextensions.blrutils.moveFile(\"beamLR/beamstate/integrity/car\" .. v,\"beamLR/beamstate/integrity/car\" .. v-1)\n\n-- For current event, check status then edit carid to reflect new ID\nif cevent['status'] ~= \"over\" then\nif tonumber(cevent['carid']) == v then -- Found car registered to event\ncevent['carid'] = v-1\nextensions.blrutils.updateDataTable(\"beamLR/currentTrackEvent\", cevent)\nend\nend\n\n-- For templates, use blrutils.moveFile, first directory is already empty so move can proceed\nctemplates = FS:findFiles(\"beamLR/garage/config/template/car\" .. v, \"*\", 0)\nfor _,file in pairs(ctemplates) do\nextensions.blrutils.moveFile(file, file:gsub(\"beamLR/garage/config/template/car\" .. v, \"beamLR/garage/config/template/car\" .. v-1))\nend\n-- Remove last directory which is now empty\nif v==count-1 then\nFS:directoryRemove(\"beamLR/garage/config/template/car\" .. v)\nend\n\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "count":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Remove Garage Car",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ]
          ],
          "pos":[
            4672,
            -1168
          ],
          "type":"util/customLua"
        },
        "931":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4960,
            -1070
          ],
          "type":"types/genericValue"
        },
        "932":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4512,
            -888
          ],
          "type":"vehicle/removeVehicle"
        },
        "933":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "DX":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            4960,
            -1196
          ],
          "type":"util/customLua"
        },
        "934":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            4742,
            -804
          ],
          "type":"util/customLua"
        },
        "935":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            4960,
            -860
          ],
          "type":"util/customLua"
        },
        "936":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5142,
            -1154
          ],
          "type":"types/genericValue"
        },
        "937":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "carUsed":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":false,
              "reputation":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            5170,
            -1014
          ],
          "type":"util/customLua"
        },
        "938":{
          "data":{
            "aboveSpacing":5,
            "belowSpacing":5
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2390,
            -1182
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "939":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5128,
            -860
          ],
          "type":"types/genericValue"
        },
        "940":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -984,
            -1728
          ],
          "type":"types/genericValue"
        },
        "941":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -620,
            -1728
          ],
          "type":"types/genericValue"
        },
        "942":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2986,
            -6
          ],
          "type":"types/genericValue"
        },
        "943":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            3160,
            -6
          ],
          "type":"logic/compare"
        },
        "944":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5310,
            -860
          ],
          "type":"types/genericValue"
        },
        "945":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3370,
            -1756
          ],
          "type":"types/genericValue"
        },
        "946":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            -1474,
            918
          ],
          "type":"logic/compare"
        },
        "947":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -900,
            1058
          ],
          "type":"logic/once"
        },
        "948":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2124,
            -2442
          ],
          "type":"types/genericValue"
        },
        "949":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            2110,
            -2330
          ],
          "type":"logic/compare"
        },
        "950":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3426,
            -1798
          ],
          "type":"types/genericValue"
        },
        "951":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3476,
            -4290
          ],
          "type":"types/genericValue"
        },
        "952":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.pos.value = self.pinIn.pos.value\nself.pinOut.rot.value = self.pinIn.rot.value\nself.pinOut.scl.value = self.pinIn.scl.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "pos":false,
              "rot":false,
              "scl":true
            },
            "p_out":{
              "flow":false,
              "pos":false,
              "rot":false,
              "scl":true
            }
          },
          "name":"Transform Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "scl",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "scl",
              null,
              ""
            ]
          ],
          "pos":[
            710,
            -76
          ],
          "type":"util/customLua"
        },
        "953":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1208,
            -3660
          ],
          "type":"types/genericValue"
        },
        "954":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal shopmode = extensions.blrglobals.blrFlagGet(\"shopmode\")\nlocal canquit = not shopmode\nif not canquit then\nextensions.blrdelay.setParamTableValue(\"msgdata\", \"msg\", \"You must exit the vehicle shop before quitting!\")\nextensions.blrdelay.setParamTableValue(\"msgdata\", \"ttl\", 15)\nextensions.blrdelay.queue(\"guimsg\",\"msgdata\", 60)\nend\nself.pinOut.ok.value=canquit"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "ok":false
            }
          },
          "name":"Abandon Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "ok",
              null,
              ""
            ]
          ],
          "pos":[
            368,
            218
          ],
          "type":"util/customLua"
        },
        "955":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3504,
            -4192
          ],
          "type":"logic/compare"
        },
        "956":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Must be in vehicle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3266,
            -4290
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "957":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1810,
            -1322
          ],
          "type":"types/genericValue"
        },
        "958":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            1998,
            -1322
          ],
          "type":"logic/compare"
        },
        "959":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -970,
            -1308
          ],
          "type":"types/genericValue"
        },
        "960":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -970,
            -1224
          ],
          "type":"logic/compare"
        },
        "961":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Can't race while being chased!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -606,
            -1224
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "962":{
          "data":{
            "restoreTod":true
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "play":{
              "type":"bool",
              "value":false
            },
            "time":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "azimuthOverride":true,
              "dayLength":true,
              "dayScale":true,
              "flow":false,
              "nightScale":true,
              "play":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            802,
            904
          ],
          "type":"environment/setTimeOfDay"
        },
        "963":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Convenience Store"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3188,
            -1518
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "964":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -788,
            -1294
          ],
          "type":"types/genericValue"
        },
        "965":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -816,
            -1238
          ],
          "type":"logic/compare"
        },
        "966":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Must be in vehicle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -606,
            -1280
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "967":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "customName":"Reset Markers",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            178,
            218
          ],
          "type":"util/customLua"
        },
        "968":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1998,
            -2582
          ],
          "type":"util/customLua"
        },
        "969":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            1704,
            -2568
          ],
          "type":"scene/getPlayerVehicle"
        },
        "970":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            684,
            576
          ],
          "commentText":"",
          "commentTitle":"UI Restart Request",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1876,
            2618
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "971":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1838,
            2671
          ],
          "type":"logic/bundle"
        },
        "972":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"restartQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1642,
            2668
          ],
          "type":"util/customLua"
        },
        "973":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1460,
            2668
          ],
          "type":"logic/branch"
        },
        "974":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1838,
            2724
          ],
          "type":"logic/flowSwitch"
        },
        "975":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3532,
            -3086
          ],
          "type":"vehicle/enterVehicle"
        },
        "976":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerConfig"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1712,
            -2540
          ],
          "type":"types/genericValue"
        },
        "977":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"restartQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1362,
            2794
          ],
          "type":"util/customLua"
        },
        "978":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1530,
            2794
          ],
          "type":"logic/once"
        },
        "979":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":true,
              "flow":false,
              "reset":true
            },
            "p_out":{
              "complete":true,
              "completed":false,
              "flow":true,
              "incomplete":true
            }
          },
          "pos":[
            -1754,
            2794
          ],
          "type":"ui/fadeToBlack"
        },
        "980":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1838,
            2864
          ],
          "type":"logic/flowSwitch"
        },
        "981":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3910,
            -3926
          ],
          "type":"types/genericValue"
        },
        "982":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3924,
            -3842
          ],
          "type":"logic/compare"
        },
        "983":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            430,
            -4038
          ],
          "type":"logic/compare"
        },
        "984":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            472,
            -3884
          ],
          "type":"types/genericValue"
        },
        "985":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            164,
            -3422
          ],
          "type":"types/genericValue"
        },
        "986":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"towing"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2642,
            876
          ],
          "type":"util/customLua"
        },
        "987":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2838,
            876
          ],
          "type":"logic/branch"
        },
        "988":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"towing"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2880,
            1198
          ],
          "type":"util/customLua"
        },
        "989":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"towing"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3518,
            1170
          ],
          "type":"util/customLua"
        },
        "990":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal idtable = {station = 1, repair = 2, usedcarshop = 3, partshop = 4,  garage=5,race=6}\nlocal tname = self.pinIn.name.value\nlocal tdata = self.pinIn.tdata.value\n\nif tdata[tname] == nil then\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nelse\nlocal tsplit = extensions.blrutils.ssplit(tdata[tname], \",\")\nlocal type = tsplit[1]\nlocal extras = tsplit[2]\nif type ~= nil then\nself.pinOut.typeName.value = type\nself.pinOut.typeID.value = idtable[type]\nif extras ~= nil then\nself.pinOut.extras.value = \"beamLR/mapdata/\" .. extensions.blrutils.getLevelName() .. \"/triggerData/\" .. extras\nelse\nself.pinOut.extras.value = \"none\"\nend\nelse\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nend\nend"
          },
          "customName":"Trig Type",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false,
              "tdata":false
            },
            "p_out":{
              "extras":false,
              "flow":false,
              "typeID":false,
              "typeName":true
            }
          },
          "name":"Trigger Name To Type",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "typeName",
              null,
              ""
            ],
            [
              "out",
              "number",
              "typeID",
              null,
              ""
            ],
            [
              "in",
              "table",
              "tdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            570,
            -566
          ],
          "type":"util/customLua"
        },
        "991":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local typeID = self.pinIn.typeID.value\nself.pinOut.result.value = typeID == 2 or typeID == 4 or typeID == 5"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "typeID":false
            },
            "p_out":{
              "flow":false,
              "result":false
            }
          },
          "name":"Trigger UI Data Test",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "typeID",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "result",
              null,
              ""
            ]
          ],
          "pos":[
            752,
            -566
          ],
          "type":"util/customLua"
        },
        "992":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            752,
            -468
          ],
          "type":"logic/branch"
        },
        "993":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"reloadOptions"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -984,
            190
          ],
          "type":"util/customLua"
        },
        "994":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -984,
            302
          ],
          "type":"logic/branch"
        },
        "995":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3196,
            -3464
          ],
          "type":"logic/branch"
        },
        "996":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -788,
            190
          ],
          "type":"logic/once"
        },
        "997":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"reloadOptions"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -444,
            596
          ],
          "type":"util/customLua"
        },
        "998":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local toRet = \"\"\nlocal fmt = string.format(\"%%.%df\", self.pinIn.floatPre.value)\nlocal valText = \"\"\n\nif self.pinIn.isFloat.value == true then \nvalText = string.format(fmt, self.pinIn.value.value)\nelse\nvalText = \"\" .. self.pinIn.value.value\nend\n\nif self.pinIn.prefix.value ~= nil and self.pinIn.showPre.value then\ntoRet = self.pinIn.prefix.value .. valText\nelse\ntoRet = self.pinIn.value.value\nend\n\nif self.pinIn.suffix.value ~= nil and self.pinIn.showSuf.value then\ntoRet = toRet .. self.pinIn.suffix.value\nend\n\nself.pinOut.output.value = toRet"
          },
          "customName":"Sleep Text",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "floatPre":{
              "type":"number",
              "value":1
            },
            "isFloat":{
              "type":"bool",
              "value":true
            },
            "prefix":{
              "type":"string",
              "value":"Sleep & Heal ("
            },
            "showPre":{
              "type":"bool",
              "value":true
            },
            "showSuf":{
              "type":"bool",
              "value":true
            },
            "suffix":{
              "type":"string",
              "value":" Hours)"
            }
          },
          "hiddenPins":{
            "p_in":{
              "floatPre":true,
              "flow":false,
              "isFloat":true,
              "prefix":true,
              "showPre":true,
              "showSuf":true,
              "suffix":true,
              "value":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Prefixed Value Display",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ],
            [
              "in",
              "string",
              "prefix",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "suffix",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showPre",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "showSuf",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "isFloat",
              null,
              ""
            ],
            [
              "in",
              "number",
              "floatPre",
              null,
              ""
            ]
          ],
          "pos":[
            1956,
            78
          ],
          "type":"util/customLua"
        },
        "999":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5806,
            470
          ],
          "type":"vehicle/enterVehicle"
        },
        "1000":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -830,
            2276
          ],
          "type":"vehicle/enterVehicle"
        },
        "1001":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"veidref"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            5638,
            456
          ],
          "type":"types/genericValue"
        },
        "1002":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3762,
            2178
          ],
          "type":"util/customLua"
        },
        "1003":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"veidref"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1564,
            36
          ],
          "type":"types/genericValue"
        },
        "1004":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"veidref"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1096,
            2402
          ],
          "type":"types/genericValue"
        },
        "1005":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3602,
            -3170
          ],
          "type":"logic/branch"
        },
        "1006":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeStartTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3392,
            -3198
          ],
          "type":"types/genericValue"
        },
        "1007":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -3294,
            -3142
          ],
          "type":"util/customLua"
        },
        "1008":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3070,
            -3702
          ],
          "type":"logic/compare"
        },
        "1009":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeFailed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3238,
            -3674
          ],
          "type":"types/genericValue"
        },
        "1010":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Challenge Failed!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2860,
            -3674
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1011":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3322,
            -3324
          ],
          "type":"logic/branch"
        },
        "1012":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"challengeFailed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3126,
            -3226
          ],
          "type":"types/genericValue"
        },
        "1013":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ctime = extensions.blrutils.getRaceTime()\nlocal stime = self.pinIn.startTime.value or 0\nlocal ttime = self.pinIn.targetTime.value\nlocal etime = self.pinIn.endTime.value or 0\nlocal finished = self.pinIn.finished.value\nlocal ready = self.pinIn.ready.value\nlocal etimeFormat = extensions.blrutils.msTimeFormat(etime - stime)\nlocal ctimeFormat = extensions.blrutils.msTimeFormat(ctime - stime)\n\nif finished then\nself.pinOut.time.value = (etime - stime) / 1000.0\nelseif ready and self.pinIn.failed.value == 1 then\nself.pinOut.time.value = (ttime) / 1000.0\nelseif ready then\nself.pinOut.time.value = (ctime - stime) / 1000.0\nelse\nself.pinOut.time.value = 0\nend\n\n\n\nif ready then\n\nif self.pinIn.failed.value == 1 or ctime > stime + ttime then\nself.pinOut.failed.value = true\nself.pinOut.txt.value = \"Challenge Failed!\"\nextensions.blrglobals.blrFlagSet(\"updateDriftScore\", false)\nelse\nself.pinOut.failed.value = false\nself.pinOut.txt.value = \"Time: \" .. extensions.blrutils.raceTimeString(ctimeFormat)\nend\n\nelse\nself.pinOut.txt.value = \"Timer waiting...\"\nself.pinOut.failed.value = false\nend\n\nif finished then\nself.pinOut.failed.value = false\nself.pinOut.txt.value = \"Finished in: \" .. extensions.blrutils.raceTimeString(etimeFormat)\nend\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "endTime":false,
              "failed":false,
              "finished":false,
              "flow":false,
              "ready":false,
              "startTime":false,
              "targetTime":false
            },
            "p_out":{
              "failed":false,
              "flow":false,
              "time":false,
              "txt":false
            }
          },
          "name":"Challenge Timer",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "startTime",
              null,
              ""
            ],
            [
              "out",
              "string",
              "txt",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ready",
              null,
              ""
            ],
            [
              "in",
              "number",
              "targetTime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "failed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "endTime",
              null,
              ""
            ],
            [
              "in",
              "number",
              "failed",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "finished",
              null,
              ""
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -3574,
            -3408
          ],
          "type":"util/customLua"
        },
        "1014":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- 0.32 fixed for new hook format\nguihooks.trigger(\"WayPointChange\", {label=\"CP\", current=self.pinIn.ccp.value, count=self.pinIn.cpc.value})"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "ccp":false,
              "cpc":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Race Checkpoints",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "ccp",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ]
          ],
          "pos":[
            -2880,
            -3044
          ],
          "type":"util/customLua"
        },
        "1015":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2880,
            1254
          ],
          "type":"util/customLua"
        },
        "1016":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3924,
            -3408
          ],
          "type":"logic/compare"
        },
        "1017":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"time"
            },
            "value_2":{
              "type":"string",
              "value":"drift"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            -2986,
            -3912
          ],
          "type":"logic/switchcase"
        },
        "1018":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3524,
            1044
          ],
          "type":"util/customLua"
        },
        "1019":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -956,
            400
          ],
          "type":"util/customLua"
        },
        "1020":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -774,
            330
          ],
          "type":"logic/branch"
        },
        "1021":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1810,
            1590
          ],
          "type":"util/customLua"
        },
        "1022":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1306,
            1828
          ],
          "type":"util/customLua"
        },
        "1023":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"string",
              "value":"white"
            },
            "raceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "flow":false,
              "raceMode":true,
              "useGenericMissionDataApp":true,
              "value":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3132,
            -3002
          ],
          "type":"ui/cornerTimerBLR"
        },
        "1024":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.resetCP.value then\nguihooks.trigger('WayPointReset')\nend\n\nif self.pinIn.resetLaps.value then\nguihooks.trigger('RaceLapClear')\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "resetCP":{
              "type":"bool",
              "value":true
            },
            "resetLaps":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetCP":true,
              "resetLaps":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI App Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "resetCP",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "resetLaps",
              null,
              ""
            ]
          ],
          "pos":[
            -2062,
            -3016
          ],
          "type":"util/customLua"
        },
        "1025":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3188,
            -2526
          ],
          "type":"util/customLua"
        },
        "1026":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2964,
            -2442
          ],
          "type":"util/customLua"
        },
        "1027":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            164,
            -90
          ],
          "type":"util/customLua"
        },
        "1028":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2678,
            -3044
          ],
          "type":"logic/flowSwitch"
        },
        "1029":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2468,
            -3030
          ],
          "type":"logic/frameDelay"
        },
        "1030":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2244,
            -3016
          ],
          "type":"logic/once"
        },
        "1031":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3546,
            -3002
          ],
          "type":"logic/once"
        },
        "1032":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                0.00000099999999700000,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":4
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1936,
            -3366
          ],
          "type":"scene/singleMarker"
        },
        "1033":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2328,
            -3366
          ],
          "type":"logic/branch"
        },
        "1034":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -3350,
            -2988
          ],
          "type":"util/customLua"
        },
        "1035":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2272,
            -3226
          ],
          "type":"util/customLua"
        },
        "1036":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local myObj = scenetree.findObjectById(self.pinIn.newPin.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "newPin":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "newPin",
              null,
              ""
            ]
          ],
          "pos":[
            -2118,
            -3366
          ],
          "type":"util/customLua"
        },
        "1037":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1894,
            -3016
          ],
          "type":"types/genericValue"
        },
        "1038":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.resetCP.value then\nguihooks.trigger('WayPointReset')\nend\n\nif self.pinIn.resetLaps.value then\nguihooks.trigger('RaceLapClear')\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "resetCP":{
              "type":"bool",
              "value":true
            },
            "resetLaps":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetCP":true,
              "resetLaps":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI App Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "resetCP",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "resetLaps",
              null,
              ""
            ]
          ],
          "pos":[
            -248,
            -48
          ],
          "type":"util/customLua"
        },
        "1039":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"challengeCheckpoint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2020,
            -3114
          ],
          "type":"types/genericValue"
        },
        "1040":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2776,
            -4052
          ],
          "type":"logic/branch"
        },
        "1041":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2552,
            -3968
          ],
          "type":"util/customLua"
        },
        "1042":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -38,
            -90
          ],
          "type":"util/customLua"
        },
        "1043":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            1468,
            282
          ],
          "commentText":"",
          "commentTitle":"Race Timer & UI Apps",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3444,
            616
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1044":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3420,
            669
          ],
          "type":"logic/bundle"
        },
        "1045":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3420,
            722
          ],
          "type":"types/genericValue"
        },
        "1046":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3252,
            666
          ],
          "type":"logic/compare"
        },
        "1047":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal stime = self.pinIn.startTime.value\nlocal etime = self.pinIn.endTime.value\nlocal ctime = extensions.blrutils.getRaceTime()\nlocal winner = self.pinIn.winner.value\n\nif self.pinIn.ready.value == 0 then\nself.pinOut.time.value = 0\nelse\nif winner~= 0 then\nself.pinOut.time.value = (etime-stime)/1000.0\nelse\nself.pinOut.time.value = (ctime-stime)/1000.0\nend\nend\n\nextensions.blrutils.blrvarSet(\"raceElapsedTime\", (ctime-stime)/1000.0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "endTime":false,
              "flow":false,
              "ready":false,
              "startTime":false,
              "winner":false
            },
            "p_out":{
              "flow":false,
              "time":false
            }
          },
          "name":"Race Timer",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "startTime",
              null,
              ""
            ],
            [
              "in",
              "number",
              "endTime",
              null,
              ""
            ],
            [
              "in",
              "number",
              "winner",
              null,
              ""
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "number",
              "ready",
              null,
              ""
            ]
          ],
          "pos":[
            -2664,
            736
          ],
          "type":"util/customLua"
        },
        "1048":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceStartTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3420,
            820
          ],
          "type":"types/genericValue"
        },
        "1049":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEndTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3238,
            820
          ],
          "type":"types/genericValue"
        },
        "1050":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2090,
            -3226
          ],
          "type":"logic/branch"
        },
        "1051":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2194,
            -2568
          ],
          "type":"types/genericValue"
        },
        "1052":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3056,
            820
          ],
          "type":"types/genericValue"
        },
        "1053":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3042,
            666
          ],
          "type":"logic/once"
        },
        "1054":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2860,
            666
          ],
          "type":"util/customLua"
        },
        "1055":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3042,
            736
          ],
          "type":"logic/once"
        },
        "1056":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"raceTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2860,
            778
          ],
          "type":"util/customLua"
        },
        "1057":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.time.value = extensions.blrutils.getRaceTime()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "time":false
            }
          },
          "name":"BLR Race Time",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -2734,
            -174
          ],
          "type":"util/customLua"
        },
        "1058":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.time.value = extensions.blrutils.getRaceTime()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "time":false
            }
          },
          "name":"BLR Race Time",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -2314,
            218
          ],
          "type":"util/customLua"
        },
        "1059":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEndTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2118,
            190
          ],
          "type":"types/genericValue"
        },
        "1060":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1880,
            -3226
          ],
          "type":"util/customLua"
        },
        "1061":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"string",
              "value":"white"
            },
            "raceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "flow":false,
              "raceMode":true,
              "useGenericMissionDataApp":true,
              "value":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2482,
            652
          ],
          "type":"ui/cornerTimerBLR"
        },
        "1062":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"--0.32 fix for changed hook format\nguihooks.trigger(\"RaceLapChange\", {label=\"Lap\", current=self.pinIn.clap.value, count=self.pinIn.laps.value})"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "clap":false,
              "flow":false,
              "laps":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Race Laps",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "clap",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ]
          ],
          "pos":[
            -2454,
            778
          ],
          "type":"util/customLua"
        },
        "1063":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- 0.32 fixed for new hook format\nguihooks.trigger(\"WayPointChange\", {label=\"CP\", current=self.pinIn.ccp.value, count=self.pinIn.cpc.value})"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "ccp":false,
              "cpc":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Race Checkpoints",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "ccp",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ]
          ],
          "pos":[
            -2272,
            778
          ],
          "type":"util/customLua"
        },
        "1064":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2314,
            666
          ],
          "type":"types/genericValue"
        },
        "1065":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2146,
            666
          ],
          "type":"types/genericValue"
        },
        "1066":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceCountdownComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2664,
            652
          ],
          "type":"types/genericValue"
        },
        "1067":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceCountdownComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -690,
            -552
          ],
          "type":"types/genericValue"
        },
        "1068":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.resetCP.value then\nguihooks.trigger('WayPointReset')\nend\n\nif self.pinIn.resetLaps.value then\nguihooks.trigger('RaceLapClear')\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "resetCP":{
              "type":"bool",
              "value":true
            },
            "resetLaps":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetCP":true,
              "resetLaps":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI App Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "resetCP",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "resetLaps",
              null,
              ""
            ]
          ],
          "pos":[
            -914,
            -440
          ],
          "type":"util/customLua"
        },
        "1069":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            446,
            380
          ],
          "commentText":"",
          "commentTitle":"Passive Healing",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2520,
            2086
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1070":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -942,
            -580
          ],
          "type":"logic/frameDelay"
        },
        "1071":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -886,
            -524
          ],
          "type":"logic/once"
        },
        "1072":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -928,
            -678
          ],
          "type":"logic/flowSwitch"
        },
        "1073":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "arrestLimit":{
              "type":"number",
              "value":5
            },
            "evadeLimit":{
              "type":"number",
              "value":20
            }
          },
          "hiddenPins":{
            "p_in":{
              "arrestLimit":true,
              "arrestRadius":true,
              "evadeLimit":true,
              "evadeRadius":true,
              "flow":false,
              "policeStrictness":false,
              "reset":false,
              "roadblockFrequency":true,
              "suspectFrequency":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -696,
            848
          ],
          "type":"gameplay/traffic/pursuitParams"
        },
        "1074":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.tkey.value] = self.pinIn.tval.value or 0\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nprint(ndata)\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tkey":{
              "type":"string",
              "value":"nos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "tkey":false,
              "tval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            3482,
            1576
          ],
          "type":"util/customLua"
        },
        "1075":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2482,
            2125
          ],
          "type":"logic/bundle"
        },
        "1076":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2482,
            2248
          ],
          "type":"types/genericValue"
        },
        "1077":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"<",
          "pos":[
            -2468,
            2332
          ],
          "type":"logic/compare"
        },
        "1078":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.nhp.value = math.min(self.pinIn.chp.value + self.pinIn.delta.value, 100)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "delta":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "chp":false,
              "delta":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "nhp":false
            }
          },
          "name":"Passive Healing",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "chp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nhp",
              null,
              ""
            ],
            [
              "in",
              "number",
              "delta",
              null,
              ""
            ]
          ],
          "pos":[
            -2258,
            2248
          ],
          "type":"util/customLua"
        },
        "1079":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"cnos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -1558,
            -1812
          ],
          "type":"util/customLua"
        },
        "1080":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"pnos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -892,
            1856
          ],
          "type":"util/customLua"
        },
        "1081":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            724,
            -1770
          ],
          "type":"util/customLua"
        },
        "1082":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "asDuration":{
              "type":"bool",
              "value":true
            },
            "input":{
              "type":"number",
              "value":3
            },
            "reverseHit":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2496,
            2164
          ],
          "type":"logic/rateLimit"
        },
        "1083":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2244,
            2360
          ],
          "type":"types/genericValue"
        },
        "1084":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            -2258,
            2122
          ],
          "type":"logic/compare"
        },
        "1085":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal mass = self.pinIn.mass.value\nif mass == 0 then mass = 0.000000000001 end\nif extensions.blrutils.nitrousCheck(veid) then\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(string.format(\"energyStorage.getStorage(\\\"mainBottle\\\"):setRemainingMass(%.12f)\", mass))\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set N2O",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ]
          ],
          "pos":[
            906,
            -2050
          ],
          "type":"util/customLua"
        },
        "1086":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal mass = self.pinIn.mass.value\nif mass == 0 then mass = 0.000000000001 end\nif extensions.blrutils.nitrousCheck(veid) then\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(string.format(\"energyStorage.getStorage(\\\"mainBottle\\\"):setRemainingMass(%.12f)\", mass))\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set N2O",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ]
          ],
          "pos":[
            1530,
            834
          ],
          "type":"util/customLua"
        },
        "1087":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal mass = self.pinIn.mass.value\nif mass == 0 then mass = 0.000000000001 end\nif extensions.blrutils.nitrousCheck(veid) then\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(string.format(\"energyStorage.getStorage(\\\"mainBottle\\\"):setRemainingMass(%.12f)\", mass))\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set N2O",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ]
          ],
          "pos":[
            -578,
            2248
          ],
          "type":"util/customLua"
        },
        "1088":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal parts = extensions.betterpartmgmt.getVehicleParts()\nlocal hasNos = false\nif parts[\"n2o_system\"] then\nhasNos = parts[\"n2o_system\"] ~= \"\"\nend\nself.pinOut.hasNos.value = hasNos"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "hasNos":false
            }
          },
          "name":"N2O Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "hasNos",
              null,
              ""
            ]
          ],
          "pos":[
            1382,
            960
          ],
          "type":"util/customLua"
        },
        "1089":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            1390,
            1002
          ],
          "type":"util/customLua"
        },
        "1090":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            5366,
            -916
          ],
          "type":"util/customLua"
        },
        "1091":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3426,
            -1896
          ],
          "type":"util/customLua"
        },
        "1092":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"hasNos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2454,
            -1448
          ],
          "type":"util/customLua"
        },
        "1093":{
          "data":{
            "aboveSpacing":5,
            "belowSpacing":5
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -158,
            -2050
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "1094":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -136,
            -2176
          ],
          "type":"logic/branch"
        },
        "1095":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -368,
            -1938
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1096":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            80,
            -2106
          ],
          "type":"logic/branch"
        },
        "1097":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            -172,
            -1952
          ],
          "type":"logic/compare"
        },
        "1098":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3006,
            -3450
          ],
          "type":"vehicle/enterVehicle"
        },
        "1099":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veid = self.pinIn.veid.value\nlocal cost = self.pinIn.cost.value\nlocal mass = self.pinIn.mass.value\nlocal cap = self.pinIn.cap.value\nlocal fillval = cap - mass\nlocal paid = 0\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(\"energyStorage.getStorage('mainBottle'):setRemainingMass(\" .. cap .. \")\")\npaid = fillval * cost\nend\n\nself.pinOut.paid.value = paid\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cost":{
              "type":"number",
              "value":12
            }
          },
          "hiddenPins":{
            "p_in":{
              "cap":false,
              "cost":false,
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "paid":false
            }
          },
          "name":"N2O Refill",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cap",
              null,
              ""
            ],
            [
              "out",
              "number",
              "paid",
              null,
              ""
            ]
          ],
          "pos":[
            24,
            -1924
          ],
          "type":"util/customLua"
        },
        "1100":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -438,
            -1784
          ],
          "type":"util/customLua"
        },
        "1101":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -270,
            -1784
          ],
          "type":"types/genericValue"
        },
        "1102":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":false,
              "reputation":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            -102,
            -1784
          ],
          "type":"util/customLua"
        },
        "1103":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.vehid.value = self.pinIn.idtable.value[self.pinIn.slot.value]"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "slot":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false,
              "slot":false
            },
            "p_out":{
              "flow":false,
              "vehid":false
            }
          },
          "name":"Get Shop Slot VEHID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "slot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "out",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            2670,
            -3156
          ],
          "type":"util/customLua"
        },
        "1104":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mode":{
              "type":"string",
              "value":"orbit"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mode":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3580,
            -2834
          ],
          "type":"scene/camera/setCameraMode"
        },
        "1105":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"playervehid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2810,
            -2568
          ],
          "type":"util/customLua"
        },
        "1106":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"shopmode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2992,
            -2568
          ],
          "type":"util/customLua"
        },
        "1107":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"shopmode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3574,
            -3324
          ],
          "type":"util/customLua"
        },
        "1108":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"parkingMarkerReset"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2426,
            -678
          ],
          "type":"util/customLua"
        },
        "1109":{
          "alpha":1,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"or started to reset markers\\n",
          "commentTitle":"Reset flow when race gave up",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -2226,
            -672
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1110":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"shopmode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -200,
            246
          ],
          "type":"util/customLua"
        },
        "1111":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1218,
            -2601
          ],
          "type":"logic/bundle"
        },
        "1112":{
          "count":7,
          "customName":"Player Inside Trigger",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"station"
            },
            "value_2":{
              "type":"string",
              "value":"repair"
            },
            "value_3":{
              "type":"string",
              "value":"carshop"
            },
            "value_4":{
              "type":"string",
              "value":"partshop"
            },
            "value_5":{
              "type":"string",
              "value":"garage"
            },
            "value_6":{
              "type":"string",
              "value":"race"
            },
            "value_7":{
              "type":"string",
              "value":"dare"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false,
              "value_4":false,
              "value_5":false,
              "value_6":false,
              "value_7":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "match_4":false,
              "match_5":false,
              "match_6":false,
              "match_7":false,
              "none":false
            }
          },
          "pos":[
            738,
            -1056
          ],
          "type":"logic/switchcase"
        },
        "1113":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            49
          ],
          "commentText":"",
          "commentTitle":"Active Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1190,
            -2632
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1114":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrStationDisplays()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Init Gas Displays",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1040,
            1240
          ],
          "type":"util/customLua"
        },
        "1115":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":true,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2384,
            -594
          ],
          "type":"logic/branch"
        },
        "1116":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "message":{
              "type":"string",
              "value":"Tank Drained"
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2754,
            -1252
          ],
          "type":"ui/flashMessage"
        },
        "1117":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"parkingMarkerReset"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2188,
            -608
          ],
          "type":"util/customLua"
        },
        "1118":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1214,
            -199
          ],
          "type":"logic/bundle"
        },
        "1119":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"parkingMarkerReset"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1110,
            -342
          ],
          "type":"util/customLua"
        },
        "1120":{
          "customName":"Set Car Count Value",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1474,
            -118
          ],
          "type":"types/genericValue"
        },
        "1121":{
          "customName":"Get Car Count",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1774,
            -468
          ],
          "type":"types/genericValue"
        },
        "1122":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -958
          ],
          "type":"logic/and"
        },
        "1123":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3042,
            -552
          ],
          "type":"types/genericValue"
        },
        "1124":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3056,
            -468
          ],
          "type":"logic/compare"
        },
        "1125":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fuel":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            2964,
            -1322
          ],
          "type":"util/customLua"
        },
        "1126":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"parkingMarkerReset"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -438,
            134
          ],
          "type":"util/customLua"
        },
        "1127":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal total = tonumber(self.pinIn.total.value or \"0\")\nlocal units = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal cost = self.pinIn.cost.value\nlocal txt = \"\"\n\nif units == \"imperial\" then\ntxt = \"Quantity: \" .. string.format(\"%.2f\", total / 3.785) .. \" gallons\\n\"\ntxt = txt .. \"Cost: $\" .. string.format(\"%.2f\", cost * total)\nelse\ntxt = \"Quantity: \" .. string.format(\"%.2f\", total) .. \" liters\\n\"\ntxt = txt .. \"Cost: $\" .. string.format(\"%.2f\", cost * total)\nend\n\nself.pinOut.txt.value = txt"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "flow":false,
              "txt":false
            }
          },
          "name":"Live Added Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "total",
              null,
              ""
            ],
            [
              "out",
              "string",
              "txt",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            2006,
            -1182
          ],
          "type":"util/customLua"
        },
        "1128":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nlocal ratiostr = self.pinIn.fuelratio.value\nlocal typestr = self.pinIn.fueltype.value\nlocal fueltypes = {}\nlocal fuelratios = {}\nve:queueLuaCommand(\"extensions.blrVehicleUtils.loadFuelType()\")\nif typestr then\nfuelratios = extensions.blrutils.ssplitnum(ratiostr, \",\")\nfueltypes = extensions.blrutils.ssplit(typestr, \",\")\nif #fueltypes == 1 then\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nelse -- force disable the engine if tank contains mixed fuel types\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f, true)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nend\nelse\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))\nend\n"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "fuelratio":false,
              "fueltype":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fuelratio",
              null,
              ""
            ]
          ],
          "pos":[
            5128,
            400
          ],
          "type":"util/customLua"
        },
        "1129":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal result = extensions.blrTrailerManager.towhitchCheck()\nself.pinOut.result.value = result"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "result":false
            }
          },
          "name":"Tow Hitch Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "result",
              null,
              ""
            ]
          ],
          "pos":[
            150,
            -2988
          ],
          "type":"util/customLua"
        },
        "1130":{
          "customName":"Set Page",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"carStorePage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2572,
            -2358
          ],
          "type":"types/genericValue"
        },
        "1131":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":4
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Get Challenge"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -3000,
            -4290
          ],
          "type":"util/customLua"
        },
        "1132":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nlocal ratiostr = self.pinIn.fuelratio.value\nlocal typestr = self.pinIn.fueltype.value\nlocal fueltypes = {}\nlocal fuelratios = {}\nve:queueLuaCommand(\"extensions.blrVehicleUtils.loadFuelType()\")\nif typestr then\nfuelratios = extensions.blrutils.ssplitnum(ratiostr, \",\")\nfueltypes = extensions.blrutils.ssplit(typestr, \",\")\nif #fueltypes == 1 then\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nelse -- force disable the engine if tank contains mixed fuel types\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f, true)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nend\nelse\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))\nend\n"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "fuelratio":false,
              "fueltype":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fuelratio",
              null,
              ""
            ]
          ],
          "pos":[
            1348,
            862
          ],
          "type":"util/customLua"
        },
        "1133":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"fuelTypeString"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            934,
            -1812
          ],
          "type":"util/customLua"
        },
        "1134":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":1
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Sell Car"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2558,
            -1938
          ],
          "type":"util/customLua"
        },
        "1135":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1130,
            1940
          ],
          "type":"logic/once"
        },
        "1136":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            446,
            492
          ],
          "commentText":"",
          "commentTitle":"Day Change Detector",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            392,
            1904
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1137":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerDataPath"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            444,
            2304
          ],
          "type":"types/genericValue"
        },
        "1138":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal extras = self.pinIn.extras.value\nlocal triggerExtras = {}\nlocal scalevals = {}\nlocal shopID = 0\nlocal priceScale = 1.5\nif extras and extras ~= \"\" then\nif FS:fileExists(extras) then\ntriggerExtras = extensions.blrutils.loadDataTable(self.pinIn.extras.value)\nif triggerExtras[\"shopID\"] and triggerExtras[\"scale\"] then\nshopID = tonumber(triggerExtras[\"shopID\"])\nscalevals = extensions.blrutils.ssplitnum(triggerExtras[\"scale\"], \",\")\npriceScale = extensions.blrutils.getPartShopPriceScale(shopID, scalevals[1], scalevals[2])\nend\nend\nend\n\nextensions.customGuiStream.sendDataToUI(\"shopPriceScale\", priceScale)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "extras":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Price Scale",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            640,
            1954
          ],
          "type":"util/customLua"
        },
        "1139":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1474,
            1660
          ],
          "type":"types/genericValue"
        },
        "1140":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal rep = math.max(0, self.pinIn.rep.value - 25)\nself.pinOut.new.value = rep\nextensions.blrglobals.fgSetVal(\"playerRep\", rep)\nlocal pdata = extensions.blrutils.eventBrowserGetPlayerData()\nextensions.customGuiStream.sendEventBrowserPlayerData(pdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "rep":false
            },
            "p_out":{
              "flow":false,
              "new":false
            }
          },
          "name":"Rep Loss",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "out",
              "number",
              "new",
              null,
              ""
            ]
          ],
          "pos":[
            -1474,
            1730
          ],
          "type":"util/customLua"
        },
        "1141":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1474,
            1786
          ],
          "type":"types/genericValue"
        },
        "1142":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            668,
            2066
          ],
          "type":"types/genericValue"
        },
        "1143":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal rep = math.max(0, self.pinIn.rep.value - 25)\nself.pinOut.new.value = rep\nextensions.blrglobals.fgSetVal(\"playerRep\", rep)\nlocal pdata = extensions.blrutils.eventBrowserGetPlayerData()\nextensions.customGuiStream.sendEventBrowserPlayerData(pdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "rep":false
            },
            "p_out":{
              "flow":false,
              "new":false
            }
          },
          "name":"Rep Loss",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "out",
              "number",
              "new",
              null,
              ""
            ]
          ],
          "pos":[
            654,
            2178
          ],
          "type":"util/customLua"
        },
        "1144":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            654,
            2290
          ],
          "type":"types/genericValue"
        },
        "1145":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2138,
            554
          ],
          "type":"logic/branch"
        },
        "1146":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.drain.value = self.pinIn.flow.value and not self.pinIn.gate.value"
          },
          "customColor":[
            0.62685906887054443359,
            0.62685281038284301758,
            0.62685906887054443359,
            0.75000000000000000000
          ],
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gate":false
            },
            "p_out":{
              "drain":false,
              "flow":true
            }
          },
          "name":"NOT Gate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "drain",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "gate",
              null,
              ""
            ]
          ],
          "pos":[
            1942,
            246
          ],
          "type":"util/customLua"
        },
        "1147":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2110,
            246
          ],
          "type":"logic/once"
        },
        "1148":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2264,
            246
          ],
          "type":"types/genericValue"
        },
        "1149":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":4
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -2566,
            -4304
          ],
          "type":"util/customLua"
        },
        "1150":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrutils.resetTimeOfDay()\nextensions.blrutils.deleteMarkers()\nextensions.blrglobals.blrFlagsInit()",
            "onPreRender":"",
            "work":"-- Add cleanup code in _executionStopped"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mission Cleanup",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -242,
            764
          ],
          "type":"util/customLua"
        },
        "1151":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            810,
            520
          ],
          "commentText":"",
          "commentTitle":"Drift Score",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            882,
            1638
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1152":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"useDriftUI"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            906,
            1688
          ],
          "type":"util/customLua"
        },
        "1153":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            906,
            1800
          ],
          "type":"logic/branch"
        },
        "1154":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1102,
            1674
          ],
          "type":"logic/once"
        },
        "1155":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "setVehId":false,
              "vehId":false
            },
            "p_out":{
              "flow":false,
              "vehId":false
            }
          },
          "pos":[
            1284,
            1674
          ],
          "type":"gameplay/drift/driftVeh"
        },
        "1156":{
          "customName":"P VEH",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            1186,
            1758
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1157":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "cachedScore":false,
              "combo":true,
              "flow":false,
              "score":false
            }
          },
          "pos":[
            1130,
            2024
          ],
          "type":"gameplay/drift/driftScore"
        },
        "1158":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendCurrentDrift(math.floor(self.pinIn.current.value) or 0)\nextensions.customGuiStream.sendTotalDrift(self.pinIn.total.value or 0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Drift UI Scores",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "in",
              "number",
              "total",
              null,
              ""
            ]
          ],
          "pos":[
            1438,
            2038
          ],
          "type":"util/customLua"
        },
        "1159":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.toggleDriftUI(self.pinIn.toggle.value or false)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Drift UI Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1508,
            1674
          ],
          "type":"util/customLua"
        },
        "1160":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1144,
            1828
          ],
          "type":"logic/once"
        },
        "1161":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.toggleDriftUI(self.pinIn.toggle.value or false)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Drift UI Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1522,
            1800
          ],
          "type":"util/customLua"
        },
        "1162":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetDrift":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1312,
            1926
          ],
          "type":"gameplay/drift/driftReset"
        },
        "1163":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"useDriftUI"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2594,
            -3898
          ],
          "type":"util/customLua"
        },
        "1164":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetDrift":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1312,
            1814
          ],
          "type":"gameplay/drift/driftReset"
        },
        "1165":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"updateDriftScore"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            920,
            1926
          ],
          "type":"util/customLua"
        },
        "1166":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            920,
            2052
          ],
          "type":"logic/branch"
        },
        "1167":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- will handle get and set value\nlocal extensions = require(\"extensions\")\n\nlocal stotal = extensions.blrutils.getDriftTotal()\nlocal scurrent = extensions.blrutils.getDriftCurrent()\nlocal ctotal = self.pinIn.total.value \nlocal ccurrent = self.pinIn.current.value \n\nif ctotal then\nextensions.blrutils.setDriftTotal(ctotal)\nend\n\nif ccurrent then\nextensions.blrutils.setDriftCurrent(ccurrent)\nend\n\nself.pinOut.total.value = stotal\nself.pinOut.current.value = scurrent"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "current":false,
              "flow":false,
              "total":false
            }
          },
          "name":"BLR Drift Score",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "total",
              null,
              ""
            ],
            [
              "out",
              "number",
              "total",
              null,
              ""
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ]
          ],
          "pos":[
            1354,
            2038
          ],
          "type":"util/customLua"
        },
        "1168":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"useDriftUI"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2636,
            -3422
          ],
          "type":"util/customLua"
        },
        "1169":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"updateDriftScore"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2460,
            -3436
          ],
          "type":"util/customLua"
        },
        "1170":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "resetDrift":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1508,
            1730
          ],
          "type":"gameplay/drift/driftReset"
        },
        "1171":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendCurrentDrift(math.floor(self.pinIn.current.value) or 0)\nextensions.customGuiStream.sendTotalDrift(self.pinIn.total.value or 0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "current":{
              "type":"number",
              "value":0
            },
            "total":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Drift UI Scores",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "in",
              "number",
              "total",
              null,
              ""
            ]
          ],
          "pos":[
            1522,
            1884
          ],
          "type":"util/customLua"
        },
        "1172":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"trailer"
            },
            "value_2":{
              "type":"string",
              "value":"gooseneck"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            -234,
            -5270
          ],
          "type":"logic/switchcase"
        },
        "1173":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"useDriftUI"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -256,
            652
          ],
          "type":"util/customLua"
        },
        "1174":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"updateDriftScore"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -256,
            708
          ],
          "type":"util/customLua"
        },
        "1175":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":1
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2558,
            -1798
          ],
          "type":"util/customLua"
        },
        "1176":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.resetButtonConfirm()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"IM Confirm Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -312,
            876
          ],
          "type":"util/customLua"
        },
        "1177":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.resetButtonConfirm()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"IM Confirm Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            192,
            -958
          ],
          "type":"util/customLua"
        },
        "1178":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and extensions.blrglobals.blrFlagGet(\"imToggle\")\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":2
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ]
          ],
          "pos":[
            3860,
            -62
          ],
          "type":"util/customLua"
        },
        "1179":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":3
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Purchase"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            1872,
            -3436
          ],
          "type":"util/customLua"
        },
        "1180":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":3
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2544,
            -2722
          ],
          "type":"util/customLua"
        },
        "1181":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":5
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Accept"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -942,
            -1084
          ],
          "type":"util/customLua"
        },
        "1182":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":5
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Race"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -606,
            -1378
          ],
          "type":"util/customLua"
        },
        "1183":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -284,
            -1294
          ],
          "type":"util/customLua"
        },
        "1184":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -480,
            -566
          ],
          "type":"util/customLua"
        },
        "1185":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2012,
            946
          ],
          "type":"logic/frameDelay"
        },
        "1186":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2236,
            960
          ],
          "type":"logic/once"
        },
        "1187":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"policeResetRequest\", false)\nextensions.blrutils.updateCopTable()\nextensions.blrutils.copfixReset()\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Copfix Update Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -662,
            1114
          ],
          "type":"util/customLua"
        },
        "1188":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":true,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1760,
            246
          ],
          "type":"logic/flowSwitch"
        },
        "1189":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2390,
            960
          ],
          "type":"types/genericValue"
        },
        "1190":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            1984,
            1072
          ],
          "type":"logic/compare"
        },
        "1191":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            612,
            -4290
          ],
          "type":"util/customLua"
        },
        "1192":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2104,
            -3450
          ],
          "type":"util/customLua"
        },
        "1193":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"imToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2076,
            -4066
          ],
          "type":"util/customLua"
        },
        "1194":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2180,
            1072
          ],
          "type":"types/genericValue"
        },
        "1195":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            2348,
            1072
          ],
          "type":"logic/compare"
        },
        "1196":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2110,
            1170
          ],
          "type":"types/genericValue"
        },
        "1197":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":true,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            2222,
            1170
          ],
          "type":"logic/compare"
        },
        "1198":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            6080,
            288
          ],
          "type":"util/customLua"
        },
        "1199":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1522,
            890
          ],
          "type":"util/customLua"
        },
        "1200":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -1012,
            2444
          ],
          "type":"util/customLua"
        },
        "1201":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1082,
            -2022
          ],
          "type":"util/customLua"
        },
        "1202":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            5366,
            -972
          ],
          "type":"util/customLua"
        },
        "1203":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            3426,
            -1966
          ],
          "type":"util/customLua"
        },
        "1204":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "var":{
              "type":"string",
              "value":"minRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -2110,
            -1364
          ],
          "type":"util/customLua"
        },
        "1205":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            446,
            198
          ],
          "commentText":"",
          "commentTitle":"Police Role Conflict Fix AI Mode Fetch",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            896,
            1372
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1206":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"roleFixToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            934,
            1408
          ],
          "type":"util/customLua"
        },
        "1207":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1130,
            1408
          ],
          "type":"logic/branch"
        },
        "1208":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.fetchCopsAIModes()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Cop Role Fix Fetch",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            934,
            1506
          ],
          "type":"util/customLua"
        },
        "1209":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nextensions.blrutils.fetchVehicleUtilsData(veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Fetch VehUtils Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            -3252,
            1548
          ],
          "type":"util/customLua"
        },
        "1210":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"print(\"UI Layout Reset\")\ncore_gamestate.setGameState('freeroam','freeroam','freeroam')\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Enter Freeroam",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            948,
            638
          ],
          "type":"util/customLua"
        },
        "1211":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"guihooks.trigger('MenuItemNavigation','toggleMenues')"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Menu",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            556,
            134
          ],
          "type":"util/customLua"
        },
        "1212":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3462,
            1758
          ],
          "type":"logic/frameDelay"
        },
        "1213":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"waitmsg\", self.pinIn.msg.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "msg":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "msg":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Wait Message",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            920,
            456
          ],
          "type":"util/customLua"
        },
        "1214":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3462,
            1632
          ],
          "type":"logic/flowSwitch"
        },
        "1215":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"shopWalkingMode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2888,
            -3142
          ],
          "type":"util/customLua"
        },
        "1216":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal gid = self.pinIn.gid.value\nlocal data = extensions.blrutils.eventBrowserGetCarData(gid)\nextensions.customGuiStream.sendEventBrowserCarData(data)\nextensions.customGuiStream.sendEventBrowserInspectionStatus(extensions.blrutils.getEventInspectionStatus())\nlocal perfdata = extensions.blrutils.performanceUIData()\nextensions.customGuiStream.sendPerfUIData(perfdata)\nprint(\"Should have reloaded perfdata\")\ndump(perfdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Event Car Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            -3230,
            1842
          ],
          "type":"util/customLua"
        },
        "1217":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3210,
            1730
          ],
          "type":"types/genericValue"
        },
        "1218":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            6240,
            498
          ],
          "type":"util/customLua"
        },
        "1219":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -3259,
            1646
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1220":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            460,
            453
          ],
          "commentText":"",
          "commentTitle":"Event Browser Car Data Update",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -3486,
            1512
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1221":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3076,
            -3156
          ],
          "type":"logic/branch"
        },
        "1222":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.towingUIToggle(self.pinIn.show.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "show":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "show":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Show Towing UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "show",
              null,
              ""
            ]
          ],
          "pos":[
            2384,
            8
          ],
          "type":"util/customLua"
        },
        "1223":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal flag = self.pinIn.flag.value\nlocal onceMode = self.pinIn.onceMode.value\nlocal state = extensions.blrglobals.blrFlagGet(flag)\nlocal outflow = state\nif state and onceMode then extensions.blrglobals.blrFlagSet(flag, false) end\nself.pinOut.out.value = outflow and self.pinIn.flow.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"string",
              "value":"towQueued"
            },
            "onceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "onceMode":true
            },
            "p_out":{
              "flow":true,
              "out":false
            }
          },
          "name":"BLR Flag Flow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "out",
              null,
              ""
            ],
            [
              "in",
              "string",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "onceMode",
              null,
              ""
            ]
          ],
          "pos":[
            2656,
            1142
          ],
          "type":"util/customLua"
        },
        "1224":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendEventBrowserList(extensions.blrutils.eventBrowserGetList())"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Init Event Browser",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1536,
            1086
          ],
          "type":"util/customLua"
        },
        "1225":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            1558,
            1002
          ],
          "type":"util/customLua"
        },
        "1226":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            354,
            -2778
          ],
          "type":"logic/branch"
        },
        "1227":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3944,
            2178
          ],
          "type":"util/customLua"
        },
        "1228":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            3426,
            -2036
          ],
          "type":"util/customLua"
        },
        "1229":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            5366,
            -1028
          ],
          "type":"util/customLua"
        },
        "1230":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -914,
            2444
          ],
          "type":"util/customLua"
        },
        "1231":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2110,
            -1420
          ],
          "type":"util/customLua"
        },
        "1232":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.towingUIToggle(self.pinIn.show.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "show":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "show":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Show Towing UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "show",
              null,
              ""
            ]
          ],
          "pos":[
            2874,
            1422
          ],
          "type":"util/customLua"
        },
        "1233":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            432,
            380
          ],
          "commentText":"",
          "commentTitle":"Event Joining",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2996,
            2086
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1234":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2972,
            2346
          ],
          "type":"types/genericValue"
        },
        "1235":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"joinEventRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2972,
            2122
          ],
          "type":"util/customLua"
        },
        "1236":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2776,
            2122
          ],
          "type":"logic/branch"
        },
        "1237":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2972,
            2234
          ],
          "type":"logic/once"
        },
        "1238":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal gid = self.pinIn.gid.value\nlocal event = extensions.blrutils.blrvarGet(\"joinedEventFile\")\nlocal uid = extensions.blrutils.blrvarGet(\"joinedEventUID\")\nextensions.blrutils.joinEvent(event, gid, uid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Join Event",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            -2762,
            2248
          ],
          "type":"util/customLua"
        },
        "1239":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"joinEventRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2748,
            2360
          ],
          "type":"util/customLua"
        },
        "1240":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.checkVehicleEventRestricted(self.pinIn.gid.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Event Car Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            1544,
            1128
          ],
          "type":"util/customLua"
        },
        "1241":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.checkVehicleEventRestricted(self.pinIn.gid.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Event Car Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            6232,
            414
          ],
          "type":"util/customLua"
        },
        "1242":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            460,
            352
          ],
          "commentText":"",
          "commentTitle":"Event Restriction Update",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -3500,
            2226
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1243":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"eventRestrictUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -3462,
            2262
          ],
          "type":"util/customLua"
        },
        "1244":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -3476,
            2374
          ],
          "type":"logic/branch"
        },
        "1245":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3476,
            2500
          ],
          "type":"logic/once"
        },
        "1246":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.checkVehicleEventRestricted(self.pinIn.gid.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Event Car Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            -3238,
            2388
          ],
          "type":"util/customLua"
        },
        "1247":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"eventRestrictUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -3238,
            2486
          ],
          "type":"util/customLua"
        },
        "1248":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3252,
            2262
          ],
          "type":"types/genericValue"
        },
        "1249":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"vehicleEventRestricted"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":true
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            3440,
            8
          ],
          "type":"util/customLua"
        },
        "1250":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3622,
            -48
          ],
          "type":"logic/branch"
        },
        "1251":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Cannot scrap vehicle in use for race event!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3798,
            -272
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1252":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"vehicleEventRestricted"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":true
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2110,
            -2190
          ],
          "type":"util/customLua"
        },
        "1253":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2264,
            -2204
          ],
          "type":"logic/branch"
        },
        "1254":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Cannot sell vehicle in use for race event!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2306,
            -2316
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1255":{
          "data":{
            "aboveSpacing":10,
            "belowSpacing":10
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2306,
            -2246
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "1256":{
          "data":{
            "aboveSpacing":5,
            "belowSpacing":5
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            612,
            -2722
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "1257":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Need tow hitch to accept!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            808,
            -2736
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1258":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"trailer"
            },
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "string",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            326,
            -3436
          ],
          "type":"util/customLua"
        },
        "1259":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"small"
            },
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "string",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            136,
            -3352
          ],
          "type":"util/customLua"
        },
        "1260":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerDestRot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1544,
            -2456
          ],
          "type":"types/genericValue"
        },
        "1261":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerDestPos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1712,
            -2456
          ],
          "type":"types/genericValue"
        },
        "1262":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerSpawnRot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1894,
            -2456
          ],
          "type":"types/genericValue"
        },
        "1263":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerSpawnPos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2062,
            -2456
          ],
          "type":"types/genericValue"
        },
        "1264":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal pid = self.pinIn.pid.value\nextensions.blrTrailerManager.setPlayerVID(pid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "pid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Trailer Manager PID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "pid",
              null,
              ""
            ]
          ],
          "pos":[
            1508,
            260
          ],
          "type":"util/customLua"
        },
        "1265":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal pid = self.pinIn.pid.value\nextensions.blrTrailerManager.setPlayerVID(pid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "pid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Trailer Manager PID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "pid",
              null,
              ""
            ]
          ],
          "pos":[
            5008,
            302
          ],
          "type":"util/customLua"
        },
        "1266":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            346,
            -3030
          ],
          "type":"util/customLua"
        },
        "1267":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.disableQuickAccess()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Disable QuickAccess",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -270,
            848
          ],
          "type":"util/customLua"
        },
        "1268":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"playerCurrentCarGarageID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            4694,
            218
          ],
          "type":"util/customLua"
        },
        "1269":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerSpawnPos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            -3016
          ],
          "type":"types/genericValue"
        },
        "1270":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerSpawnRot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            -2918
          ],
          "type":"types/genericValue"
        },
        "1271":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerConfig"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            -2820
          ],
          "type":"types/genericValue"
        },
        "1272":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            558,
            324
          ],
          "commentText":"",
          "commentTitle":"Player Rep Sync",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -2744,
            3038
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1273":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2720,
            3088
          ],
          "type":"types/genericValue"
        },
        "1274":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -2552,
            3074
          ],
          "type":"util/customLua"
        },
        "1275":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":false,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2720,
            3200
          ],
          "type":"util/customLua"
        },
        "1276":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2552,
            3214
          ],
          "type":"logic/branch"
        },
        "1277":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2342,
            3214
          ],
          "type":"types/genericValue"
        },
        "1278":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":true,
              "reputation":false,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            -2384,
            3074
          ],
          "type":"util/customLua"
        },
        "1279":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"eventBrowserEnabled"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2944,
            2808
          ],
          "type":"util/customLua"
        },
        "1280":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2958,
            2920
          ],
          "type":"logic/branch"
        },
        "1281":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal pdata = extensions.blrutils.eventBrowserGetPlayerData()\nextensions.customGuiStream.sendEventBrowserPlayerData(pdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Event Browser Player Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2972,
            3046
          ],
          "type":"util/customLua"
        },
        "1282":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal config = self.pinIn.config.value\nlocal model = extensions.blrutils.modelFromConfig(config)\nself.pinOut.model.value = model"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "config":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "model":false
            }
          },
          "name":"Model From Config",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "model",
              null,
              ""
            ]
          ],
          "pos":[
            802,
            -2946
          ],
          "type":"util/customLua"
        },
        "1283":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal model = self.pinIn.model.value\nlocal config = self.pinIn.config.value\nlocal pos = vec3(self.pinIn.pos.value)\nlocal rot = quat(self.pinIn.rot.value)\nlocal paintdata = self.pinIn.paintdata.value\n\nlocal paintA = {}\nlocal paintB = {}\nlocal paintC = {}\n\nlocal spawnOptions = {}\n\nif paintdata then\npaintA = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintA\"], \",\"))\nif paintdata[\"paintB\"] then\npaintB = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintB\"], \",\"))\nend\nif paintdata[\"paintC\"] then\npaintC = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintC\"], \",\"))\nend\nspawnOptions = {config = config, pos = pos, rot = rot, paint=paintA, paint2 = paintB, paint3=paintC}\nelse\nspawnOptions = {config = config, pos = pos, rot = rot}\nend\n\nlocal veh = extensions.core_vehicles.spawnNewVehicle(model, spawnOptions)\nself.pinOut.veid.value = veh:getId()\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "config":false,
              "flow":false,
              "model":false,
              "paintdata":true,
              "pos":false,
              "rot":false
            },
            "p_out":{
              "flow":false,
              "veid":false
            }
          },
          "name":"BLR Spawn Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            1018,
            -3016
          ],
          "type":"util/customLua"
        },
        "1284":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1026,
            -2806
          ],
          "type":"types/genericValue"
        },
        "1285":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -200,
            -4486
          ],
          "type":"util/customLua"
        },
        "1286":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"string",
              "value":"small"
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -214,
            -4388
          ],
          "type":"logic/compare"
        },
        "1287":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1018,
            -2652
          ],
          "type":"vehicle/enterVehicle"
        },
        "1288":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            808,
            -2792
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1289":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            808,
            -2848
          ],
          "type":"util/customLua"
        },
        "1290":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -480,
            -5032
          ],
          "type":"util/customLua"
        },
        "1291":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"playerCurrentCarGarageID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1194,
            -118
          ],
          "type":"util/customLua"
        },
        "1292":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -5018
          ],
          "type":"vehicle/removeVehicle"
        },
        "1293":{
          "data":{
            "debug":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color_in":{
              "type":"color",
              "value":[
                0,
                1,
                0,
                1
              ]
            },
            "color_out":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "onlyForward":{
              "type":"bool",
              "value":false
            },
            "staticMarkers":{
              "type":"bool",
              "value":false
            },
            "stop_timer":{
              "type":"number",
              "value":1
            },
            "visibleMarkers":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "clear":false,
              "color_in":true,
              "color_out":true,
              "flow":false,
              "onlyForward":true,
              "position":false,
              "rotation":false,
              "scale":false,
              "staticMarkers":true,
              "stop_timer":true,
              "vehId":false,
              "visibleMarkers":true
            },
            "p_out":{
              "dotAngle":true,
              "flow":true,
              "forward":true,
              "forwardDistance":true,
              "forwardDistanceRelative":true,
              "inside":true,
              "outside":true,
              "partlyInside":true,
              "sideDistance":true,
              "sideDistanceRelative":true,
              "stopped":false,
              "stoppedPercent":true,
              "stopping":true
            }
          },
          "pos":[
            -94,
            -4836
          ],
          "type":"scene/rectMarkerBLR"
        },
        "1294":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerDestPos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -466,
            -4808
          ],
          "type":"types/genericValue"
        },
        "1295":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerDestRot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -466,
            -4710
          ],
          "type":"types/genericValue"
        },
        "1296":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -284,
            -4710
          ],
          "type":"types/genericValue"
        },
        "1297":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal trailerID = extensions.blrTrailerManager.getPlayerTrailerID()\nself.pinOut.tid.value = trailerID\nself.pinOut.hasTrailer.value = trailerID ~= nil"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "hasTrailer":false,
              "tid":false
            }
          },
          "name":"Get Trailer Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "tid",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "hasTrailer",
              null,
              ""
            ]
          ],
          "pos":[
            220,
            -4878
          ],
          "type":"util/customLua"
        },
        "1298":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            444,
            -4850
          ],
          "type":"logic/once"
        },
        "1299":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            220,
            -4738
          ],
          "type":"logic/branch"
        },
        "1300":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            430,
            -4738
          ],
          "type":"logic/frameDelay"
        },
        "1301":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -220,
            -5522
          ],
          "type":"util/customLua"
        },
        "1302":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1858,
            652
          ],
          "type":"logic/frameDelay"
        },
        "1303":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve ~= nil then\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"trailerforce"
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getAcceleration()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":false,
              "flow":false,
              "toFetch":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            164,
            -5256
          ],
          "type":"util/customLua"
        },
        "1304":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -10,
            -5228
          ],
          "type":"types/genericValue"
        },
        "1305":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal fetch = self.pinIn.fetch.value\nlocal msforce = tonumber(fetch or \"0\")\nlocal gforce = msforce / 9.81\nself.pinOut.gforce.value = gforce"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "fetch":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "gforce":false
            }
          },
          "name":"Fetch To G Force",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "fetch",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gforce",
              null,
              ""
            ]
          ],
          "pos":[
            598,
            -5200
          ],
          "type":"util/customLua"
        },
        "1306":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionFailG"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            830,
            -5340
          ],
          "type":"types/genericValue"
        },
        "1307":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            808,
            -5242
          ],
          "type":"logic/compare"
        },
        "1308":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.resetUIsavedData()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset UI Saved Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -256,
            820
          ],
          "type":"util/customLua"
        },
        "1309":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionTrailerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -354,
            946
          ],
          "type":"types/genericValue"
        },
        "1310":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            374,
            -5228
          ],
          "type":"logic/frameDelay"
        },
        "1311":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.customGuiStream.toggleDeliveryUI(toggle)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Delivery UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            774,
            -3114
          ],
          "type":"util/customLua"
        },
        "1312":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryMaxForce(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Max Force",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            760,
            -3212
          ],
          "type":"util/customLua"
        },
        "1313":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local trailer = nil\nif self.pinIn.tid.value then\ntrailer = scenetree.findObjectById(self.pinIn.tid.value)\nif trailer then trailer:delete() end\nend",
            "onPreRender":"",
            "work":"-- see _executionStopped"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "tid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Trailer Cleanup",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "tid",
              null,
              ""
            ]
          ],
          "pos":[
            -186,
            960
          ],
          "type":"util/customLua"
        },
        "1314":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryCurrentForce(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Current Force",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            746,
            -3156
          ],
          "type":"util/customLua"
        },
        "1315":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryCurrentForce(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Current Force",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            738,
            -5494
          ],
          "type":"util/customLua"
        },
        "1316":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryCurrentForce(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Current Force",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1046,
            -5228
          ],
          "type":"util/customLua"
        },
        "1317":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.customGuiStream.toggleDeliveryUI(toggle)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Delivery UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            844,
            -3884
          ],
          "type":"util/customLua"
        },
        "1318":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal stime = self.pinIn.stime.value\nlocal etime = self.pinIn.etime.value\nself.pinOut.inside.value = extensions.blrutils.timeDetector(stime,etime)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "etime":{
              "type":"number",
              "value":16
            },
            "stime":{
              "type":"number",
              "value":8
            }
          },
          "hiddenPins":{
            "p_in":{
              "etime":true,
              "flow":false,
              "stime":true
            },
            "p_out":{
              "flow":false,
              "inside":false
            }
          },
          "name":"Time Detector",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "stime",
              null,
              ""
            ],
            [
              "in",
              "number",
              "etime",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "inside",
              null,
              ""
            ]
          ],
          "pos":[
            1690,
            -2302
          ],
          "type":"util/customLua"
        },
        "1319":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1676,
            -2232
          ],
          "type":"logic/branch"
        },
        "1320":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Shop closed!\nOpen hours: 8AM to 4PM"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2572,
            -2456
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1321":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"garageLoadingInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            3398,
            400
          ],
          "type":"util/customLua"
        },
        "1322":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3608,
            386
          ],
          "type":"logic/branch"
        },
        "1323":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"garageLoadingInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            3398,
            512
          ],
          "type":"util/customLua"
        },
        "1324":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3608,
            512
          ],
          "type":"logic/branch"
        },
        "1325":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"garageLoadingInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            4140,
            -538
          ],
          "type":"util/customLua"
        },
        "1326":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"garageLoadingInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            6232,
            330
          ],
          "type":"util/customLua"
        },
        "1327":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"garageLoadingInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            3958,
            -468
          ],
          "type":"util/customLua"
        },
        "1328":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3986,
            -370
          ],
          "type":"logic/branch"
        },
        "1329":{
          "customName":"PAGE SET",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            976,
            -1210
          ],
          "type":"types/genericValue"
        },
        "1330":{
          "customName":"HOURS",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClubHours"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            976,
            -1336
          ],
          "type":"types/genericValue"
        },
        "1331":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClubHours"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1404,
            -1462
          ],
          "type":"types/genericValue"
        },
        "1332":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -816,
            -1462
          ],
          "type":"logic/branch"
        },
        "1333":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrutils.resetGameOptions()",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.setGameOption(\"restrictScenarios\", true)\nextensions.blrutils.setGameOption(\"trafficEnableSwitching\", false)"
          },
          "customName":"SET GAME OPTIONS",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Auto Resetting Game Options",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -956,
            -20
          ],
          "type":"util/customLua"
        },
        "1334":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            976,
            -1294
          ],
          "type":"types/genericValue"
        },
        "1335":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            948,
            -1252
          ],
          "type":"logic/compare"
        },
        "1336":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            740,
            607
          ],
          "commentText":"",
          "commentTitle":"Game Over Screen",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            868,
            2212
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1337":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "complete":false,
              "completed":false,
              "flow":false,
              "incomplete":false
            }
          },
          "pos":[
            24,
            2346
          ],
          "type":"ui/fadeToBlack"
        },
        "1338":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            1340,
            -566
          ],
          "type":"util/customLua"
        },
        "1339":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal tosend = {}\ntosend[\"money\"] = self.pinIn.money.value or 0\ntosend[\"reputation\"] = self.pinIn.rep.value or 0\ntosend[\"cars\"] = self.pinIn.cars.value or 0\nextensions.customGuiStream.sendGameOverCareerStats(tosend)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cars":false,
              "flow":false,
              "money":false,
              "rep":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Game Over Stats",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cars",
              null,
              ""
            ]
          ],
          "pos":[
            1102,
            2248
          ],
          "type":"util/customLua"
        },
        "1340":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            906,
            2248
          ],
          "type":"types/genericValue"
        },
        "1341":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            906,
            2332
          ],
          "type":"types/genericValue"
        },
        "1342":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            906,
            2416
          ],
          "type":"types/genericValue"
        },
        "1343":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "keepLayout":{
              "type":"bool",
              "value":false
            },
            "layout":{
              "type":"string",
              "value":"beamlrgameover"
            },
            "menu":{
              "type":"string",
              "value":"scenario"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gameStateName":true,
              "keepLayout":true,
              "layout":true,
              "menu":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -88,
            1954
          ],
          "type":"ui/setUILayout"
        },
        "1344":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            906,
            2528
          ],
          "type":"logic/flowSwitch"
        },
        "1345":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dx = self.pinIn.dx.value\nlocal mx = self.pinIn.mx.value\nlocal mn = self.pinIn.mn.value\nlocal toRet = extensions.blrutils.setDeathScreenBackOpacity(dx,mx,mn)\nself.pinOut.out.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "dx":{
              "type":"number",
              "value":0.05000000075000011340
            },
            "mn":{
              "type":"number",
              "value":0
            },
            "mx":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "dx":false,
              "flow":false,
              "mn":false,
              "mx":false
            },
            "p_out":{
              "flow":false,
              "out":false
            }
          },
          "name":"Death Screen Back Fade",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "dx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mn",
              null,
              ""
            ],
            [
              "out",
              "number",
              "out",
              null,
              ""
            ]
          ],
          "pos":[
            1348,
            2374
          ],
          "type":"util/customLua"
        },
        "1346":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1536,
            -580
          ],
          "type":"logic/branch"
        },
        "1347":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -340,
            1940
          ],
          "type":"util/customLua"
        },
        "1348":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -396,
            764
          ],
          "type":"util/customLua"
        },
        "1349":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1110,
            2556
          ],
          "type":"logic/rateLimit"
        },
        "1350":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            906,
            2668
          ],
          "type":"logic/compare"
        },
        "1351":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1096,
            2724
          ],
          "type":"logic/frameDelay"
        },
        "1352":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            80,
            1926
          ],
          "type":"logic/frameDelay"
        },
        "1353":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            136,
            2010
          ],
          "type":"logic/once"
        },
        "1354":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dx = self.pinIn.dx.value\nlocal mx = self.pinIn.mx.value\nlocal mn = self.pinIn.mn.value\nlocal toRet = extensions.blrutils.setDeathScreenTextOpacity(dx,mx,mn)\nself.pinOut.out.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "dx":{
              "type":"number",
              "value":0.05000000075000011340
            },
            "mn":{
              "type":"number",
              "value":0
            },
            "mx":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "dx":false,
              "flow":false,
              "mn":false,
              "mx":false
            },
            "p_out":{
              "flow":false,
              "out":false
            }
          },
          "name":"Death Screen Text Fade",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "dx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mn",
              null,
              ""
            ],
            [
              "out",
              "number",
              "out",
              null,
              ""
            ]
          ],
          "pos":[
            1376,
            2542
          ],
          "type":"util/customLua"
        },
        "1355":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.setDeathScreenBackOpacity(-100,1.0,0.0)\nextensions.blrutils.setDeathScreenTextOpacity(-100,1.0,0.0)\nextensions.customGuiStream.toggleGameOverUI(false)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Death Screen Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -452,
            876
          ],
          "type":"util/customLua"
        },
        "1356":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -256,
            2010
          ],
          "type":"logic/once"
        },
        "1357":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.toggleGameOverUI(self.pinIn.toggle.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Death Screen",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1298,
            2248
          ],
          "type":"util/customLua"
        },
        "1358":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1102,
            2640
          ],
          "type":"logic/rateLimit"
        },
        "1359":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -452,
            -5368
          ],
          "type":"types/genericValue"
        },
        "1360":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":true,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -466,
            -5256
          ],
          "type":"logic/compare"
        },
        "1361":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            684,
            282
          ],
          "commentText":"",
          "commentTitle":"SFX Player",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1064,
            2618
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1362":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"SFXQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1054,
            2654
          ],
          "type":"util/customLua"
        },
        "1363":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -858,
            2654
          ],
          "type":"logic/branch"
        },
        "1364":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -648,
            2654
          ],
          "type":"logic/once"
        },
        "1365":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"SFXFile"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -1040,
            2780
          ],
          "type":"util/customLua"
        },
        "1366":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -844,
            2780
          ],
          "type":"audio/playOnce"
        },
        "1367":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"SFXQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -662,
            2766
          ],
          "type":"util/customLua"
        },
        "1368":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            3308,
            -3744
          ],
          "type":"util/customLua"
        },
        "1369":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            3426,
            -2092
          ],
          "type":"util/customLua"
        },
        "1370":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            5366,
            -1098
          ],
          "type":"util/customLua"
        },
        "1371":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal maxval = self.pinIn.max.value\nlocal toggle = self.pinIn.toggle.value\nlocal fueltype = extensions.blrutils.blrvarGet(\"smoothFuelType\") or \"gasoline\"\nlocal fueltier = extensions.blrutils.blrvarGet(\"smoothFuelTier\") or \"regular\"\nlocal fuelcost = extensions.blrutils.blrvarGet(\"smoothFuelCost\") or 1.0\nprint(\"FUEL TYPE: \" .. fueltype)\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.smoothRefuelToggle(%s, %.2f, %q, %q)\", toggle, maxval, fueltype, fueltier))\nif toggle then \nextensions.blrglobals.blrFlagSet(\"smoothFueling\", true) \n-- only set when toggling on smooth fueling to avoid issue with regular button acting as toggle off\n-- which could overwrite actual selected fuel value\nextensions.blrutils.blrvarSet(\"smoothFuelSetCost\", fuelcost)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "max":false,
              "toggle":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Smooth Refuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            2580,
            -1112
          ],
          "type":"util/customLua"
        },
        "1372":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            206,
            -1840
          ],
          "type":"util/customLua"
        },
        "1373":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1102,
            -4290
          ],
          "type":"util/customLua"
        },
        "1374":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -580
          ],
          "type":"util/customLua"
        },
        "1375":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -2174,
            -3884
          ],
          "type":"util/customLua"
        },
        "1376":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"shopWalkingMode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2538,
            -3310
          ],
          "type":"util/customLua"
        },
        "1377":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            2740,
            -1938
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1378":{
          "alpha":1,
          "backgroundColor":[
            0,
            0,
            0,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"scenario start to wait \\nfor 1.13 avb flag reset",
          "commentTitle":"Delay traffic spawn on",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -1638,
            672
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1379":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"require(\"gameplay/walk\").toggleWalkingMode()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Walk",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3392,
            -3268
          ],
          "type":"util/customLua"
        },
        "1380":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2754,
            -2358
          ],
          "type":"types/genericValue"
        },
        "1381":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2936,
            -2358
          ],
          "type":"util/customLua"
        },
        "1382":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"trailer"
            },
            "value_2":{
              "type":"string",
              "value":"gooseneck"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            122,
            -3142
          ],
          "type":"logic/switchcase"
        },
        "1383":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"trailer"
            },
            "value_2":{
              "type":"string",
              "value":"gooseneck"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            332,
            -2932
          ],
          "type":"logic/switchcase"
        },
        "1384":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal result = extensions.blrTrailerManager.gooseneckCheck()\nself.pinOut.result.value = result"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "result":false
            }
          },
          "name":"Gooseneck Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "result",
              null,
              ""
            ]
          ],
          "pos":[
            144,
            -2890
          ],
          "type":"util/customLua"
        },
        "1385":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            368,
            -2666
          ],
          "type":"logic/branch"
        },
        "1386":{
          "data":{
            "aboveSpacing":5,
            "belowSpacing":5
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            584,
            -2624
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "1387":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Need gooseneck hitch to accept!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            788,
            -2638
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1388":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"gooseneck"
            },
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "string",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            494,
            -3436
          ],
          "type":"util/customLua"
        },
        "1389":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Gooseneck Delivery"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            500,
            -3366
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1390":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            534,
            229
          ],
          "commentText":"",
          "commentTitle":"Delayed AVB Reset",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -1050,
            2954
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1391":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"avbResetDelayed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1026,
            2990
          ],
          "type":"util/customLua"
        },
        "1392":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":20
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -808,
            2990
          ],
          "type":"logic/frameDelay"
        },
        "1393":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"advancedVehicleBuilding\", false)\nextensions.blrglobals.blrFlagSet(\"avbResetDelayed\", false)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"AVB Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -802,
            3144
          ],
          "type":"util/customLua"
        },
        "1394":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1026,
            3088
          ],
          "type":"logic/branch"
        },
        "1395":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -738,
            3060
          ],
          "type":"logic/once"
        },
        "1396":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1116,
            -3996
          ],
          "type":"types/genericValue"
        },
        "1397":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal rep = self.pinIn.rep.value\nlocal mtype = self.pinIn.mtype.value\nlocal ptable = extensions.blrutils.loadDataTable(\"beamLR/missionFailedPenalty\")\nlocal reploss = tonumber(ptable[mtype])\nself.pinOut.rep.value = math.max(0, rep - reploss)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mtype":false,
              "rep":false
            },
            "p_out":{
              "flow":false,
              "rep":false
            }
          },
          "name":"Mission Failed Penalty",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "in",
              "string",
              "mtype",
              null,
              ""
            ],
            [
              "out",
              "number",
              "rep",
              null,
              ""
            ]
          ],
          "pos":[
            1110,
            -3786
          ],
          "type":"util/customLua"
        },
        "1398":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1124,
            -3646
          ],
          "type":"types/genericValue"
        },
        "1399":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"currentMissionType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1130,
            -3884
          ],
          "type":"util/customLua"
        },
        "1400":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local input = self.pinIn.input.value\nlocal output = \"\"\nif input == \"Empty Lot\" then\noutput = \"\"\nelse\noutput = \"Not Enough Money!\"\nend\nself.pinOut.output.value = output"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Empty Slot Text",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "input",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            1866,
            -3310
          ],
          "type":"util/customLua"
        },
        "1401":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            810,
            411
          ],
          "commentText":"",
          "commentTitle":"GPS",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            -2786,
            966
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1402":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"gpsActive"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2762,
            1016
          ],
          "type":"util/customLua"
        },
        "1403":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2762,
            1128
          ],
          "type":"logic/branch"
        },
        "1404":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2566,
            1016
          ],
          "type":"logic/once"
        },
        "1405":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"gmstate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2376,
            1016
          ],
          "type":"util/customLua"
        },
        "1406":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"gpswaypoint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -2174,
            1142
          ],
          "type":"util/customLua"
        },
        "1407":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2174,
            1016
          ],
          "type":"types/genericValue"
        },
        "1408":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2544,
            1114
          ],
          "type":"logic/rateLimit"
        },
        "1409":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal distance = extensions.blrutils.getGPSDistance()\nextensions.customGuiStream.sendGPSCurrentDistance(distance)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Distance",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2342,
            1170
          ],
          "type":"util/customLua"
        },
        "1410":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2734,
            1268
          ],
          "type":"logic/once"
        },
        "1411":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -2342,
            -4024
          ],
          "type":"util/customLua"
        },
        "1412":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Mode Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -752,
            2458
          ],
          "type":"util/customLua"
        },
        "1413":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -1908,
            -3450
          ],
          "type":"util/customLua"
        },
        "1414":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Mode Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2110,
            -1448
          ],
          "type":"util/customLua"
        },
        "1415":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Mode Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            5352,
            -1168
          ],
          "type":"util/customLua"
        },
        "1416":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Mode Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3420,
            -2162
          ],
          "type":"util/customLua"
        },
        "1417":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            682,
            -3352
          ],
          "type":"util/customLua"
        },
        "1418":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            850,
            -3786
          ],
          "type":"util/customLua"
        },
        "1419":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -312,
            -1182
          ],
          "type":"util/customLua"
        },
        "1420":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -704,
            -398
          ],
          "type":"util/customLua"
        },
        "1421":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            2740,
            -2442
          ],
          "type":"util/customLua"
        },
        "1422":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nextensions.blrglobals.blrFlagSet(\"gpsForceOff\", not toggle)\nextensions.blrutils.gpsToggleStateUpdate()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Force Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            3412,
            -2540
          ],
          "type":"util/customLua"
        },
        "1423":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"gpsinit\", nil, 60)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Init Delayed",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1480,
            92
          ],
          "type":"util/customLua"
        },
        "1424":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -508,
            386
          ],
          "type":"logic/branch"
        },
        "1425":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"jbeamio = require(\"jbeam/io\")\njbeamio.finishLoading()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Jbeam Clear Cache",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            438,
            1240
          ],
          "type":"util/customLua"
        },
        "1426":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"jbeamio = require(\"jbeam/io\")\njbeamio.finishLoading()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Jbeam Clear Cache",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            6232,
            148
          ],
          "type":"util/customLua"
        },
        "1427":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"jbeamio = require(\"jbeam/io\")\njbeamio.finishLoading()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Jbeam Clear Cache",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -578,
            2458
          ],
          "type":"util/customLua"
        },
        "1428":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.setGPSDestination()\nextensions.customGuiStream.sendGPSPage(0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"GPS Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            696,
            540
          ],
          "type":"util/customLua"
        },
        "1429":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            816,
            708
          ],
          "type":"logic/once"
        },
        "1430":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            556,
            204
          ],
          "type":"logic/branch"
        },
        "1431":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- avbready=1 marks vehicle as ready advanced vehicle building after first load\n-- so flag is turned on when veh is next pulled from garage or spawned at scenario start\n-- initially added after first part edit but now that saving config uses chosen parts\n-- it can be done on first vehicle load instead\nlocal extensions = require(\"extensions\")\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.updateDataTable(\"beamLR/garage/car\" .. gid, {avbready=\"1\"})\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set AVB Ready",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            6226,
            64
          ],
          "type":"util/customLua"
        },
        "1432":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"-- avbready=1 marks vehicle as ready advanced vehicle building after first load\n-- so flag is turned on when veh is next pulled from garage or spawned at scenario start\n-- initially added after first part edit but now that saving config uses chosen parts\n-- it can be done on first vehicle load instead\nlocal extensions = require(\"extensions\")\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.updateDataTable(\"beamLR/garage/car\" .. gid, {avbready=\"1\"})\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set AVB Ready",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            634,
            1226
          ],
          "type":"util/customLua"
        },
        "1433":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"--using this on scenario start to avoid freeroam vehicle causing issue with avb \njbeamio = require(\"jbeam/io\")\njbeamio.finishLoading()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Jbeam Clear Cache",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            164,
            470
          ],
          "type":"util/customLua"
        },
        "1434":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            390,
            200
          ],
          "commentText":"",
          "commentTitle":"Fail Mission",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            686,
            -5068
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1435":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"extensions.blrVehicleUtils.buildAdvancedDamageTables()\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Advanced Repair Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            816,
            1226
          ],
          "type":"util/customLua"
        },
        "1436":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"extensions.blrVehicleUtils.buildAdvancedDamageTables()\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Advanced Repair Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            6436,
            64
          ],
          "type":"util/customLua"
        },
        "1437":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal autosave = extensions.blrglobals.blrFlagGet(\"imautosave\")\nif autosave then\nextensions.ui_imgui.saveIniSettingsToDisk(\"settings/beamlr_imgui.ini\")\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Autosave IMGUI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            690,
            596
          ],
          "type":"util/customLua"
        },
        "1438":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":500
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            298,
            -5396
          ],
          "type":"logic/compare"
        },
        "1439":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nve:queueLuaCommand(\"extensions.blrVehicleUtils.buildAdvancedDamageTables()\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Advanced Repair Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            -928,
            2500
          ],
          "type":"util/customLua"
        },
        "1440":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve then\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend\n\nelse\nself.pinOut.output.value = \"0\"\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"advrepaircost"
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getAdvancedRepairCost()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":false,
              "flow":false,
              "toFetch":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            -1222,
            -3982
          ],
          "type":"util/customLua"
        },
        "1441":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"advrepaircost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1628,
            -3954
          ],
          "type":"util/customLua"
        },
        "1442":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1432,
            -3954
          ],
          "type":"logic/branch"
        },
        "1443":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.num.value = tonumber(self.pinIn.str.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "str":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"To Number",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "str",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ]
          ],
          "pos":[
            -1004,
            -3940
          ],
          "type":"util/customLua"
        },
        "1444":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local condition = self.pinIn.cond.value\nlocal tval = self.pinIn.tval.value\nlocal fval = self.pinIn.fval.value\nlocal toRet = fval\nif condition then\ntoRet = tval\nend\nself.pinOut.chosen.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cond":false,
              "flow":false,
              "fval":false,
              "tval":false
            },
            "p_out":{
              "chosen":false,
              "flow":false
            }
          },
          "name":"Value Selector",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "cond",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fval",
              null,
              ""
            ],
            [
              "out",
              "number",
              "chosen",
              null,
              ""
            ]
          ],
          "pos":[
            -1012,
            -4108
          ],
          "type":"util/customLua"
        },
        "1445":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryCurrentDamage(val)\n-- also resets trailer damage, just for this node, should not do this when sending current damage\nextensions.blrTrailerManager.setTrailerDamage(0)"
          },
          "customName":"ALSO RESETS TRAILER DAMAGE",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Current Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            500,
            -3170
          ],
          "type":"util/customLua"
        },
        "1446":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.toggle.value\nextensions.customGuiStream.toggleDeliveryDamage(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Toggle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            500,
            -3114
          ],
          "type":"util/customLua"
        },
        "1447":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.toggle.value\nextensions.customGuiStream.toggleDeliveryDamage(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Toggle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            500,
            -3240
          ],
          "type":"util/customLua"
        },
        "1448":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal val = self.pinIn.val.value\nextensions.customGuiStream.sendDeliveryCurrentDamage(val)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delivery UI Current Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            1026,
            -5410
          ],
          "type":"util/customLua"
        },
        "1449":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local val = self.pinIn.val.value\nlocal maxval = self.pinIn.max.value or 100.0\nlocal toRet = (val / maxval) * 100.0\ntoRet = math.min(toRet, 100.0)\nif toRet < self.pinIn.minp.value then toRet = 0 end\nself.pinOut.val.value = toRet"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "max":{
              "type":"number",
              "value":500
            },
            "minp":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "max":true,
              "minp":true,
              "val":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"Percentage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "val",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "out",
              "number",
              "val",
              null,
              ""
            ],
            [
              "in",
              "number",
              "minp",
              null,
              ""
            ]
          ],
          "pos":[
            1074,
            -5340
          ],
          "type":"util/customLua"
        },
        "1450":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2180,
            -328
          ],
          "type":"logic/once"
        },
        "1451":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.dmg.value = extensions.blrTrailerManager.getTrailerDamage()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "dmg":false,
              "flow":false
            }
          },
          "name":"Get Trailer Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "dmg",
              null,
              ""
            ]
          ],
          "pos":[
            38,
            -5368
          ],
          "type":"util/customLua"
        },
        "1452":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal force = self.pinIn.force.value\nlocal threshold = self.pinIn.threshold.value\nif force < threshold then force = 0 end\nlocal gain = self.pinIn.gain.value\nlocal cdamage = extensions.blrTrailerManager.getTrailerDamage()\nlocal ndamage = cdamage + ((force/threshold) * gain)\nextensions.blrTrailerManager.setTrailerDamage(ndamage)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "gain":{
              "type":"number",
              "value":50
            },
            "threshold":{
              "type":"number",
              "value":6
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "force":false,
              "gain":true,
              "threshold":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Trailer Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "force",
              null,
              ""
            ],
            [
              "in",
              "number",
              "threshold",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gain",
              null,
              ""
            ]
          ],
          "pos":[
            592,
            -5326
          ],
          "type":"util/customLua"
        },
        "1453":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\") then\nextensions.blrdragdisplay.resetLights()\nextensions.blrdragdisplay.resetDigits()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Drag Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2370,
            -370
          ],
          "type":"util/customLua"
        },
        "1454":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal step = self.pinIn.step.value\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\") and extensions.blrutils.blrvarGet(\"dragLightSync\") ~= step then\nextensions.blrdragdisplay.countdown(step)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "step":{
              "type":"string",
              "value":"stage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "step":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Drag Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "step",
              null,
              ""
            ]
          ],
          "pos":[
            -2404,
            -300
          ],
          "type":"util/customLua"
        },
        "1455":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal step = self.pinIn.step.value\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\") and extensions.blrutils.blrvarGet(\"dragLightSync\") ~= step then\nextensions.blrdragdisplay.countdown(step)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "step":{
              "type":"string",
              "value":"prestage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "step":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Drag Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "step",
              null,
              ""
            ]
          ],
          "pos":[
            -2174,
            -230
          ],
          "type":"util/customLua"
        },
        "1456":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"fmtoggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            424,
            1436
          ],
          "type":"util/customLua"
        },
        "1457":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":true,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            416,
            1506
          ],
          "type":"logic/branch"
        },
        "1458":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal delay = self.pinIn.delay.value or 1\nextensions.blrdelay.queue(\"uioptionsreload\", nil, delay)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "delay":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "delay":true,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"UI Options Reload",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "delay",
              null,
              ""
            ]
          ],
          "pos":[
            6464,
            190
          ],
          "type":"util/customLua"
        },
        "1459":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"gmtoggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2978,
            1548
          ],
          "type":"util/customLua"
        },
        "1460":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2796,
            1548
          ],
          "type":"logic/branch"
        },
        "1461":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2586,
            1548
          ],
          "type":"logic/once"
        },
        "1462":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"groundMarkersState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2572,
            1632
          ],
          "type":"types/genericValue"
        },
        "1463":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":true,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            570,
            1702
          ],
          "type":"logic/branch"
        },
        "1464":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"fmtoggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            416,
            1702
          ],
          "type":"util/customLua"
        },
        "1465":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            726,
            327
          ],
          "commentText":"",
          "commentTitle":"Advanced Repair Data Fetch",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            1750,
            2114
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1466":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"advancedRepairUI"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            1774,
            2150
          ],
          "type":"util/customLua"
        },
        "1467":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":true,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1950,
            2150
          ],
          "type":"logic/branch"
        },
        "1468":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal strfetch = self.pinIn.strfetch.value\nextensions.vluaFetchModule.exec(veid, toFetch, id, strfetch)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"advdmgstr"
            },
            "strfetch":{
              "type":"bool",
              "value":true
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getAdvancedRepairString()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":true,
              "flow":false,
              "strfetch":true,
              "toFetch":true,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "strfetch",
              null,
              ""
            ]
          ],
          "pos":[
            1788,
            2346
          ],
          "type":"util/customLua"
        },
        "1469":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            1781,
            2262
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1470":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal mech = extensions.blrutils.blrvarGet(\"mechDamageCost\")\nlocal mindmg = extensions.blrutils.blrvarGet(\"minDamageCost\")\nlocal arstr = self.pinIn.arstr.value\nlocal ardata = {}\nif arstr then\nardata = extensions.blrutils.advancedDamageStringToTable(arstr)\nextensions.customGuiStream.sendRepairData(ardata, nil, mech,mindmg)\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "arstr":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Advanced Repair Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "arstr",
              null,
              ""
            ]
          ],
          "pos":[
            2020,
            2262
          ],
          "type":"util/customLua"
        },
        "1471":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"useadvrepairui"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -948,
            -2428
          ],
          "type":"util/customLua"
        },
        "1472":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -550,
            -2428
          ],
          "type":"logic/branch"
        },
        "1473":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Open Repair Menu"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -340,
            -2428
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1474":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2034,
            2360
          ],
          "type":"types/genericValue"
        },
        "1475":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"useadvrepairui"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            3132,
            -300
          ],
          "type":"util/customLua"
        },
        "1476":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3104,
            -216
          ],
          "type":"logic/branch"
        },
        "1477":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal money = self.pinIn.money.value\nextensions.customGuiStream.sendRepairUIPlayerMoney(money)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "money":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Send Advanced Repair Money",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ]
          ],
          "pos":[
            2222,
            2360
          ],
          "type":"util/customLua"
        },
        "1478":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Open Repair Menu"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3118,
            -118
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1479":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nlocal mult = self.pinIn.mult.value\nextensions.customGuiStream.toggleAdvancedRepairUI(toggle)\nextensions.customGuiStream.sendRepairUIMultiplier(mult)"
          },
          "customName":"Toggle Repair UI",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mult":{
              "type":"number",
              "value":1.50000000000000000000
            },
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mult":true,
              "toggle":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Advanced Repair UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mult",
              null,
              ""
            ]
          ],
          "pos":[
            3168,
            -510
          ],
          "type":"util/customLua"
        },
        "1480":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nlocal mult = self.pinIn.mult.value\nextensions.customGuiStream.toggleAdvancedRepairUI(toggle)\nextensions.customGuiStream.sendRepairUIMultiplier(mult)"
          },
          "customName":"Toggle Repair UI",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mult":{
              "type":"number",
              "value":1
            },
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mult":true,
              "toggle":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Advanced Repair UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mult",
              null,
              ""
            ]
          ],
          "pos":[
            -158,
            -2400
          ],
          "type":"util/customLua"
        },
        "1481":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toggle = self.pinIn.toggle.value\nlocal mult = self.pinIn.mult.value\nextensions.customGuiStream.toggleAdvancedRepairUI(toggle)\nextensions.customGuiStream.sendRepairUIMultiplier(mult)"
          },
          "customName":"Toggle Repair UI",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mult":{
              "type":"number",
              "value":1
            },
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mult":true,
              "toggle":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Advanced Repair UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mult",
              null,
              ""
            ]
          ],
          "pos":[
            424,
            -636
          ],
          "type":"util/customLua"
        },
        "1482":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal flag = self.pinIn.flag.value\nlocal onceMode = self.pinIn.onceMode.value\nlocal state = extensions.blrglobals.blrFlagGet(flag)\nlocal outflow = state\nif state and onceMode then extensions.blrglobals.blrFlagSet(flag, false) end\nself.pinOut.out.value = outflow and self.pinIn.flow.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"string",
              "value":"uiAdvancedRepairRequest"
            },
            "onceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "onceMode":true
            },
            "p_out":{
              "flow":true,
              "out":false
            }
          },
          "name":"BLR Flag Flow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "out",
              null,
              ""
            ],
            [
              "in",
              "string",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "onceMode",
              null,
              ""
            ]
          ],
          "pos":[
            52,
            -2428
          ],
          "type":"util/customLua"
        },
        "1483":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.advancedRepairUIResetPicks()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Advanced Repair UI Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1026,
            -1924
          ],
          "type":"util/customLua"
        },
        "1484":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.advancedRepairUIResetPicks()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Advanced Repair UI Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -850,
            2528
          ],
          "type":"util/customLua"
        },
        "1485":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "any",
              "input",
              null,
              ""
            ],
            [
              "out",
              "any",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -942,
            -972
          ],
          "type":"util/customLua"
        },
        "1486":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClub"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1130,
            -972
          ],
          "type":"types/genericValue"
        },
        "1487":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClub"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -668,
            -174
          ],
          "type":"types/genericValue"
        },
        "1488":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -494,
            -202
          ],
          "type":"logic/compare"
        },
        "1489":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal maxval = self.pinIn.max.value or 99999\nlocal toggle = self.pinIn.toggle.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.smoothRefuelToggle(%s, %.2f)\", toggle, maxval))\nif toggle then extensions.blrglobals.blrFlagSet(\"smoothFueling\", true) end"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "max":true,
              "toggle":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Smooth Refuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1992,
            -930
          ],
          "type":"util/customLua"
        },
        "1490":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2006,
            -773
          ],
          "type":"logic/bundle"
        },
        "1491":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"smoothFuelCharge"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2180,
            -818
          ],
          "type":"util/customLua"
        },
        "1492":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"smoothFuelAdded"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2412,
            -944
          ],
          "type":"util/customLua"
        },
        "1493":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2370,
            -832
          ],
          "type":"logic/branch"
        },
        "1494":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2586,
            -818
          ],
          "type":"logic/once"
        },
        "1495":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nif self.pinIn.moneyMode.value then\nself.pinOut.Y.value = math.max(0, self.pinIn.X.value - self.pinIn.DX.value)\nelse\nself.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value\nend\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "moneyMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false,
              "moneyMode":true
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "moneyMode",
              null,
              ""
            ]
          ],
          "pos":[
            2754,
            -972
          ],
          "type":"util/customLua"
        },
        "1496":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nif self.pinIn.moneyMode.value then\nself.pinOut.Y.value = self.pinIn.X.value * self.pinIn.Z.value\nelse\nself.pinOut.Y.value = self.pinIn.X.value * self.pinIn.Z.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "moneyMode":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "X":false,
              "Z":false,
              "flow":false,
              "moneyMode":true
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X*Z",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "Z",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "moneyMode",
              null,
              ""
            ]
          ],
          "pos":[
            2586,
            -944
          ],
          "type":"util/customLua"
        },
        "1497":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2762,
            -832
          ],
          "type":"types/genericValue"
        },
        "1498":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"Engine.Audio.deleteSource(self.pinIn.source.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "source":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Stop SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "source",
              null,
              ""
            ]
          ],
          "pos":[
            2944,
            -818
          ],
          "type":"util/customLua"
        },
        "1499":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Fueling_Petrol"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            2216,
            -972
          ],
          "type":"audio/playOnce"
        },
        "1500":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "biggerText":{
              "type":"bool",
              "value":false
            },
            "duration":{
              "type":"number",
              "value":3
            },
            "instant":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2796,
            -1112
          ],
          "type":"ui/flashMessage"
        },
        "1501":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal flag = self.pinIn.flag.value\nlocal onceMode = self.pinIn.onceMode.value\nlocal state = extensions.blrglobals.blrFlagGet(flag)\nlocal outflow = state\nif state and onceMode then extensions.blrglobals.blrFlagSet(flag, false) end\nself.pinOut.out.value = outflow and self.pinIn.flow.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"string",
              "value":"smoothFueling"
            },
            "onceMode":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "onceMode":true
            },
            "p_out":{
              "flow":true,
              "out":false
            }
          },
          "name":"BLR Flag Flow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "out",
              null,
              ""
            ],
            [
              "in",
              "string",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "onceMode",
              null,
              ""
            ]
          ],
          "pos":[
            186,
            -1140
          ],
          "type":"util/customLua"
        },
        "1502":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal total = self.pinIn.total.value\nlocal units = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal cost = self.pinIn.cost.value\nlocal txt = \"\"\n\nif units == \"imperial\" then\ntxt = \"Refueled \" .. string.format(\"%.2f\", total / 3.785) .. \" gallons\\n\"\nelse\ntxt = \"Refueled \" .. string.format(\"%.2f\", total) .. \" liters\"\nend\ntxt = txt .. \" for $\" .. string.format(\"%.2f\", total * cost)\n\nself.pinOut.msg.value = txt"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "total":false
            },
            "p_out":{
              "flow":false,
              "msg":false
            }
          },
          "name":"Fuel Charge Msg",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "total",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "out",
              "string",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            2936,
            -944
          ],
          "type":"util/customLua"
        },
        "1503":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":true,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            2944,
            -1042
          ],
          "type":"util/customLua"
        },
        "1504":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"smoothFuelCharge"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            2958,
            -1168
          ],
          "type":"util/customLua"
        },
        "1505":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal maxval = self.pinIn.max.value or 99999\nlocal toggle = self.pinIn.toggle.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.smoothRefuelToggle(%s, %.2f)\", toggle, maxval))\nif toggle then extensions.blrglobals.blrFlagSet(\"smoothFueling\", true) end"
          },
          "customName":"Stop Fueling",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "max":true,
              "toggle":true,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Smooth Refuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            186,
            -1266
          ],
          "type":"util/customLua"
        },
        "1506":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1564,
            -1546
          ],
          "type":"types/genericValue"
        },
        "1507":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0.00999999977648298975
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">=",
          "pos":[
            1740,
            -1546
          ],
          "type":"logic/compare"
        },
        "1508":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"No money to refuel!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1964,
            -1434
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1509":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nif self.pinIn.league.value ~= nil then\ndtable[\"league\"] = self.pinIn.league.value\nend\n\nif self.pinIn.reputation.value ~= nil then\ndtable[\"rep\"] = self.pinIn.reputation.value\nend\n\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carCount":true,
              "carUsed":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":false,
              "reputation":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "string",
              "league",
              null,
              ""
            ],
            [
              "in",
              "number",
              "reputation",
              null,
              ""
            ]
          ],
          "pos":[
            2930,
            -1448
          ],
          "type":"util/customLua"
        },
        "1510":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":22
            },
            "clink":{
              "type":"number",
              "value":1
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":false
            },
            "text":{
              "type":"string",
              "value":"Drain Tank"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            2572,
            -1224
          ],
          "type":"util/customLua"
        },
        "1511":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"fastTrafficToggle"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1452,
            1114
          ],
          "type":"util/customLua"
        },
        "1512":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1466,
            1226
          ],
          "type":"logic/branch"
        },
        "1513":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local toggle = self.pinIn.toggle.value\nlocal poolamount = self.pinIn.amount.value\nlocal pool = gameplay_traffic.getTrafficPool()\n\nif pool then\nif toggle then\ngameplay_traffic.getTrafficPool():setMaxActiveAmount(poolamount)\ngameplay_traffic.getTrafficPool():setAllVehs(true)\nelse\ngameplay_traffic.getTrafficPool():setMaxActiveAmount(0)\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "amount":false,
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Fast Traffic Toggle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ],
            [
              "in",
              "number",
              "amount",
              null,
              ""
            ]
          ],
          "pos":[
            -1740,
            1408
          ],
          "type":"util/customLua"
        },
        "1514":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1502,
            1394
          ],
          "type":"logic/branch"
        },
        "1515":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrStationDisplays()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Init Gas Displays",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1390,
            1968
          ],
          "type":"util/customLua"
        },
        "1516":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1292,
            1408
          ],
          "type":"logic/once"
        },
        "1517":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":""
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1116,
            1394
          ],
          "type":"util/customLua"
        },
        "1518":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.val.value then\nself.pinOut.num.value = self.pinIn.tval.value\nelse\nself.pinOut.num.value = self.pinIn.fval.value\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fval":{
              "type":"number",
              "value":0
            },
            "tval":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fval":true,
              "tval":true,
              "val":false
            },
            "p_out":{
              "flow":false,
              "num":false
            }
          },
          "name":"Bool To Int",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "val",
              null,
              ""
            ],
            [
              "out",
              "number",
              "num",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fval",
              null,
              ""
            ],
            [
              "in",
              "number",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            -928,
            1394
          ],
          "type":"util/customLua"
        },
        "1519":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"trafficEnableFlag"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -752,
            1408
          ],
          "type":"types/genericValue"
        },
        "1520":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            2510,
            -1462
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1521":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "customName":"Gasoline Type",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"gasoline"
            },
            "var":{
              "type":"string",
              "value":"smoothFuelType"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":true,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "string",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2496,
            -1560
          ],
          "type":"util/customLua"
        },
        "1522":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(\"smoothFuelType\", \"diesel\")\nextensions.blrutils.blrvarSet(\"smoothFuelCost\", self.pinIn.cost.value)"
          },
          "customName":"Diesel Type",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Select Diesel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            2684,
            -1560
          ],
          "type":"util/customLua"
        },
        "1523":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(\"smoothFuelTier\", self.pinIn.tier.value)\nextensions.blrutils.blrvarSet(\"smoothFuelCost\", self.pinIn.cost.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tier":{
              "type":"string",
              "value":"regular"
            }
          },
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "tier":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Select Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "tier",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            1950,
            -1574
          ],
          "type":"util/customLua"
        },
        "1524":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(\"smoothFuelTier\", self.pinIn.tier.value)\nextensions.blrutils.blrvarSet(\"smoothFuelCost\", self.pinIn.cost.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tier":{
              "type":"string",
              "value":"midgrade"
            }
          },
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "tier":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Select Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "tier",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            2124,
            -1574
          ],
          "type":"util/customLua"
        },
        "1525":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(\"smoothFuelTier\", self.pinIn.tier.value)\nextensions.blrutils.blrvarSet(\"smoothFuelCost\", self.pinIn.cost.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tier":{
              "type":"string",
              "value":"premium"
            }
          },
          "hiddenPins":{
            "p_in":{
              "cost":false,
              "flow":false,
              "tier":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Select Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "tier",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ]
          ],
          "pos":[
            2300,
            -1574
          ],
          "type":"util/customLua"
        },
        "1526":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"fuelRatioString"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            920,
            -1714
          ],
          "type":"util/customLua"
        },
        "1527":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            670,
            355
          ],
          "commentText":"",
          "commentTitle":"Advanced Fuel Data Fetch",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -350,
            2618
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1528":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal strfetch = self.pinIn.strfetch.value\nextensions.vluaFetchModule.exec(veid, toFetch, id, strfetch)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"fuelratiostring"
            },
            "strfetch":{
              "type":"bool",
              "value":true
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getFuelRatioString()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":true,
              "flow":false,
              "strfetch":true,
              "toFetch":true,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "strfetch",
              null,
              ""
            ]
          ],
          "pos":[
            -122,
            2878
          ],
          "type":"util/customLua"
        },
        "1529":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nlocal ratiostr = self.pinIn.fuelratio.value\nlocal typestr = self.pinIn.fueltype.value\nlocal fueltypes = {}\nlocal fuelratios = {}\nve:queueLuaCommand(\"extensions.blrVehicleUtils.loadFuelType()\")\nif typestr then\nfuelratios = extensions.blrutils.ssplitnum(ratiostr, \",\")\nfueltypes = extensions.blrutils.ssplit(typestr, \",\")\nif #fueltypes == 1 then\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nelse -- force disable the engine if tank contains mixed fuel types\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f, true)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nend\nelse\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))\nend\n"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "fuelratio":false,
              "fueltype":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fuelratio",
              null,
              ""
            ]
          ],
          "pos":[
            1088,
            -2344
          ],
          "type":"util/customLua"
        },
        "1530":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":true,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            2278,
            2164
          ],
          "type":"util/customLua"
        },
        "1531":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal strfetch = self.pinIn.strfetch.value\nextensions.vluaFetchModule.exec(veid, toFetch, id, strfetch)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"fueltypestring"
            },
            "strfetch":{
              "type":"bool",
              "value":true
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getFuelTypesString()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "fetchID":true,
              "flow":false,
              "strfetch":true,
              "toFetch":true,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "strfetch",
              null,
              ""
            ]
          ],
          "pos":[
            -108,
            2682
          ],
          "type":"util/customLua"
        },
        "1532":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"fuelTypeString"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            122,
            2668
          ],
          "type":"util/customLua"
        },
        "1533":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.blrvarSet(self.pinIn.var.value, self.pinIn.val.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"fuelRatioString"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "val":false,
              "var":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Var Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            122,
            2850
          ],
          "type":"util/customLua"
        },
        "1534":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"pftypes"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -816,
            1856
          ],
          "type":"util/customLua"
        },
        "1535":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"pfratio"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -738,
            1856
          ],
          "type":"util/customLua"
        },
        "1536":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nlocal ratiostr = self.pinIn.fuelratio.value\nlocal typestr = self.pinIn.fueltype.value\nlocal fueltypes = {}\nlocal fuelratios = {}\nve:queueLuaCommand(\"extensions.blrVehicleUtils.loadFuelType()\")\nif typestr then\nfuelratios = extensions.blrutils.ssplitnum(ratiostr, \",\")\nfueltypes = extensions.blrutils.ssplit(typestr, \",\")\nif #fueltypes == 1 then\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nelse -- force disable the engine if tank contains mixed fuel types\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f, %q, %.12f,%.12f,%.12f, true)\", newFuelValue, fueltypes[1], fuelratios[1],fuelratios[2],fuelratios[3] ))\nend\nelse\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))\nend\n"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "fuelratio":false,
              "fueltype":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fueltype",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fuelratio",
              null,
              ""
            ]
          ],
          "pos":[
            -1088,
            2178
          ],
          "type":"util/customLua"
        },
        "1537":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal ftstr = extensions.blrutils.blrvarGet(\"fuelTypeString\") or \"none\"\nlocal frstr = extensions.blrutils.blrvarGet(\"fuelRatioString\") or \"1.0,0.0,0.0\"\nlocal dtable = {}\ndtable[\"fueltype\"] = ftstr\ndtable[\"fuelratio\"] = frstr\nextensions.blrutils.updateDataTable(self.pinIn.carfile.value, dtable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carfile":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Fuel Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "carfile",
              null,
              ""
            ]
          ],
          "pos":[
            3692,
            1590
          ],
          "type":"util/customLua"
        },
        "1538":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3084,
            862
          ],
          "type":"logic/once"
        },
        "1539":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal trig = extensions.blrutils.blrvarGet(\"towtrig\")\nextensions.blrutils.towingTriggerRefresh(self.pinIn.step.value, trig)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "step":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "step":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Tow Trigger Refresh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "step",
              null,
              ""
            ]
          ],
          "pos":[
            3476,
            1408
          ],
          "type":"util/customLua"
        },
        "1540":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3308,
            1408
          ],
          "type":"logic/once"
        },
        "1541":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrfade.fadeFromBlack(0)\nextensions.blrfade.setFromReady()\nextensions.blrglobals.blrFlagSet(\"towing\", false)",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal duration = self.pinIn.duration.value\nlocal done = extensions.blrfade.getToDone()\nif self.pinIn.reset.value then\nextensions.blrfade.setToReady()\nend\nif self.pinIn.flow.value then\nextensions.blrfade.fadeToBlack(duration)\nend\nself.pinOut.done.value = self.pinIn.flow.value and done"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":true,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "done":false,
              "flow":true
            }
          },
          "name":"Fade To Black",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "duration",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "done",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "reset",
              null,
              ""
            ]
          ],
          "pos":[
            3294,
            960
          ],
          "type":"util/customLua"
        },
        "1542":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal duration = self.pinIn.duration.value\nlocal done = extensions.blrfade.getFromDone()\nif self.pinIn.reset.value then\nextensions.blrfade.setFromReady()\nend\nif self.pinIn.flow.value then\nextensions.blrfade.fadeFromBlack(duration)\nend\nself.pinOut.done.value = self.pinIn.flow.value and done"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":true,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "done":false,
              "flow":true
            }
          },
          "name":"Fade From Black",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "reset",
              null,
              ""
            ],
            [
              "in",
              "number",
              "duration",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "done",
              null,
              ""
            ]
          ],
          "pos":[
            3300,
            1240
          ],
          "type":"util/customLua"
        },
        "1543":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Exit Safe Mode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3356,
            -594
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1544":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Part edit safe mode enabled. Exit safe mode to access garage and unfreeze vehicle."
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3174,
            -580
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1545":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"garageSafeMode\", false)\nextensions.blrflags.set(\"garageSafeMode\", false)\nextensions.blrglobals.gmSetVal(\"pgas\", extensions.blrglobals.gmGetVal(\"cgas\")) -- Gets current gas value and stores it for after part edit\nextensions.blrglobals.gmSetVal(\"podo\", extensions.blrglobals.gmGetVal(\"codo\"))-- do same thing with odometer\nextensions.blrglobals.gmSetVal(\"pnos\", extensions.blrglobals.gmGetVal(\"cnos\"))-- do same thing with NOS\nextensions.blrglobals.gmSetVal(\"pftypes\", extensions.blrutils.blrvarGet(\"fuelTypeString\")) -- 1.14.2 addition, fuel types\nextensions.blrglobals.gmSetVal(\"pfratio\", extensions.blrutils.blrvarGet(\"fuelRatioString\")) -- 1.14.2 addition, fuel ratio\nextensions.blrglobals.blrFlagSet(\"hasNos\", false) -- Setting hasNos to false to avoid vlua fetching bug before flag is set by N2O Check node\nextensions.blrhooks.linkHook(\"vehReset\", \"postedit\")\ncore_vehicle_manager.reloadVehicle(0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Exit Part Edit Safe Mode",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3538,
            -566
          ],
          "type":"util/customLua"
        },
        "1546":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"garageSafeMode\", false) -- flag for flowgraph, to remove need for file reading to draw imgui\nextensions.blrflags.set(\"garageSafeMode\", false)-- shared flag for vlua and gelua, using file saved table",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"garageSafeMode\", false) -- flag for flowgraph, to remove need for file reading to draw imgui\nextensions.blrflags.set(\"garageSafeMode\", false)-- shared flag for vlua and gelua, using file saved table"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Part Edit Safe Mode Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -368,
            1072
          ],
          "type":"util/customLua"
        },
        "1547":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"garageSafeMode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -738,
            -2316
          ],
          "type":"util/customLua"
        },
        "1548":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -788,
            -2204
          ],
          "type":"logic/branch"
        },
        "1549":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(\"garageSafeMode\", false)\nextensions.blrflags.set(\"garageSafeMode\", false)\nextensions.blrglobals.gmSetVal(\"pgas\", extensions.blrglobals.gmGetVal(\"cgas\")) -- Gets current gas value and stores it for after part edit\nextensions.blrglobals.gmSetVal(\"podo\", extensions.blrglobals.gmGetVal(\"codo\"))-- do same thing with odometer\nextensions.blrglobals.gmSetVal(\"pnos\", extensions.blrglobals.gmGetVal(\"cnos\"))-- do same thing with NOS\nextensions.blrglobals.gmSetVal(\"pftypes\", extensions.blrutils.blrvarGet(\"fuelTypeString\")) -- 1.14.2 addition, fuel types\nextensions.blrglobals.gmSetVal(\"pfratio\", extensions.blrutils.blrvarGet(\"fuelRatioString\")) -- 1.14.2 addition, fuel ratio\nextensions.blrglobals.blrFlagSet(\"hasNos\", false) -- Setting hasNos to false to avoid vlua fetching bug before flag is set by N2O Check node\nextensions.blrhooks.linkHook(\"vehReset\", \"postedit\")\ncore_vehicle_manager.reloadVehicle(0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Exit Part Edit Safe Mode",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -808,
            -1826
          ],
          "type":"util/customLua"
        },
        "1550":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Part edit safe mode enabled. Exit safe mode to access garage and unfreeze vehicle."
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -774,
            -2064
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1551":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            1774,
            1282
          ],
          "type":"logic/compare"
        },
        "1552":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Exit Safe Mode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -788,
            -1952
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1553":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal flag = self.pinIn.flag.value\nlocal onceMode = self.pinIn.onceMode.value\nlocal state = extensions.blrglobals.blrFlagGet(flag)\nlocal outflow = state\nif state and onceMode then extensions.blrglobals.blrFlagSet(flag, false) end\nself.pinOut.out.value = outflow and self.pinIn.flow.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"string",
              "value":"eventBrowserReloadCar"
            },
            "onceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "onceMode":true
            },
            "p_out":{
              "flow":true,
              "out":false
            }
          },
          "name":"BLR Flag Flow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "out",
              null,
              ""
            ],
            [
              "in",
              "string",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "onceMode",
              null,
              ""
            ]
          ],
          "pos":[
            -3440,
            1548
          ],
          "type":"util/customLua"
        },
        "1554":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vehid = self.pinIn.vehid.value\nlocal veh = scenetree.findObjectById(vehid)\nif not map.objects[vehid] then\nveh:queueLuaCommand(\"extensions.blrVehicleUtils.forceMapInit()\")\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Send Tracking",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            1250,
            1226
          ],
          "type":"util/customLua"
        },
        "1555":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal vehid = self.pinIn.vehid.value\nlocal veh = scenetree.findObjectById(vehid)\nif not map.objects[vehid] then\nveh:queueLuaCommand(\"extensions.blrVehicleUtils.forceMapInit()\")\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Send Tracking",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            6450,
            288
          ],
          "type":"util/customLua"
        },
        "1556":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3440,
            1884
          ],
          "type":"logic/once"
        },
        "1557":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2734,
            -3324
          ],
          "type":"logic/branch"
        },
        "1558":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"shopWalkingMode"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            2376,
            -2582
          ],
          "type":"util/customLua"
        },
        "1559":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2572,
            -2582
          ],
          "type":"logic/branch"
        },
        "1560":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3720,
            -3086
          ],
          "type":"vehicle/removeVehicle"
        },
        "1561":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3202,
            -1112
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "1562":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.vehid.value)\nveh.obj.playerUsable = self.pinIn.toggle.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":true,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Player Usable",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1550,
            1170
          ],
          "type":"util/customLua"
        },
        "1563":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.vehid.value)\nveh.obj.playerUsable = self.pinIn.toggle.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":true,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Player Usable",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            1250,
            -2974
          ],
          "type":"util/customLua"
        },
        "1564":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh\n\nif self.pinIn.A.value then\nfor k,v in pairs(self.pinIn.A.value) do\nveh = scenetree.findObjectById(v)\nif veh then veh.obj.playerUsable = self.pinIn.toggle.value end\nend\nend\n\nif self.pinIn.B.value then\nfor k,v in pairs(self.pinIn.B.value) do\nveh = scenetree.findObjectById(v)\nif veh then veh.obj.playerUsable = self.pinIn.toggle.value end\nend\nend\n\nif self.pinIn.C.value then\nfor k,v in pairs(self.pinIn.C.value) do\nveh = scenetree.findObjectById(v)\nif veh then veh.obj.playerUsable = self.pinIn.toggle.value end\nend\nend\n\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "C":false,
              "flow":false,
              "toggle":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Player Usable Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "A",
              null,
              ""
            ],
            [
              "in",
              "table",
              "B",
              null,
              ""
            ],
            [
              "in",
              "table",
              "C",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -654,
            1254
          ],
          "type":"util/customLua"
        },
        "1565":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.vehid.value)\nveh.obj.playerUsable = self.pinIn.toggle.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":true,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Player Usable",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -1270,
            -188
          ],
          "type":"util/customLua"
        },
        "1566":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            4455,
            -1322
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1567":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            4686,
            -1028
          ],
          "type":"logic/branch"
        },
        "1568":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrItemInventory.saveInventory()",
            "onPreRender":"",
            "work":"-- ALSO SAVES IN _executionStopped\nlocal extensions = require(\"extensions\")\nextensions.blrItemInventory.loadInventory()\nextensions.customGuiStream.sendItemInventory()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Item Inventory",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -116,
            1072
          ],
          "type":"util/customLua"
        },
        "1569":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal units = extensions.blrutils.getSettingValue(\"uiUnits\")\nlocal gprice = self.pinIn.gasoline.value\nlocal dprice = self.pinIn.diesel.value\nlocal oprice = self.pinIn.oil.value\n\nif units == \"imperial\" then\nself.pinOut.qstr.value = \"Fuel Can (~2.6 Gallons)\"\nself.pinOut.gstr.value = \"Gasoline ($\" .. string.format(\"%.2f\", gprice * 10.0) .. \")\"\nself.pinOut.dstr.value = \"Diesel ($\" .. string.format(\"%.2f\", dprice * 10.0) .. \")\"\nself.pinOut.ostr.value = \"Oil Bottle (~1.3 Gallons)\"\nself.pinOut.obtn.value = \"OILEX 5W-30 ($\" .. string.format(\"%.2f\", oprice * 5.0) .. \")\"\nelse\nself.pinOut.qstr.value = \"Fuel Can (10 Liters)\"\nself.pinOut.gstr.value = \"Gasoline ($\" .. string.format(\"%.2f\", gprice * 10.0) .. \")\"\nself.pinOut.dstr.value = \"Diesel ($\" .. string.format(\"%.2f\", dprice * 10.0) .. \")\"\nself.pinOut.ostr.value = \"Oil Bottle (5 Liters)\"\nself.pinOut.obtn.value = \"OILEX 5W-30 ($\" .. string.format(\"%.2f\", oprice * 5.0) .. \")\"\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "oil":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "diesel":false,
              "flow":false,
              "gasoline":false,
              "oil":false
            },
            "p_out":{
              "dstr":false,
              "flow":false,
              "gstr":false,
              "obtn":false,
              "ostr":false,
              "qstr":false
            }
          },
          "name":"Walk Store Costs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "gasoline",
              null,
              ""
            ],
            [
              "in",
              "number",
              "diesel",
              null,
              ""
            ],
            [
              "out",
              "string",
              "gstr",
              null,
              ""
            ],
            [
              "out",
              "string",
              "dstr",
              null,
              ""
            ],
            [
              "out",
              "string",
              "qstr",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ostr",
              null,
              ""
            ],
            [
              "out",
              "string",
              "obtn",
              null,
              ""
            ]
          ],
          "pos":[
            3196,
            -1420
          ],
          "type":"util/customLua"
        },
        "1570":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2922,
            -2722
          ],
          "type":"types/genericValue"
        },
        "1571":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal cslot = self.pinIn.cslot.value\nlocal slotmap = self.pinIn.slotmap.value -- KEY: VEH ID / VAL: SLOT ID\nlocal cid = be:getPlayerVehicleID(0)\nlocal update = false\nlocal newslot = cslot\nlocal playerid = extensions.blrutils.blrvarGet(\"playervehid\") -- vehid of car currently owned by player\nlocal playermodel = extensions.betterpartmgmt.getMainPartName()\nlocal cancel = false\n\n-- If this is false it means player is walking as current vehid isnt a spawned vehicle\nif slotmap[cid] then\nif cslot ~= slotmap[cid] then\nupdate = true\nnewslot = slotmap[cid]\nend\nelseif cid == playerid and playermodel ~= \"unicycle\" then\ncancel = true -- Detect when player goes back to their own car which exits car shop\nend-- avoids doing this if player was originally walking\n\nself.pinOut.cancel.value = cancel\nself.pinOut.newslot.value = newslot\nself.pinOut.update.value = update"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cslot":false,
              "flow":false,
              "slotmap":false
            },
            "p_out":{
              "cancel":false,
              "flow":false,
              "newslot":false,
              "update":false
            }
          },
          "name":"Walk Slot Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "cslot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "slotmap",
              null,
              ""
            ],
            [
              "out",
              "number",
              "newslot",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "update",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "cancel",
              null,
              ""
            ]
          ],
          "pos":[
            3070,
            -2750
          ],
          "type":"util/customLua"
        },
        "1572":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3286,
            -2722
          ],
          "type":"logic/branch"
        },
        "1573":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3728,
            -2722
          ],
          "type":"types/genericValue"
        },
        "1574":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3286,
            -2792
          ],
          "type":"logic/branch"
        },
        "1575":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3532,
            -2722
          ],
          "type":"logic/once"
        },
        "1576":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"guihooks.trigger(\"BeamLRRaceFinished\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Last Lap Delta",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2180,
            78
          ],
          "type":"util/customLua"
        },
        "1577":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4728,
            -902
          ],
          "type":"vehicle/removeVehicle"
        },
        "1578":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3308,
            -3044
          ],
          "type":"logic/branch"
        },
        "1579":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            4343,
            -90
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1580":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":false,
              "flow":false,
              "nocar":true,
              "walk":false
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            4484,
            330
          ],
          "type":"util/customLua"
        },
        "1581":{
          "data":{
            "aboveSpacing":5,
            "belowSpacing":5
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3370,
            -1504
          ],
          "type":"ui/imgui/elemental/imSeparator"
        },
        "1582":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            4476,
            554
          ],
          "type":"logic/branch"
        },
        "1583":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"if self.pinIn.id.value then\nlocal currentObj = scenetree.findObjectById(self.pinIn.id.value)\nif currentObj ~= nil then\ncurrentObj:delete()\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            4728,
            582
          ],
          "type":"util/customLua"
        },
        "1584":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3210,
            -1210
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1585":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            656,
            368
          ],
          "commentText":"",
          "commentTitle":"Item Inventory Use",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            3976,
            -2030
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1586":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal flag = self.pinIn.flag.value\nlocal onceMode = self.pinIn.onceMode.value\nlocal state = extensions.blrglobals.blrFlagGet(flag)\nlocal outflow = state\nif state and onceMode then extensions.blrglobals.blrFlagSet(flag, false) end\nself.pinOut.out.value = outflow and self.pinIn.flow.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"string",
              "value":"itemUseQueued"
            },
            "onceMode":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "onceMode":true
            },
            "p_out":{
              "flow":true,
              "out":false
            }
          },
          "name":"BLR Flag Flow",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "out",
              null,
              ""
            ],
            [
              "in",
              "string",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "onceMode",
              null,
              ""
            ]
          ],
          "pos":[
            4002,
            -1980
          ],
          "type":"util/customLua"
        },
        "1587":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal gasoline_10 = self.pinIn.gasoline_10.value\nlocal diesel_10 = self.pinIn.diesel_10.value\nlocal oil_5 = self.pinIn.oil_5.value\nlocal gcost = self.pinIn.gcost.value\nlocal dcost = self.pinIn.dcost.value\nlocal ocost = self.pinIn.ocost.value\nlocal pmoney = self.pinIn.pmoney.value\nlocal cost = 0\nlocal bought = false\n\nif gasoline_10 then\ncost = gcost * 10.0\nif pmoney >= cost then\npmoney = pmoney - cost\nbought = true\nextensions.blrItemInventory.addToInventory(\"fuelcan\",extensions.blrItemInventory.fuelcan:new(\"gasoline\", \"regular\", 10))\nend\nelseif diesel_10 then\ncost = dcost * 10.0\nif pmoney >= cost then\npmoney = pmoney - cost\nbought = true\nextensions.blrItemInventory.addToInventory(\"fuelcan\",extensions.blrItemInventory.fuelcan:new(\"diesel\", \"regular\", 10))\nend\nelseif oil_5 then\ncost = ocost * 5.0\npmoney = pmoney - cost\nbought = true\nextensions.blrItemInventory.addToInventory(\"oilbottle\",extensions.blrItemInventory.oilbottle:new(\"OILEX\", \"5W-30\",5))\nend\n\nif bought then \nextensions.blrItemInventory.saveInventory()\nextensions.customGuiStream.sendItemInventory()\nend\n\nself.pinOut.bought.value = bought\nself.pinOut.pmoney.value = pmoney\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ocost":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "dcost":false,
              "diesel_10":false,
              "flow":true,
              "gasoline_10":false,
              "gcost":false,
              "ocost":false,
              "oil_5":false,
              "pmoney":false
            },
            "p_out":{
              "bought":false,
              "flow":true,
              "pmoney":false
            }
          },
          "name":"Convenience Store",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "gasoline_10",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "diesel_10",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "bought",
              null,
              ""
            ],
            [
              "in",
              "flow",
              "oil_5",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gcost",
              null,
              ""
            ],
            [
              "in",
              "number",
              "dcost",
              null,
              ""
            ],
            [
              "in",
              "number",
              "ocost",
              null,
              ""
            ],
            [
              "in",
              "number",
              "pmoney",
              null,
              ""
            ],
            [
              "out",
              "number",
              "pmoney",
              null,
              ""
            ]
          ],
          "pos":[
            3706,
            -1266
          ],
          "type":"util/customLua"
        },
        "1588":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            3392,
            -1406
          ],
          "type":"types/genericValue"
        },
        "1589":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4000,
            -1252
          ],
          "type":"types/genericValue"
        },
        "1590":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal file = self.pinIn.file.value\nextensions.blrutils.blrvarSet(\"SFXFile\", file)\nextensions.blrglobals.blrFlagSet(\"SFXQueued\", true)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "file":{
              "type":"string",
              "value":"event:>UI>Career>Buy_01"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Play SFX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            4000,
            -1112
          ],
          "type":"util/customLua"
        },
        "1591":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"item_itype"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            4000,
            -1826
          ],
          "type":"util/customLua"
        },
        "1592":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"item_idata"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            4000,
            -1742
          ],
          "type":"util/customLua"
        },
        "1593":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -122,
            1156
          ],
          "type":"logic/frameDelay"
        },
        "1594":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.vehid.value)\nlocal itype = self.pinIn.itype.value\nlocal ikey = self.pinIn.ikey.value\nlocal idata = self.pinIn.idata.value\n\nlocal cmd = {}\ncmd[\"fuelcan\"] = string.format(\"extensions.blrVehicleUtils.useFuelCanister(%q,%q,%q,%f)\", ikey, idata.ftype, idata.ftier, idata.quantity)\ncmd[\"oilbottle\"] = string.format(\"extensions.blrVehicleUtils.useOilBottle(%q,%q,%q,%f)\",ikey, idata.brand, idata.grade, idata.quantity)\n\n--cmd[\"fuelcan\"] = \"extensions.blrVehicleUtils.useFuelCanister('\" .. ikey ..\"','\".. idata.ftype or \"\" ..\"','\" .. idata.ftier or \"\" .. \"',\" .. idata.quantity or 0 .. \")\"\n--cmd[\"oilbottle\"] = \"extensions.blrVehicleUtils.useOilBottle('\" .. ikey ..\"','\".. idata.brand or \"\"..\"','\" .. idata.grade or \"\" .. \"',\" .. idata.quantity or 0 .. \")\"\n\nif veh and cmd[itype] then\nveh:queueLuaCommand(cmd[itype])\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idata":false,
              "ikey":false,
              "itype":false,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Use Item",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "itype",
              null,
              ""
            ],
            [
              "in",
              "string",
              "ikey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "idata",
              null,
              ""
            ]
          ],
          "pos":[
            4434,
            -1994
          ],
          "type":"util/customLua"
        },
        "1595":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            4189,
            -1980
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1596":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"item_ikey"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            4000,
            -1910
          ],
          "type":"util/customLua"
        },
        "1597":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.walk.value = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "walk":false
            }
          },
          "name":"Player Walking",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ]
          ],
          "pos":[
            4182,
            -1756
          ],
          "type":"util/customLua"
        },
        "1598":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            4196,
            -1896
          ],
          "type":"logic/branch"
        },
        "1599":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"coil"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2516,
            -286
          ],
          "type":"util/customLua"
        },
        "1600":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal flag = extensions.blrglobals.getFlag(k)\nlocal toRet = extensions.blrglobals.fgGetVal(k)\nself.pinOut.val.value = toRet\nself.pinOut.flag.value = flag\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"poil"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false
            },
            "p_out":{
              "flag":true,
              "flow":false,
              "val":false
            }
          },
          "name":"BLRGlobal Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -662,
            1856
          ],
          "type":"util/customLua"
        },
        "1601":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal oil = self.pinIn.oil.value\nve:queueLuaCommand(\"extensions.blrVehicleUtils.setOilVolume(\" .. oil .. \")\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "oil":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Oil",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            1396,
            932
          ],
          "type":"util/customLua"
        },
        "1602":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal oil = self.pinIn.oil.value\nve:queueLuaCommand(\"extensions.blrVehicleUtils.setOilVolume(\" .. oil .. \")\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "oil":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Oil",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            5142,
            554
          ],
          "type":"util/customLua"
        },
        "1603":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "category":{
              "type":"string",
              "value":"inventory"
            },
            "duration":{
              "type":"number",
              "value":10
            },
            "icon":{
              "type":"string",
              "value":"directions_car"
            },
            "message":{
              "type":"string",
              "value":"Cannot use item while walking!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "category":false,
              "duration":false,
              "flow":false,
              "icon":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4428,
            -1812
          ],
          "type":"ui/message"
        },
        "1604":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal oil = self.pinIn.oil.value\nve:queueLuaCommand(\"extensions.blrVehicleUtils.setOilVolume(\" .. oil .. \")\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "oil":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Oil",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            -1096,
            2472
          ],
          "type":"util/customLua"
        },
        "1605":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            724,
            -1714
          ],
          "type":"util/customLua"
        },
        "1606":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal oil = self.pinIn.oil.value\nve:queueLuaCommand(\"extensions.blrVehicleUtils.setOilVolume(\" .. oil .. \")\")"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "oil":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Oil",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "oil",
              null,
              ""
            ]
          ],
          "pos":[
            906,
            -1938
          ],
          "type":"util/customLua"
        },
        "1607":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.tkey.value] = self.pinIn.tval.value or 0\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nprint(ndata)\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tkey":{
              "type":"string",
              "value":"oil"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "tkey":false,
              "tval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            3594,
            1646
          ],
          "type":"util/customLua"
        },
        "1608":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "asDuration":{
              "type":"bool",
              "value":true
            },
            "input":{
              "type":"number",
              "value":60
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":false,
              "reset":true,
              "reverseHit":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            416,
            2556
          ],
          "type":"logic/rateLimit"
        },
        "1609":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.setParam(\"leakvehid\", self.pinIn.veid.value)\nextensions.blrdelay.queue(\"updateOilLeak\", \"leakvehid\", 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set oil leak rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            1026,
            -1868
          ],
          "type":"util/customLua"
        },
        "1610":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            446,
            285
          ],
          "commentText":"Dynamically update oil leak rate as odometer value changes, can use\\nvery slow interval since odometer doesn't change very fast and small\\nodometer changes barely affect overall leak rate",
          "commentTitle":"Oil leak rate update",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            392,
            2450
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "1611":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local veh = scenetree.findObjectById(self.pinIn.veid.value)\nif veh then\nveh:queueLuaCommand(\"extensions.blrVehicleUtils.updateOilLeakRate()\")\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set oil leak rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            668,
            2556
          ],
          "type":"util/customLua"
        },
        "1612":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            612,
            2668
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1613":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.setParam(\"leakvehid\", self.pinIn.veid.value)\nextensions.blrdelay.queue(\"updateOilLeak\", \"leakvehid\", 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set oil leak rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            1558,
            1226
          ],
          "type":"util/customLua"
        },
        "1614":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.setParam(\"leakvehid\", self.pinIn.veid.value)\nextensions.blrdelay.queue(\"updateOilLeak\", \"leakvehid\", 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set oil leak rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            6458,
            400
          ],
          "type":"util/customLua"
        },
        "1615":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.setParam(\"leakvehid\", self.pinIn.veid.value)\nextensions.blrdelay.queue(\"updateOilLeak\", \"leakvehid\", 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set oil leak rate",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            -598,
            2500
          ],
          "type":"util/customLua"
        },
        "1616":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3412,
            -1210
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1617":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"updatevehid\", nil, 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delayed Walk ID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3756,
            -3296
          ],
          "type":"util/customLua"
        },
        "1618":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"core_sounds.setAudioBlur(self.pinIn.value.value or 0)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Audio Blur",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "value",
              null,
              ""
            ]
          ],
          "pos":[
            108,
            1198
          ],
          "type":"util/customLua"
        },
        "1619":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            108,
            1086
          ],
          "type":"logic/once"
        },
        "1620":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"be:enterVehicle(0, scenetree.findObjectById(self.pinIn.vehid.value))"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Enter Veh Keep Unicycle",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ]
          ],
          "pos":[
            3504,
            -3156
          ],
          "type":"util/customLua"
        },
        "1621":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            4504,
            -398
          ],
          "type":"logic/branch"
        },
        "1622":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"updatevehid\", nil, 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delayed Walk ID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1488,
            176
          ],
          "type":"util/customLua"
        },
        "1623":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"updatevehid\", nil, 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delayed Walk ID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1942,
            -1378
          ],
          "type":"util/customLua"
        },
        "1624":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"updatevehid\", nil, 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delayed Walk ID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            5590,
            -1154
          ],
          "type":"util/customLua"
        },
        "1625":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrdelay.queue(\"updatevehid\", nil, 10)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delayed Walk ID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            3644,
            -2162
          ],
          "type":"util/customLua"
        },
        "1626":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"scenetree.findObjectById(self.pinIn.vehid.value):setHidden(self.pinIn.hide.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "hide":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "hide":true,
              "vehid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Set Hidden",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "vehid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "hide",
              null,
              ""
            ]
          ],
          "pos":[
            3720,
            -3156
          ],
          "type":"util/customLua"
        },
        "1627":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and (not nocar) then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":false,
              "current":true,
              "flow":false,
              "nocar":false,
              "walk":true
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            -1334,
            -2064
          ],
          "type":"util/customLua"
        },
        "1628":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -1572,
            -1910
          ],
          "type":"scene/getPlayerVehicle"
        },
        "1629":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3714,
            -2988
          ],
          "type":"vehicle/enterVehicle"
        },
        "1630":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local currentObj = scenetree.findObjectById(self.pinIn.id.value)\nif currentObj then\ncurrentObj:delete()\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            3756,
            -3394
          ],
          "type":"util/customLua"
        },
        "1631":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal walking = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\"\nlocal storedid = extensions.blrutils.blrvarGet(\"playervehid\")\nlocal current = self.pinIn.current.value\nlocal nocar = walking and (storedid == current)\nif walking and storedid > 0 then self.pinOut.actual.value = storedid\nelse self.pinOut.actual.value = current\nend\nself.pinOut.walk.value = walking\nself.pinOut.current.value = current\nself.pinOut.nocar.value = nocar\n\nprint(current .. \" VS \" .. storedid)\nprint(extensions.betterpartmgmt.getMainPartName(true))\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "current":false,
              "flow":false
            },
            "p_out":{
              "actual":true,
              "current":true,
              "flow":false,
              "nocar":false,
              "walk":false
            }
          },
          "name":"Walking Actual Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "number",
              "actual",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ],
            [
              "out",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "nocar",
              null,
              ""
            ]
          ],
          "pos":[
            2964,
            -3352
          ],
          "type":"util/customLua"
        },
        "1632":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nself.pinOut.walk.value = extensions.betterpartmgmt.getMainPartName(true) == \"unicycle\""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "walk":false
            }
          },
          "name":"Player Walking",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "walk",
              null,
              ""
            ]
          ],
          "pos":[
            3224,
            -440
          ],
          "type":"util/customLua"
        },
        "1633":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            3132,
            -356
          ],
          "type":"logic/branch"
        },
        "1634":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Must be in vehicle to repair"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3392,
            -440
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "1635":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.output.value = self.pinIn.input.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            2762,
            -1854
          ],
          "type":"util/customLua"
        },
        "1636":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.resetTimerData()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Timer Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -704,
            -1000
          ],
          "type":"util/customLua"
        },
        "1637":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.resetTimerData()"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Timer Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2544,
            -4080
          ],
          "type":"util/customLua"
        },
        "4986":{
          "count":5,
          "customName":"Player Exit",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"carshop"
            },
            "value_2":{
              "type":"string",
              "value":"garage"
            },
            "value_3":{
              "type":"string",
              "value":"partshop"
            },
            "value_4":{
              "type":"string",
              "value":"repair"
            },
            "value_5":{
              "type":"string",
              "value":"station"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false,
              "value_4":false,
              "value_5":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "match_4":false,
              "match_5":false,
              "none":false
            }
          },
          "pos":[
            -32,
            -1070
          ],
          "type":"logic/switchcase"
        },
        "4988":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -760,
            -3167
          ],
          "type":"logic/bundle"
        },
        "4994":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -970,
            -2915
          ],
          "type":"logic/bundle"
        },
        "4995":{
          "count":4,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            },
            "value_4":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":true,
              "value_2":true,
              "value_3":true,
              "value_4":true
            },
            "p_out":{
              "flow":true,
              "match_1":false,
              "match_2":false,
              "match_3":true,
              "match_4":true,
              "none":true
            }
          },
          "pos":[
            -276,
            -2750
          ],
          "type":"logic/switchcase"
        },
        "5001":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionGiverUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1004,
            -3156
          ],
          "type":"types/genericValue"
        },
        "5002":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionGiverUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -500,
            -2820
          ],
          "type":"types/genericValue"
        },
        "5006":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -970,
            -3027
          ],
          "type":"logic/bundle"
        },
        "5007":{
          "alpha":1,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            180,
            57
          ],
          "commentText":"",
          "commentTitle":"Active Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -994,
            -3066
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "5016":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDestid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1278,
            -2708
          ],
          "type":"types/genericValue"
        },
        "9870":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDesc"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            178,
            -2680
          ],
          "type":"types/genericValue"
        },
        "9871":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "title":{
              "type":"string",
              "value":"Mission Failure"
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":false,
              "posX":false,
              "posY":false,
              "title":false,
              "width":false
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            248,
            -3758
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "9875":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"You failed the mission!"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -3772
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "9876":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Exit"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            486,
            -3632
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "9877":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            -3786
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "9879":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":4
            },
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            794,
            -4304
          ],
          "type":"types/genericValue"
        },
        "9880":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1278,
            -2624
          ],
          "type":"types/genericValue"
        },
        "9882":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            402,
            -4584
          ],
          "type":"types/genericValue"
        },
        "9883":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            836,
            -4486
          ],
          "type":"types/genericValue"
        },
        "9884":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionGiverUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            52,
            -3660
          ],
          "type":"types/genericValue"
        },
        "9885":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"missionGiverUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            878,
            -3702
          ],
          "type":"types/genericValue"
        },
        "9886":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            186,
            71
          ],
          "commentText":"",
          "commentTitle":"UI Flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            -784,
            -3220
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "9887":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDestpos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -508,
            -4486
          ],
          "type":"types/genericValue"
        },
        "9889":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"currentMissionDestpos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1278,
            -2540
          ],
          "type":"types/genericValue"
        },
        "9891":{
          "count":2,
          "customName":"Garage",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -748
          ],
          "type":"logic/and"
        },
        "9892":{
          "customName":"Garage",
          "data":{
            "value":1
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "value":false
            }
          },
          "pos":[
            2740,
            -258
          ],
          "type":"types/number"
        },
        "9896":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"playerGarageUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4154,
            -440
          ],
          "type":"types/genericValue"
        },
        "9897":{
          "customName":"Garage",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"playerGarageUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -46,
            -902
          ],
          "type":"types/genericValue"
        },
        "9899":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            4084,
            358
          ],
          "type":"types/genericValue"
        },
        "9901":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":false,
              "config":false,
              "damage":false,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":false,
              "name":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ]
          ],
          "pos":[
            4728,
            -594
          ],
          "type":"util/customLua"
        },
        "9909":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            4518,
            -496
          ],
          "type":"util/customLua"
        },
        "9913":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            788,
            246
          ],
          "type":"util/customLua"
        },
        "9914":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            374,
            316
          ],
          "type":"util/customLua"
        },
        "9915":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":false,
              "config":false,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":false,
              "name":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ]
          ],
          "pos":[
            598,
            316
          ],
          "type":"util/customLua"
        },
        "9916":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"Needs some delay\\nBefore stop project",
          "commentTitle":"Save Beamstate",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            1008,
            406
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "9928":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"carShopSelectedSlot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2656,
            -2876
          ],
          "type":"types/genericValue"
        },
        "9929":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2152,
            -202
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "9931":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -122,
            -2302
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "10003":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            2936,
            -3758
          ],
          "type":"util/customLua"
        },
        "10004":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            2740,
            -3758
          ],
          "type":"types/genericValue"
        },
        "10007":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"uiTriggerState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            752,
            -776
          ],
          "type":"types/genericValue"
        },
        "10008":{
          "count":2,
          "customName":"Race",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -678
          ],
          "type":"logic/and"
        },
        "10011":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -676,
            -1126
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10012":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -486,
            -1154
          ],
          "type":"types/genericValue"
        },
        "10013":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -424,
            -1350
          ],
          "type":"types/genericValue"
        },
        "10014":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":3
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -480,
            -888
          ],
          "type":"types/genericValue"
        },
        "10015":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -438,
            -1266
          ],
          "type":"types/genericValue"
        },
        "10016":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -732,
            -776
          ],
          "type":"types/genericValue"
        },
        "10017":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Close Menu"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -928,
            -776
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10021":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceMenuPage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -718,
            -720
          ],
          "type":"types/genericValue"
        },
        "10022":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2580,
            456
          ],
          "type":"types/genericValue"
        },
        "10023":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3672,
            78
          ],
          "type":"types/genericValue"
        },
        "10024":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -466,
            -1084
          ],
          "type":"types/genericValue"
        },
        "10025":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceDesc"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            -2232
          ],
          "type":"types/genericValue"
        },
        "10026":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceAIWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1880,
            -2232
          ],
          "type":"types/genericValue"
        },
        "10027":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceForSlips"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -2232
          ],
          "type":"types/genericValue"
        },
        "10028":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWager"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2216,
            -2232
          ],
          "type":"types/genericValue"
        },
        "10029":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWager"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -1084
          ],
          "type":"types/genericValue"
        },
        "10030":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceForSlips"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -1014
          ],
          "type":"types/genericValue"
        },
        "10031":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -704,
            -958
          ],
          "type":"types/genericValue"
        },
        "10032":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -270,
            -692
          ],
          "type":"types/genericValue"
        },
        "10033":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -466,
            -1000
          ],
          "type":"util/customLua"
        },
        "10034":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -682,
            -1084
          ],
          "type":"types/genericValue"
        },
        "10035":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -944
          ],
          "type":"types/genericValue"
        },
        "10036":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -284,
            -1084
          ],
          "type":"types/genericValue"
        },
        "10037":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -804
          ],
          "type":"util/customLua"
        },
        "10038":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyModel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2552,
            -2106
          ],
          "type":"types/genericValue"
        },
        "10039":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyConfig"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            -2106
          ],
          "type":"types/genericValue"
        },
        "10040":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyRisk"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2216,
            -2106
          ],
          "type":"types/genericValue"
        },
        "10041":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyModel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1992,
            -636
          ],
          "type":"types/genericValue"
        },
        "10042":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyConfig"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1838,
            -636
          ],
          "type":"types/genericValue"
        },
        "10043":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyRisk"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1992,
            -538
          ],
          "type":"types/genericValue"
        },
        "10044":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "block":{
              "type":"bool",
              "value":false
            },
            "ignoreUnrestriced":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "block":true,
              "flow":false,
              "id":true,
              "ignoreUnrestriced":true,
              "reset":false
            },
            "p_out":{
              "flow":false,
              "id":true
            }
          },
          "list":[
            "appedit",
            "nodegrabberRender"
          ],
          "pos":[
            -710,
            106
          ],
          "type":"input/blacklistAction"
        },
        "10049":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devices = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\n\nif ve then\n\nlocal cfid = \"\"\nlocal cfidval = 0\nlocal cfidb = \"\"\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\n-- Loop to fetch damage values and add them to table\n\nfor k,v in pairs(devices) do\ndtable[k] = {}\nfor _,dev in pairs(devices[k]) do\n\ntoFetch = \"damageTracker.getDamage('\" .. k .. \"', '\" .. dev .. \"')\"\ncfid = \"dmgtrk\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n\nif dev == \"engineReducedTorque\" or dev == \"mildOverrevDamage\" or dev == \"catastrophicOverTorqueDamage\" then\ncfidb = cfid .. \"B\"\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\n\n-- Now fetching extra values in some cases\nif dev == \"engineReducedTorque\" or dev == \"mildOverrevDamage\" then\ntoFetch = \"powertrain.getDevice('mainEngine').outputTorqueState\"\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfidb ..\"'))\" \nve:queueLuaCommand(vecmd)\ndtable[k][dev] = tostring(extensions.vluaFetchModule.getVal(cfid)) .. \",\" .. tostring(extensions.vluaFetchModule.getVal(cfidb))\nelseif dev == \"catastrophicOverTorqueDamage\" then\ntoFetch = \"powertrain.getDevice('mainEngine').overTorqueDamage\"\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfidb ..\"'))\" \nve:queueLuaCommand(vecmd)\ndtable[k][dev] = tostring(extensions.vluaFetchModule.getVal(cfid)) .. \",\" .. tostring(extensions.vluaFetchModule.getVal(cfidb))\nelse\ndtable[k][dev] = extensions.vluaFetchModule.getVal(cfid)\nend\n\n\ncfidval = cfidval + 1\nend\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.damageData.value = dtable\n\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "damageData":false,
              "flow":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "damageData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ]
          ],
          "pos":[
            5820,
            -608
          ],
          "type":"util/customLua"
        },
        "10050":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.dmg.value\nextensions.mechDamageLoader.saveDamageToFile(self.pinIn.file.value, dtable)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dmg":false,
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Mech Damage",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "dmg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            5596,
            -496
          ],
          "type":"util/customLua"
        },
        "10051":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            170,
            58
          ],
          "commentText":"",
          "commentTitle":"Active flow",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withNodes",
          "pos":[
            5096,
            -84
          ],
          "simple":false,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "10053":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devices = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal cfid = \"\"\nlocal cfidval = 0\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\n-- Loop to fetch damage values and add them to table\n\nfor k,v in pairs(devices) do\ndtable[k] = {}\nfor _,dev in pairs(devices[k]) do\n\ntoFetch = \"damageTracker.getDamage('\" .. k .. \"', '\" .. dev .. \"')\"\ncfid = \"dmgtrk\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[k][dev] = extensions.vluaFetchModule.getVal(cfid)\ncfidval = cfidval + 1\nend\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.damageData.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "damageData":false,
              "flow":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Damage",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "damageData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ]
          ],
          "pos":[
            1270,
            638
          ],
          "type":"util/customLua"
        },
        "10054":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = self.pinIn.dmg.value\nextensions.mechDamageLoader.saveDamageToFile(self.pinIn.file.value, dtable)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dmg":false,
              "file":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Mech Damage",
          "pins":[
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "dmg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1004,
            806
          ],
          "type":"util/customLua"
        },
        "10055":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":130
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            794,
            736
          ],
          "type":"logic/frameDelay"
        },
        "10058":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3244,
            -2064
          ],
          "type":"types/genericValue"
        },
        "10059":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3244,
            -2190
          ],
          "type":"types/genericValue"
        },
        "10060":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local dtable = self.pinIn.data.value\nlocal wid = self.pinIn.wid.value\nif dtable[wid .. \"x\"] ~= nil then\nself.pinOut.x.value = tonumber(dtable[wid .. \"x\"])\nself.pinOut.y.value = tonumber(dtable[wid .. \"y\"])\nself.pinOut.w.value = tonumber(dtable[wid .. \"w\"])\nself.pinOut.h.value = tonumber(dtable[wid .. \"h\"])\nelse\nself.pinOut.x.value = 100\nself.pinOut.y.value = 100\nself.pinOut.w.value = 200\nself.pinOut.h.value = 220\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "wid":{
              "type":"string",
              "value":"fuel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "wid":false
            },
            "p_out":{
              "flow":false,
              "h":false,
              "w":false,
              "x":false,
              "y":false
            }
          },
          "name":"Get IM Prefs",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "x",
              null,
              ""
            ],
            [
              "out",
              "number",
              "y",
              null,
              ""
            ],
            [
              "out",
              "number",
              "w",
              null,
              ""
            ],
            [
              "out",
              "number",
              "h",
              null,
              ""
            ]
          ],
          "pos":[
            1578,
            -902
          ],
          "type":"util/customLua"
        },
        "10065":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerReady"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2194,
            -510
          ],
          "type":"types/genericValue"
        },
        "10066":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2258,
            -188
          ],
          "type":"vehicle/freeze"
        },
        "10067":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2188,
            -188
          ],
          "type":"vehicle/freeze"
        },
        "10068":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerReady"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1614,
            -622
          ],
          "type":"types/genericValue"
        },
        "10076":{
          "customName":"Rep",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1774,
            -6
          ],
          "type":"types/genericValue"
        },
        "10077":{
          "customName":"Health",
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            1774,
            92
          ],
          "type":"types/genericValue"
        },
        "10078":{
          "customName":"Set Health",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1396,
            8
          ],
          "type":"types/genericValue"
        },
        "10080":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -340,
            1786
          ],
          "type":"types/genericValue"
        },
        "10082":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1320,
            1744
          ],
          "type":"vehicle/freeze"
        },
        "10084":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3496,
            1268
          ],
          "type":"vehicle/freeze"
        },
        "10086":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2986,
            1002
          ],
          "type":"types/genericValue"
        },
        "10087":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerIsWalking"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3406,
            1156
          ],
          "type":"types/genericValue"
        },
        "10088":{
          "data":{
            "restoreTod":true
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "dayScale":{
              "type":"number",
              "value":1
            },
            "nightScale":{
              "type":"number",
              "value":1
            },
            "play":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "azimuthOverride":true,
              "dayLength":false,
              "dayScale":true,
              "flow":false,
              "nightScale":true,
              "play":true,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1536,
            -118
          ],
          "type":"environment/setTimeOfDay"
        },
        "10089":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            596
          ],
          "type":"types/genericValue"
        },
        "10090":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            680
          ],
          "type":"types/genericValue"
        },
        "10091":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerHealth"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            578,
            764
          ],
          "type":"types/genericValue"
        },
        "10093":{
          "alpha":1,
          "backgroundColor":[
            0.00000099999999747524,
            0.00000099998999303352,
            0.00000099998999303352,
            1
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"still needs to save if walking\\nbut with car out of garage but\\ncan skip saving if no car in use",
          "commentTitle":"<- Detect Walking Player",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            4718,
            -364
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "10094":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3202,
            -1756
          ],
          "type":"types/genericValue"
        },
        "10095":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2894,
            -1406
          ],
          "type":"types/genericValue"
        },
        "10096":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2748,
            -1042
          ],
          "type":"types/genericValue"
        },
        "10097":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyBasePrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -2106
          ],
          "type":"types/genericValue"
        },
        "10098":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPartPrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1880,
            -2106
          ],
          "type":"types/genericValue"
        },
        "10099":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyScrapVal"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2552,
            -1980
          ],
          "type":"types/genericValue"
        },
        "10100":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPaint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            -1980
          ],
          "type":"types/genericValue"
        },
        "10101":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyBasePrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1838,
            -538
          ],
          "type":"types/genericValue"
        },
        "10102":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPartPrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1992,
            -440
          ],
          "type":"types/genericValue"
        },
        "10104":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyScrapVal"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":false,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2748,
            -902
          ],
          "type":"types/genericValue"
        },
        "10105":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyBasePrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -874
          ],
          "type":"types/genericValue"
        },
        "10106":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPartPrice"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1628,
            -790
          ],
          "type":"types/genericValue"
        },
        "10107":{
          "customName":"Race For Slips?",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -508,
            -692
          ],
          "type":"logic/branch"
        },
        "10108":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2104,
            -1266
          ],
          "type":"types/genericValue"
        },
        "10109":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentdata = readFile(\"beamLR/mainData\")\nlocal dtable = {}\nfor k,v in string.gmatch(currentdata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\n\nif self.pinIn.money.value ~= nil then\ndtable[\"money\"] = self.pinIn.money.value\nend\n\nif self.pinIn.carCount.value ~= nil then\ndtable[\"carCount\"] = self.pinIn.carCount.value\nend\n\nif self.pinIn.health.value ~= nil then\ndtable[\"health\"] = self.pinIn.health.value\nend\n\nif self.pinIn.carUsed.value ~= nil then\ndtable[\"carUsed\"] = self.pinIn.carUsed.value\nend\n\nif self.pinIn.time.value ~= nil then\ndtable[\"time\"] = self.pinIn.time.value\nend\n\nlocal newdata = \"\"\n\nfor k,v in pairs(dtable) do\nnewdata = newdata .. k .. \"=\" .. v .. \"\\n\"\nend\n\nwriteFile(\"beamLR/mainData\", newdata)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "carUsed":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "carCount":false,
              "carUsed":false,
              "flow":false,
              "health":true,
              "money":true,
              "time":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Main Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "health",
              null,
              ""
            ],
            [
              "in",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            -2132,
            -1308
          ],
          "type":"util/customLua"
        },
        "10111":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1950,
            -1252
          ],
          "type":"types/genericValue"
        },
        "10114":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "shuffle":{
              "type":"bool",
              "value":true
            },
            "spawnGap":{
              "type":"number",
              "value":100
            },
            "spawnMode":{
              "type":"string",
              "value":"road"
            }
          },
          "hiddenPins":{
            "p_in":{
              "dontDelete":true,
              "flow":false,
              "group":false,
              "quantity":false,
              "randomColors":true,
              "reset":false,
              "shuffle":true,
              "spawnGap":true,
              "spawnMode":true,
              "startPos":true,
              "startRot":true
            },
            "p_out":{
              "flow":false,
              "loaded":false,
              "vehicleIds":false
            }
          },
          "pos":[
            -1152,
            806
          ],
          "type":"gameplay/traffic/trafficSpawnGroup"
        },
        "10116":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehicleIds":false
            },
            "p_out":{
              "activated":true,
              "flow":false,
              "total":true,
              "vehicleIds":false
            }
          },
          "pos":[
            -928,
            792
          ],
          "type":"gameplay/traffic/trafficActivate"
        },
        "10118":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.data.value = jsonReadFile(self.pinIn.file.value)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false
            },
            "p_out":{
              "data":false,
              "flow":false
            }
          },
          "name":"Load JSON Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "out",
              "table",
              "data",
              null,
              ""
            ]
          ],
          "pos":[
            -1298,
            806
          ],
          "type":"util/customLua"
        },
        "10120":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2068,
            1240
          ],
          "type":"types/genericValue"
        },
        "10121":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"ticketText"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2250,
            1310
          ],
          "type":"types/genericValue"
        },
        "10124":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "customName":"Ticket Cost Data",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "filename":{
              "type":"string",
              "value":"beamLR/offenseCostData"
            }
          },
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            32,
            344
          ],
          "type":"util/customLua"
        },
        "10125":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"outstandingTicket"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2132,
            1870
          ],
          "type":"types/genericValue"
        },
        "10126":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"ticketMenuState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2026,
            428
          ],
          "type":"types/genericValue"
        },
        "10127":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "customName":"Infraction Names",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "filename":{
              "type":"string",
              "value":"beamLR/offenseNameData"
            }
          },
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -66,
            456
          ],
          "type":"util/customLua"
        },
        "10128":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2412,
            1730
          ],
          "type":"vehicle/freeze"
        },
        "10129":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"playerGarageSelectedCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3888,
            2094
          ],
          "type":"types/genericValue"
        },
        "10130":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Pay Ticket"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3776,
            -412
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10131":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value - self.pinIn.DX.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X-DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            4574,
            -104
          ],
          "type":"util/customLua"
        },
        "10132":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.tkey.value] = self.pinIn.tval.value or 0\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nprint(ndata)\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tkey":{
              "type":"string",
              "value":"gas"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "tkey":true,
              "tval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            3168,
            1576
          ],
          "type":"util/customLua"
        },
        "10133":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceLaps"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2216,
            -1980
          ],
          "type":"types/genericValue"
        },
        "10134":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceTriggers"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -1980
          ],
          "type":"types/genericValue"
        },
        "10135":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWaypoints"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1880,
            -1980
          ],
          "type":"types/genericValue"
        },
        "10136":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2790,
            22
          ],
          "type":"types/genericValue"
        },
        "10137":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2790,
            106
          ],
          "type":"types/genericValue"
        },
        "10138":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3420,
            484
          ],
          "type":"types/genericValue"
        },
        "10139":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":true,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -3252,
            260
          ],
          "type":"logic/compare"
        },
        "10140":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal trigs = self.pinIn.trigs.value\nlocal ways = self.pinIn.wps.value\nlocal cid = self.pinIn.current.value\nlocal lap = self.pinIn.clap.value\nlocal count = self.pinIn.cpc.value\nlocal laps = self.pinIn.laps.value\nlocal ttable = extensions.blrutils.ssplit(trigs, \",\")\nlocal wtable = extensions.blrutils.ssplit(ways, \",\")\nlocal ntg = \"\"\nlocal nwa = \"\"\nlocal nid = 0\nlocal nla = 0\nlocal finish = false\nlocal lstrig = extensions.blrutils.blrvarGet(\"racelstrig\")\nlocal vid = self.pinIn.vid.value\n\nif cid == count then\nif lstrig > 0 then\nnid = lstrig\nelse\nnid = 1\nend\nntg = ttable[nid]\nnwa = wtable[nid]\nnla = lap + 1\nfinish = (laps == lap)\nif finish then\nif extensions.blrglobals.blrFlagGet(\"raceDragLights\")then\nftime = extensions.blrutils.blrvarGet(\"raceElapsedTime\")\nfspeed = extensions.blrutils.getVehicleData(vid)[\"velocity\"]\nextensions.blrdragdisplay.setTime(\"left\", ftime)\nextensions.blrdragdisplay.setSpeed(\"left\", fspeed)\nend\nend\nelse\nnid = cid + 1\nntg = ttable[nid]\nnwa = wtable[nid]\nnla = lap\nend\n\nself.pinOut.nextTrig.value = ntg\nself.pinOut.nextWp.value = nwa\nself.pinOut.nextId.value = nid\nself.pinOut.newLap.value = nla\nself.pinOut.finished.value = finish"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "clap":false,
              "cpc":false,
              "current":false,
              "flow":false,
              "laps":false,
              "trigs":false,
              "vid":false,
              "wps":false
            },
            "p_out":{
              "finished":false,
              "flow":false,
              "newLap":false,
              "nextId":false,
              "nextTrig":false,
              "nextWp":false
            }
          },
          "name":"Race Next CP",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "cpc",
              null,
              ""
            ],
            [
              "in",
              "string",
              "trigs",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wps",
              null,
              ""
            ],
            [
              "in",
              "number",
              "current",
              null,
              ""
            ],
            [
              "out",
              "string",
              "nextTrig",
              null,
              ""
            ],
            [
              "out",
              "string",
              "nextWp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nextId",
              null,
              ""
            ],
            [
              "out",
              "number",
              "newLap",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clap",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "finished",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "in",
              "number",
              "vid",
              null,
              ""
            ]
          ],
          "pos":[
            -3000,
            316
          ],
          "type":"util/customLua"
        },
        "10141":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2790,
            316
          ],
          "type":"logic/branch"
        },
        "10142":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            148
          ],
          "type":"types/genericValue"
        },
        "10143":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2188,
            120
          ],
          "type":"types/genericValue"
        },
        "10144":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1810,
            78
          ],
          "type":"types/genericValue"
        },
        "10145":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2342,
            330
          ],
          "type":"types/genericValue"
        },
        "10146":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2174,
            288
          ],
          "type":"types/genericValue"
        },
        "10147":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2174,
            372
          ],
          "type":"types/genericValue"
        },
        "10148":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceAIWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2174,
            470
          ],
          "type":"types/genericValue"
        },
        "10149":{
          "data":{
            "name":"BeamNGTrigger_RaceEnd"
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "name":false
            },
            "p_out":{
              "objID":false
            }
          },
          "pos":[
            -2538,
            246
          ],
          "type":"scene/idByName"
        },
        "10150":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3252,
            386
          ],
          "type":"types/genericValue"
        },
        "10151":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3238,
            498
          ],
          "type":"types/genericValue"
        },
        "10152":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceCPCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2552,
            -1854
          ],
          "type":"types/genericValue"
        },
        "10153":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local myObj = scenetree.findObjectById(self.pinIn.newPin.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "newPin":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "newPin",
              null,
              ""
            ]
          ],
          "pos":[
            -1614,
            22
          ],
          "type":"util/customLua"
        },
        "10154":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3224,
            -566
          ],
          "type":"types/genericValue"
        },
        "10155":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceEnemyLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3224,
            -496
          ],
          "type":"types/genericValue"
        },
        "10156":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceEnemyCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3224,
            -426
          ],
          "type":"types/genericValue"
        },
        "10157":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            -1854
          ],
          "type":"types/genericValue"
        },
        "10158":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyTriggerID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2216,
            -1854
          ],
          "type":"types/genericValue"
        },
        "10161":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Gold"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -1418,
            134
          ],
          "type":"audio/playOnce"
        },
        "10162":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Failed"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -1208,
            442
          ],
          "type":"audio/playOnce"
        },
        "10163":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1614,
            -538
          ],
          "type":"types/genericValue"
        },
        "10164":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                0,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1208,
            260
          ],
          "type":"scene/singleMarker"
        },
        "10165":{
          "data":{
            "name":"BeamLRTrigger_TunnelSTA"
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "name":false
            },
            "p_out":{
              "objID":false
            }
          },
          "pos":[
            -1432,
            218
          ],
          "type":"scene/idByName"
        },
        "10166":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local myObj = scenetree.findObjectById(self.pinIn.newPin.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "newPin":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "newPin",
              null,
              ""
            ]
          ],
          "pos":[
            -1390,
            316
          ],
          "type":"util/customLua"
        },
        "10167":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerInitStatus"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2790,
            204
          ],
          "type":"types/genericValue"
        },
        "10168":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerInitStatus"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1796,
            204
          ],
          "type":"types/genericValue"
        },
        "10169":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"racePlayerInitStatus"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -270,
            -1350
          ],
          "type":"types/genericValue"
        },
        "10170":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePlayerReady"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2818,
            -664
          ],
          "type":"types/genericValue"
        },
        "10171":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":-1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            -2650,
            -678
          ],
          "type":"logic/compare"
        },
        "10172":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1082,
            1800
          ],
          "type":"logic/branch"
        },
        "10173":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"uiRepairCost"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1004,
            -3562
          ],
          "type":"types/genericValue"
        },
        "10176":{
          "customName":"League Update",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"leagueProgressUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -284,
            -188
          ],
          "type":"types/genericValue"
        },
        "10177":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.mechDamageLoader.getIntegrityDevices()\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Integrity Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            6150,
            -622
          ],
          "type":"util/customLua"
        },
        "10178":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal itable = self.pinIn.iteg.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.saveIntegrityToFile(file, itable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "iteg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "iteg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            6122,
            -356
          ],
          "type":"util/customLua"
        },
        "10179":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal itable = self.pinIn.iteg.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.saveIntegrityToFile(file, itable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "iteg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "iteg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            1186,
            848
          ],
          "type":"util/customLua"
        },
        "10180":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyifile"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1880,
            -1854
          ],
          "type":"types/genericValue"
        },
        "10181":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyifile"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2538,
            -1028
          ],
          "type":"types/genericValue"
        },
        "10182":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.mechDamageLoader.getIntegrityDevices()\nself.pinOut.devices.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "devices":false,
              "flow":false
            }
          },
          "name":"Integrity Devices",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "devices",
              null,
              ""
            ]
          ],
          "pos":[
            3888,
            1576
          ],
          "type":"util/customLua"
        },
        "10183":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal toFetch = \"\"\nlocal devtable = self.pinIn.devices.value\nlocal vecmd = \"\"\nlocal dtable = {}\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal cfid = \"\"\nlocal cfidval = 0\n\nlocal itmd = \"\"\nlocal itsd = \"\"\nlocal splitres = {}\n\n\nif ve.queueLuaCommand ~= nil then\nself.pinOut.ready.value = true\n\nfor _,v in pairs(devtable) do\n\nif v == \"odometer\" then \ntoFetch = \"electrics.values.odometer\"\nelseif string.match(v,\"integrity\") then\nsplitres = extensions.blrutils.ssplit(v, \".\")\nitmd = splitres[2]\nitsd = splitres[3]\nif itsd ~= nil then\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition('\" .. itsd .. \"')\"\nelse\ntoFetch = \"powertrain.getDevice('\" .. itmd .. \"'):getPartCondition()\"\nend\nend\n\n\ncfid = \"integ\" .. cfidval\n\nif self.pinIn.uid.value ~= nil then\ncfid = cfid .. self.pinIn.uid.value\nend\n\n-- Fetching main damage tracker value\nvecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. cfid ..\"'))\"\nve:queueLuaCommand(vecmd)\ndtable[v] = extensions.vluaFetchModule.getVal(cfid)\n\n\ncfidval = cfidval + 1\nend\n\nelse\n\nself.pinOut.ready.value = false\n\nend\n\nself.pinOut.integrityData.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "uid":{
              "type":"string",
              "value":"impteg"
            }
          },
          "hiddenPins":{
            "p_in":{
              "devices":false,
              "flow":false,
              "uid":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "integrityData":false,
              "ready":false
            }
          },
          "name":"Detailed Vehicle Integrity",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "table",
              "devices",
              null,
              ""
            ],
            [
              "in",
              "string",
              "uid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "integrityData",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "ready",
              null,
              ""
            ]
          ],
          "pos":[
            3846,
            1688
          ],
          "type":"util/customLua"
        },
        "10184":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal itable = self.pinIn.iteg.value\nlocal file = self.pinIn.file.value\ndump(itable)\nextensions.mechDamageLoader.saveIntegrityToFile(file, itable)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "iteg":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "iteg",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            3608,
            2066
          ],
          "type":"util/customLua"
        },
        "10185":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -886,
            -188
          ],
          "type":"util/customLua"
        },
        "10186":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyifile"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1054,
            -160
          ],
          "type":"types/genericValue"
        },
        "10187":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.carid.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "carid":false,
              "flow":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Get Garage Car File",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            276,
            -2190
          ],
          "type":"util/customLua"
        },
        "10188":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            276,
            -2316
          ],
          "type":"types/genericValue"
        },
        "10189":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"trafficEnableFlag"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -872,
            1156
          ],
          "type":"types/genericValue"
        },
        "10190":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"triggerFilterPlayerTrigName"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            178,
            -342
          ],
          "type":"types/genericValue"
        },
        "10191":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal idtable = {station = 1, repair = 2, usedcarshop = 3, partshop = 4,  garage=5,race=6}\nlocal tname = self.pinIn.name.value\nlocal tdata = self.pinIn.tdata.value\n\nif tdata[tname] == nil then\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nelse\nlocal tsplit = extensions.blrutils.ssplit(tdata[tname], \",\")\nlocal type = tsplit[1]\nlocal extras = tsplit[2]\nif type ~= nil then\nself.pinOut.typeName.value = type\nself.pinOut.typeID.value = idtable[type]\nif extras ~= nil then\nself.pinOut.extras.value = \"beamLR/mapdata/\" .. extensions.blrutils.getLevelName() .. \"/triggerData/\" .. extras\nelse\nself.pinOut.extras.value = \"none\"\nend\nelse\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false,
              "tdata":false
            },
            "p_out":{
              "extras":false,
              "flow":false,
              "typeID":false,
              "typeName":false
            }
          },
          "name":"Trigger Name To Type",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "typeName",
              null,
              ""
            ],
            [
              "out",
              "number",
              "typeID",
              null,
              ""
            ],
            [
              "in",
              "table",
              "tdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            -46,
            -1224
          ],
          "type":"util/customLua"
        },
        "10192":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceUseTraffic"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2552,
            -1728
          ],
          "type":"types/genericValue"
        },
        "10193":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"trafficEnable"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":false,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -480,
            -468
          ],
          "type":"util/customLua"
        },
        "10194":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal k = self.pinIn.key.value\nlocal v = self.pinIn.val.value\nextensions.blrglobals.fgSetVal(k,v)"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "key":{
              "type":"string",
              "value":"codo"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "key":false,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRGlobal Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "key",
              null,
              ""
            ],
            [
              "in",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            2348,
            -272
          ],
          "type":"util/customLua"
        },
        "10195":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClub"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3490,
            -2092
          ],
          "type":"types/genericValue"
        },
        "10196":{
          "customName":"League",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceLeague"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            584,
            -1182
          ],
          "type":"types/genericValue"
        },
        "10197":{
          "customName":"Club",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClub"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            626,
            -1182
          ],
          "type":"types/genericValue"
        },
        "10198":{
          "customName":"OPSP",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceOPSP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            -1182
          ],
          "type":"types/genericValue"
        },
        "10199":{
          "customName":"OPSR",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceOPSR"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            822,
            -1294
          ],
          "type":"types/genericValue"
        },
        "10200":{
          "customName":"PSPOS",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"pspos"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            822,
            -1322
          ],
          "type":"types/genericValue"
        },
        "10201":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceOPSP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1992,
            -342
          ],
          "type":"types/genericValue"
        },
        "10202":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceOPSR"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1838,
            -342
          ],
          "type":"types/genericValue"
        },
        "10204":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPaint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1838,
            -440
          ],
          "type":"types/genericValue"
        },
        "10206":{
          "customName":"PSROT",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"psrot"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            752,
            -1182
          ],
          "type":"types/genericValue"
        },
        "10209":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal idtable = {station = 1, repair = 2, usedcarshop = 3, partshop = 4,  garage=5,race=6}\nlocal tname = self.pinIn.name.value\nlocal tdata = self.pinIn.tdata.value\n\nif tdata[tname] == nil then\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nelse\nlocal tsplit = extensions.blrutils.ssplit(tdata[tname], \",\")\nlocal type = tsplit[1]\nlocal extras = tsplit[2]\nif type ~= nil then\nself.pinOut.typeName.value = type\nself.pinOut.typeID.value = idtable[type]\nif extras ~= nil then\nself.pinOut.extras.value = \"beamLR/mapdata/\" .. extensions.blrutils.getLevelName() .. \"/triggerData/\" .. extras\nelse\nself.pinOut.extras.value = \"none\"\nend\nelse\nself.pinOut.typeName.value = \"empty\"\nself.pinOut.typeID.value = -1\nself.pinOut.extras.value = \"none\"\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false,
              "tdata":false
            },
            "p_out":{
              "extras":false,
              "flow":false,
              "typeID":false,
              "typeName":false
            }
          },
          "name":"Trigger Name To Type",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "typeName",
              null,
              ""
            ],
            [
              "out",
              "number",
              "typeID",
              null,
              ""
            ],
            [
              "in",
              "table",
              "tdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "extras",
              null,
              ""
            ]
          ],
          "pos":[
            -46,
            -1476
          ],
          "type":"util/customLua"
        },
        "10210":{
          "count":2,
          "customName":"Player Enter",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"race"
            },
            "value_2":{
              "type":"string",
              "value":"station"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "none":false
            }
          },
          "pos":[
            178,
            -1476
          ],
          "type":"logic/switchcase"
        },
        "10211":{
          "customName":"Queue Update",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"leagueProgressUpdate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -1084
          ],
          "type":"types/genericValue"
        },
        "10212":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClubName"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1642,
            -1462
          ],
          "type":"types/genericValue"
        },
        "10213":{
          "customName":"CNAME",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceClubName"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            976,
            -1378
          ],
          "type":"types/genericValue"
        },
        "10214":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"waitmsgState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            150,
            918
          ],
          "type":"types/genericValue"
        },
        "10215":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCurrentCar"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2986,
            1184
          ],
          "type":"types/genericValue"
        },
        "10216":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local filedata = readFile(self.pinIn.file.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\ndtable[self.pinIn.tkey.value] = self.pinIn.tval.value or 0\nlocal ndata = \"\"\nfor k,v in pairs(dtable) do\nndata = ndata .. k .. \"=\" .. dtable[k] .. \"\\n\"\nend\n\nprint(ndata)\n\nwriteFile(self.pinIn.file.value, ndata)\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "tkey":{
              "type":"string",
              "value":"damage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "tkey":true,
              "tval":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Update Table Value",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ],
            [
              "in",
              "string",
              "tkey",
              null,
              ""
            ],
            [
              "in",
              "any",
              "tval",
              null,
              ""
            ]
          ],
          "pos":[
            3328,
            1576
          ],
          "type":"util/customLua"
        },
        "10217":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":"==",
          "pos":[
            5806,
            190
          ],
          "type":"logic/compare"
        },
        "10218":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "false":false,
              "flow":false,
              "true":false,
              "value":true
            }
          },
          "opSymbol":">",
          "pos":[
            1228,
            1072
          ],
          "type":"logic/compare"
        },
        "10219":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            374,
            1114
          ],
          "type":"logic/flowSwitch"
        },
        "10222":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":"",
            "work":"local extensions = require(\"extensions\")\nlocal wps = self.pinIn.wplist.value\nlocal dtable = extensions.blrutils.ssplit(wps, \",\")\nwps = wps .. \",\" .. dtable[1]\nself.pinOut.path.value = wps"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "wplist":false
            },
            "p_out":{
              "flow":false,
              "path":false
            }
          },
          "name":"AI Race Path",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "wplist",
              null,
              ""
            ],
            [
              "out",
              "string",
              "path",
              null,
              ""
            ]
          ],
          "pos":[
            -1110,
            -258
          ],
          "type":"util/customLua"
        },
        "10223":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2188,
            22
          ],
          "type":"types/genericValue"
        },
        "10224":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceWinner"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2566,
            330
          ],
          "type":"types/genericValue"
        },
        "10226":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyAvoid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2384,
            -1728
          ],
          "type":"types/genericValue"
        },
        "10227":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyAvoid"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1992,
            -244
          ],
          "type":"types/genericValue"
        },
        "10228":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPaint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2552,
            -902
          ],
          "type":"types/genericValue"
        },
        "10229":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racePartReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -1728
          ],
          "type":"types/genericValue"
        },
        "10230":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceRepReward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2216,
            -1728
          ],
          "type":"types/genericValue"
        },
        "10231":{
          "customName":"Set Rep",
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1396,
            -20
          ],
          "type":"types/genericValue"
        },
        "10233":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2370,
            -4248
          ],
          "type":"types/genericValue"
        },
        "10234":{
          "count":2,
          "customName":"Challenge",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -594
          ],
          "type":"logic/and"
        },
        "10235":{
          "count":2,
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow_1":false,
              "flow_2":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            962,
            -496
          ],
          "type":"logic/and"
        },
        "10236":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"missionState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            360,
            -342
          ],
          "type":"types/genericValue"
        },
        "10237":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            360,
            -286
          ],
          "type":"types/genericValue"
        },
        "10238":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2440,
            -3898
          ],
          "type":"types/genericValue"
        },
        "10239":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"challengeUIState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2370,
            -4164
          ],
          "type":"types/genericValue"
        },
        "10240":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2264,
            -4192
          ],
          "type":"types/genericValue"
        },
        "10241":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2356,
            -3898
          ],
          "type":"types/genericValue"
        },
        "10242":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2496,
            -3702
          ],
          "type":"logic/flowSwitch"
        },
        "10243":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>Checkpoint"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":true,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -2090,
            -3674
          ],
          "type":"audio/playOnce"
        },
        "10244":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeInProgress"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -2832,
            -3576
          ],
          "type":"types/genericValue"
        },
        "10245":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Claim Reward"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            -2538,
            -3324
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10246":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":-1
            },
            "varName":{
              "type":"string",
              "value":"challengeCheckpoint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2286,
            -3898
          ],
          "type":"types/genericValue"
        },
        "10250":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1894,
            -3856
          ],
          "type":"types/genericValue"
        },
        "10251":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -1894,
            -3646
          ],
          "type":"util/customLua"
        },
        "10252":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.Y.value = self.pinIn.X.value + self.pinIn.DX.value\n"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "DX":false,
              "X":false,
              "flow":false
            },
            "p_out":{
              "Y":false,
              "flow":false
            }
          },
          "name":"Y=X+DX",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "X",
              null,
              ""
            ],
            [
              "in",
              "number",
              "DX",
              null,
              ""
            ],
            [
              "out",
              "number",
              "Y",
              null,
              ""
            ]
          ],
          "pos":[
            -1894,
            -3562
          ],
          "type":"util/customLua"
        },
        "10253":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerRep"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2104,
            -3562
          ],
          "type":"types/genericValue"
        },
        "10254":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3406,
            -3576
          ],
          "type":"types/genericValue"
        },
        "10255":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2202,
            -4262
          ],
          "type":"types/genericValue"
        },
        "10256":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersState"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2538,
            1814
          ],
          "type":"types/genericValue"
        },
        "10257":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1032,
            -3436
          ],
          "type":"types/genericValue"
        },
        "10258":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"groundMarkersWP"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2068,
            -3982
          ],
          "type":"types/genericValue"
        },
        "10259":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "randomColors":{
              "type":"bool",
              "value":true
            },
            "shuffle":{
              "type":"bool",
              "value":true
            },
            "spawnGap":{
              "type":"number",
              "value":100
            },
            "spawnMode":{
              "type":"string",
              "value":"road"
            }
          },
          "hiddenPins":{
            "p_in":{
              "dontDelete":true,
              "flow":false,
              "group":false,
              "quantity":false,
              "randomColors":true,
              "reset":false,
              "shuffle":true,
              "spawnGap":true,
              "spawnMode":true,
              "startPos":true,
              "startRot":true
            },
            "p_out":{
              "flow":false,
              "loaded":false,
              "vehicleIds":false
            }
          },
          "pos":[
            -1152,
            960
          ],
          "type":"gameplay/traffic/trafficSpawnGroup"
        },
        "10267":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerCarCount"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            4490,
            -1154
          ],
          "type":"types/genericValue"
        },
        "10268":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"playerMoney"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            4960,
            -944
          ],
          "type":"types/genericValue"
        },
        "10271":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":true,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3490,
            -3478
          ],
          "type":"vehicle/freeze"
        },
        "10272":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeStartTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3434,
            -3660
          ],
          "type":"types/genericValue"
        },
        "10273":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -3112,
            -3366
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "10274":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeFailed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3406,
            -3478
          ],
          "type":"types/genericValue"
        },
        "10275":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeFailed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2048,
            -4290
          ],
          "type":"types/genericValue"
        },
        "10276":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeFailed"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3742,
            -3408
          ],
          "type":"types/genericValue"
        },
        "10277":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Failed"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":true,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            -2958,
            -3170
          ],
          "type":"audio/playOnce"
        },
        "10278":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"challengeUseTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -3686,
            -3520
          ],
          "type":"types/genericValue"
        },
        "10279":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"challengeUseTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2776,
            -3842
          ],
          "type":"types/genericValue"
        },
        "10280":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeUseTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2776,
            -3926
          ],
          "type":"types/genericValue"
        },
        "10281":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"challengeUseTimer"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2454,
            -3226
          ],
          "type":"types/genericValue"
        },
        "10282":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceStartTime"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2566,
            -174
          ],
          "type":"types/genericValue"
        },
        "10283":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"raceCountdownComplete"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2398,
            -174
          ],
          "type":"types/genericValue"
        },
        "10284":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"racePlayerCPID"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -690,
            -496
          ],
          "type":"types/genericValue"
        },
        "10285":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"racePlayerLap"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":true,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -690,
            -426
          ],
          "type":"types/genericValue"
        },
        "10286":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"raceEnemyPaint"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "val":false,
              "varName":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1306,
            -314
          ],
          "type":"types/genericValue"
        },
        "10287":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            10,
            -2022
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "10288":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "mode":{
              "type":"string",
              "value":"orbit"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "mode":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3580,
            -2890
          ],
          "type":"scene/camera/setCameraMode"
        },
        "10290":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:>UI>Missions>End_Failed"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "reset":false,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false,
              "sourceID":false
            }
          },
          "pos":[
            886,
            -5018
          ],
          "type":"audio/playOnce"
        },
        "10291":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2370,
            -440
          ],
          "type":"logic/once"
        },
        "10292":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            2692,
            -1462
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10293":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            2334,
            -1462
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10294":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3210,
            -986
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "10295":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "down":false,
              "flow":false,
              "hold":true,
              "up":true
            }
          },
          "pos":[
            3406,
            -1112
          ],
          "type":"ui/imgui/elemental/imButton"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{
        "customVariableOrder":{},
        "list":{}
      },
      "viewPos":[
        1473.44384765625000000000,
        -3081.48193359375000000000
      ],
      "viewZoom":1
    },
    "3":{
      "description":"This is the description for graph States",
      "dirty":false,
      "isStateGraph":true,
      "links":[
        [
          5,
          "flow",
          4,
          "flow",
          false
        ],
        [
          4,
          "success",
          6,
          "flow",
          false
        ],
        [
          4,
          "fail",
          6,
          "flow",
          false
        ]
      ],
      "name":"States",
      "nodes":{
        "4":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "fail":false,
              "success":false
            }
          },
          "pins":[
            [
              "out",
              "state",
              "success",
              null,
              "This is a flow pin."
            ],
            [
              "out",
              "state",
              "fail",
              null,
              "This is a flow pin."
            ],
            [
              "in",
              "state",
              "flow",
              null,
              "This is a flow pin."
            ]
          ],
          "pos":[
            374,
            -6
          ],
          "targetGraphId":1,
          "type":"states/stateNode"
        },
        "5":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            150,
            8
          ],
          "type":"states/stateEntry"
        },
        "6":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{}
          },
          "pins":[
            [
              "in",
              "state",
              "flow",
              null,
              "This is a flow pin."
            ]
          ],
          "pos":[
            724,
            8
          ],
          "transitionName":"",
          "type":"states/stateExit"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{
        "customVariableOrder":{},
        "list":{}
      },
      "viewPos":[
        -1196.56762695312500000000,
        -1273.55371093750000000000
      ],
      "viewZoom":1.15079140663146972656
    }
  },
  "isScenario":true,
  "macros":{},
  "name":"BeamLR Career",
  "savedDir":"/gameplay/missions/BeamLegalRacingItaly/",
  "savedFilename":"project.flow.json",
  "stateGraphId":3,
  "variables":{
    "customVariableOrder":[
      "playerMoney",
      "playerCarCount",
      "gasCost",
      "carStorePage",
      "missionGiverUIState",
      "missionState",
      "currentMissionDestid",
      "currentMissionDesc",
      "currentMissionReward",
      "currentMissionDestpos",
      "playerGarageUIState",
      "playerCarTable",
      "playerGarageSelectedCar",
      "playerCurrentCar",
      "saveSystemState",
      "carShopSelectedSlot",
      "currentRepairCost",
      "uiTriggerState",
      "raceInProgress",
      "raceMenuPage",
      "raceWinner",
      "raceEnemyID",
      "raceDestID",
      "raceWager",
      "raceForSlips",
      "raceAIWP",
      "raceDesc",
      "raceCount",
      "raceEnemyModel",
      "raceEnemyConfig",
      "raceEnemyRisk",
      "triggerFilterStatus",
      "triggerFilterPlayerTrigID",
      "racePlayerReady",
      "gmax",
      "playerHealth",
      "playerCurrentCarModel",
      "playerIsWalking",
      "raceEnemyBasePrice",
      "raceEnemyPartPrice",
      "raceEnemyScrapVal",
      "raceEnemyPaint",
      "outstandingTicket",
      "ticketCost",
      "ticketText",
      "ticketMenuState",
      "racePlayerCPID",
      "racePlayerTriggerID",
      "racePlayerLap",
      "raceEnemyCPID",
      "raceEnemyTriggerID",
      "raceEnemyLap",
      "raceLaps",
      "raceTriggers",
      "raceWaypoints",
      "raceCPCount",
      "racePlayerInitStatus",
      "playerDamage",
      "raceLeague",
      "leagueProgressUpdate",
      "raceEnemyifile",
      "trafficEnableFlag",
      "triggerFilterPlayerTrigName",
      "raceUseTraffic",
      "uiRepairCost",
      "triggerDataPath",
      "raceClub",
      "raceOPSP",
      "raceOPSR",
      "raceClubName",
      "waitmsgState",
      "raceEnemyAvoid",
      "racePartReward",
      "raceRepReward",
      "playerRep",
      "challengeInProgress",
      "challengeUIState",
      "challengeCheckpoint",
      "challengeComplete",
      "groundMarkersWP",
      "groundMarkersState",
      "missionComplete",
      "veidref",
      "challengeStartTime",
      "challengeFailed",
      "challengeUseTimer",
      "raceStartTime",
      "raceEndTime",
      "raceCountdownComplete",
      "pspos",
      "psrot",
      "psscl",
      "currentMissionFailG",
      "currentMissionType",
      "currentMissionTrailerConfig",
      "currentMissionTrailerSpawnPos",
      "currentMissionTrailerSpawnRot",
      "currentMissionTrailerDestPos",
      "currentMissionTrailerDestRot",
      "currentMissionTrailerID",
      "raceClubHours"
    ],
    "list":[
      {
        "index":32,
        "mergeStrat":"max",
        "name":"triggerFilterStatus",
        "type":"number",
        "value":0
      },
      {
        "index":36,
        "mergeStrat":"max",
        "name":"playerHealth",
        "type":"number",
        "value":100
      },
      {
        "index":20,
        "mergeStrat":"max",
        "name":"raceMenuPage",
        "type":"number",
        "value":0
      },
      {
        "index":87,
        "mergeStrat":"max",
        "name":"raceStartTime",
        "type":"number",
        "value":0
      },
      {
        "index":48,
        "mergeStrat":"max",
        "name":"racePlayerTriggerID",
        "type":"number",
        "value":0
      },
      {
        "index":81,
        "mergeStrat":"last",
        "name":"groundMarkersState",
        "type":"number",
        "value":0
      },
      {
        "index":39,
        "mergeStrat":"max",
        "name":"raceEnemyBasePrice",
        "type":"number",
        "value":0
      },
      {
        "index":14,
        "mergeStrat":"max",
        "name":"playerCurrentCar",
        "type":"number",
        "value":0
      },
      {
        "index":91,
        "mergeStrat":"last",
        "name":"psrot",
        "type":"quat",
        "value":[
          0,
          0,
          0,
          0
        ]
      },
      {
        "index":69,
        "mergeStrat":"last",
        "name":"raceOPSR",
        "type":"quat",
        "value":[
          0,
          0,
          0,
          0
        ]
      },
      {
        "index":62,
        "mergeStrat":"last",
        "name":"trafficEnableFlag",
        "type":"number",
        "value":0
      },
      {
        "index":5,
        "mergeStrat":"max",
        "name":"missionGiverUIState",
        "type":"number",
        "value":0
      },
      {
        "index":43,
        "mergeStrat":"max",
        "name":"outstandingTicket",
        "type":"number",
        "value":-1
      },
      {
        "index":16,
        "mergeStrat":"max",
        "name":"carShopSelectedSlot",
        "type":"number",
        "value":0
      },
      {
        "index":67,
        "mergeStrat":"last",
        "name":"raceClub",
        "type":"string",
        "value":""
      },
      {
        "index":21,
        "mergeStrat":"max",
        "name":"raceWinner",
        "type":"number",
        "value":0
      },
      {
        "index":44,
        "mergeStrat":"max",
        "name":"ticketCost",
        "type":"number",
        "value":0
      },
      {
        "index":57,
        "mergeStrat":"max",
        "name":"racePlayerInitStatus",
        "type":"number",
        "value":0
      },
      {
        "index":50,
        "mergeStrat":"max",
        "name":"raceEnemyCPID",
        "type":"number",
        "value":0
      },
      {
        "index":101,
        "mergeStrat":"last",
        "name":"raceClubHours",
        "type":"string",
        "value":""
      },
      {
        "index":35,
        "mergeStrat":"max",
        "name":"gmax",
        "type":"number",
        "value":0
      },
      {
        "index":53,
        "mergeStrat":"max",
        "name":"raceLaps",
        "type":"number",
        "value":0
      },
      {
        "index":11,
        "mergeStrat":"max",
        "name":"playerGarageUIState",
        "type":"number",
        "value":0
      },
      {
        "index":94,
        "mergeStrat":"last",
        "name":"currentMissionType",
        "type":"string",
        "value":""
      },
      {
        "index":60,
        "mergeStrat":"max",
        "name":"leagueProgressUpdate",
        "type":"number",
        "value":0
      },
      {
        "index":85,
        "mergeStrat":"max",
        "name":"challengeFailed",
        "type":"number",
        "value":0
      },
      {
        "index":68,
        "mergeStrat":"last",
        "name":"raceOPSP",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":4,
        "mergeStrat":"max",
        "name":"carStorePage",
        "type":"number",
        "value":0
      },
      {
        "index":58,
        "mergeStrat":"max",
        "name":"playerDamage",
        "type":"number",
        "value":-1
      },
      {
        "index":71,
        "mergeStrat":"max",
        "name":"waitmsgState",
        "type":"number",
        "value":0
      },
      {
        "index":51,
        "mergeStrat":"max",
        "name":"raceEnemyTriggerID",
        "type":"number",
        "value":0
      },
      {
        "index":74,
        "mergeStrat":"max",
        "name":"raceRepReward",
        "type":"number",
        "value":0
      },
      {
        "index":46,
        "mergeStrat":"max",
        "name":"ticketMenuState",
        "type":"number",
        "value":0
      },
      {
        "index":61,
        "mergeStrat":"last",
        "name":"raceEnemyifile",
        "type":"string",
        "value":""
      },
      {
        "index":25,
        "mergeStrat":"max",
        "name":"raceForSlips",
        "type":"number",
        "value":0
      },
      {
        "index":95,
        "mergeStrat":"last",
        "name":"currentMissionTrailerConfig",
        "type":"string",
        "value":""
      },
      {
        "index":37,
        "mergeStrat":"last",
        "name":"playerCurrentCarModel",
        "type":"string",
        "value":""
      },
      {
        "index":19,
        "mergeStrat":"last",
        "name":"raceInProgress",
        "type":"number",
        "value":0
      },
      {
        "index":3,
        "mergeStrat":"max",
        "name":"gasCost",
        "type":"number",
        "value":10
      },
      {
        "index":64,
        "mergeStrat":"max",
        "name":"raceUseTraffic",
        "type":"number",
        "value":0
      },
      {
        "index":40,
        "mergeStrat":"last",
        "name":"raceEnemyPartPrice",
        "type":"number",
        "value":0
      },
      {
        "index":26,
        "mergeStrat":"last",
        "name":"raceAIWP",
        "type":"string",
        "value":""
      },
      {
        "index":28,
        "mergeStrat":"max",
        "name":"raceCount",
        "type":"number",
        "value":0
      },
      {
        "index":73,
        "mergeStrat":"last",
        "name":"racePartReward",
        "type":"string",
        "value":""
      },
      {
        "index":22,
        "mergeStrat":"max",
        "name":"raceEnemyID",
        "type":"number",
        "value":0
      },
      {
        "index":31,
        "mergeStrat":"max",
        "name":"raceEnemyRisk",
        "type":"number",
        "value":0
      },
      {
        "index":41,
        "mergeStrat":"last",
        "name":"raceEnemyScrapVal",
        "type":"number",
        "value":0
      },
      {
        "index":100,
        "mergeStrat":"max",
        "name":"currentMissionTrailerID",
        "type":"number",
        "value":0
      },
      {
        "index":99,
        "mergeStrat":"last",
        "name":"currentMissionTrailerDestRot",
        "type":"quat",
        "value":[
          0,
          0,
          0,
          0
        ]
      },
      {
        "index":92,
        "mergeStrat":"last",
        "name":"psscl",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":77,
        "mergeStrat":"max",
        "name":"challengeUIState",
        "type":"number",
        "value":0
      },
      {
        "index":38,
        "mergeStrat":"max",
        "name":"playerIsWalking",
        "type":"number",
        "value":0
      },
      {
        "index":97,
        "mergeStrat":"last",
        "name":"currentMissionTrailerSpawnRot",
        "type":"quat",
        "value":[
          0,
          0,
          0,
          0
        ]
      },
      {
        "index":49,
        "mergeStrat":"max",
        "name":"racePlayerLap",
        "type":"number",
        "value":0
      },
      {
        "index":96,
        "mergeStrat":"last",
        "name":"currentMissionTrailerSpawnPos",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":93,
        "mergeStrat":"max",
        "name":"currentMissionFailG",
        "type":"number",
        "value":0
      },
      {
        "index":79,
        "mergeStrat":"max",
        "name":"challengeComplete",
        "type":"number",
        "value":0
      },
      {
        "index":56,
        "mergeStrat":"max",
        "name":"raceCPCount",
        "type":"number",
        "value":0
      },
      {
        "index":29,
        "mergeStrat":"last",
        "name":"raceEnemyModel",
        "type":"string",
        "value":""
      },
      {
        "index":90,
        "mergeStrat":"last",
        "name":"pspos",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":89,
        "mergeStrat":"max",
        "name":"raceCountdownComplete",
        "type":"number",
        "value":0
      },
      {
        "index":88,
        "mergeStrat":"max",
        "name":"raceEndTime",
        "type":"number",
        "value":0
      },
      {
        "index":86,
        "mergeStrat":"max",
        "name":"challengeUseTimer",
        "type":"number",
        "value":0
      },
      {
        "index":13,
        "mergeStrat":"max",
        "name":"playerGarageSelectedCar",
        "type":"number",
        "value":0
      },
      {
        "index":83,
        "mergeStrat":"max",
        "name":"veidref",
        "type":"number",
        "value":0
      },
      {
        "index":82,
        "mergeStrat":"last",
        "name":"missionComplete",
        "type":"number",
        "value":0
      },
      {
        "index":80,
        "mergeStrat":"last",
        "name":"groundMarkersWP",
        "type":"string",
        "value":""
      },
      {
        "index":78,
        "mergeStrat":"max",
        "name":"challengeCheckpoint",
        "type":"number",
        "value":-1
      },
      {
        "index":54,
        "mergeStrat":"last",
        "name":"raceTriggers",
        "type":"string",
        "value":""
      },
      {
        "index":98,
        "mergeStrat":"last",
        "name":"currentMissionTrailerDestPos",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":76,
        "mergeStrat":"max",
        "name":"challengeInProgress",
        "type":"number",
        "value":0
      },
      {
        "index":65,
        "mergeStrat":"max",
        "name":"uiRepairCost",
        "type":"number",
        "value":-1
      },
      {
        "index":45,
        "mergeStrat":"last",
        "name":"ticketText",
        "type":"string",
        "value":""
      },
      {
        "index":63,
        "mergeStrat":"last",
        "name":"triggerFilterPlayerTrigName",
        "type":"string",
        "value":""
      },
      {
        "index":72,
        "mergeStrat":"max",
        "name":"raceEnemyAvoid",
        "type":"number",
        "value":0
      },
      {
        "index":70,
        "mergeStrat":"last",
        "name":"raceClubName",
        "type":"string",
        "value":""
      },
      {
        "index":66,
        "mergeStrat":"last",
        "name":"triggerDataPath",
        "type":"string",
        "value":""
      },
      {
        "index":75,
        "mergeStrat":"last",
        "name":"playerRep",
        "type":"number",
        "value":0
      },
      {
        "index":33,
        "mergeStrat":"max",
        "name":"triggerFilterPlayerTrigID",
        "type":"number",
        "value":0
      },
      {
        "index":24,
        "mergeStrat":"max",
        "name":"raceWager",
        "type":"number",
        "value":0
      },
      {
        "index":8,
        "mergeStrat":"last",
        "name":"currentMissionDesc",
        "type":"string",
        "value":""
      },
      {
        "index":42,
        "mergeStrat":"last",
        "name":"raceEnemyPaint",
        "type":"string",
        "value":""
      },
      {
        "index":23,
        "mergeStrat":"max",
        "name":"raceDestID",
        "type":"number",
        "value":0
      },
      {
        "index":1,
        "mergeStrat":"max",
        "name":"playerMoney",
        "type":"number",
        "value":0
      },
      {
        "index":59,
        "mergeStrat":"last",
        "name":"raceLeague",
        "type":"string",
        "value":""
      },
      {
        "index":10,
        "mergeStrat":"last",
        "name":"currentMissionDestpos",
        "type":"vec3",
        "value":[
          0,
          0,
          0
        ]
      },
      {
        "index":34,
        "mergeStrat":"max",
        "name":"racePlayerReady",
        "type":"number",
        "value":0
      },
      {
        "index":15,
        "mergeStrat":"max",
        "name":"saveSystemState",
        "type":"number",
        "value":0
      },
      {
        "index":27,
        "mergeStrat":"last",
        "name":"raceDesc",
        "type":"string",
        "value":""
      },
      {
        "index":17,
        "mergeStrat":"max",
        "name":"currentRepairCost",
        "type":"number",
        "value":0
      },
      {
        "index":7,
        "mergeStrat":"max",
        "name":"currentMissionDestid",
        "type":"number",
        "value":0
      },
      {
        "index":84,
        "mergeStrat":"max",
        "name":"challengeStartTime",
        "type":"number",
        "value":0
      },
      {
        "index":6,
        "mergeStrat":"max",
        "name":"missionState",
        "type":"number",
        "value":0
      },
      {
        "index":30,
        "mergeStrat":"last",
        "name":"raceEnemyConfig",
        "type":"string",
        "value":""
      },
      {
        "index":18,
        "mergeStrat":"max",
        "name":"uiTriggerState",
        "type":"number",
        "value":0
      },
      {
        "index":2,
        "mergeStrat":"max",
        "name":"playerCarCount",
        "type":"number",
        "value":1
      },
      {
        "index":9,
        "mergeStrat":"max",
        "name":"currentMissionReward",
        "type":"number",
        "value":0
      },
      {
        "index":47,
        "mergeStrat":"max",
        "name":"racePlayerCPID",
        "type":"number",
        "value":0
      },
      {
        "index":52,
        "mergeStrat":"max",
        "name":"raceEnemyLap",
        "type":"number",
        "value":0
      },
      {
        "index":55,
        "mergeStrat":"last",
        "name":"raceWaypoints",
        "type":"string",
        "value":""
      },
      {
        "index":12,
        "mergeStrat":"last",
        "name":"playerCarTable",
        "type":"string",
        "value":""
      }
    ]
  },
  "version":0.20000000000000001110
}