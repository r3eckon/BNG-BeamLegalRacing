{
  "activeGraphId":1,
  "authors":"BeamLR",
  "currentGraphID":1,
  "date":1696998383,
  "debugEnabled":false,
  "description":"Beam Legal Racing Track Event",
  "difficulty":100,
  "frecency":{},
  "graphs":{
    "1":{
      "description":"This is the description for graph New State",
      "dirty":false,
      "links":[
        [
          62,
          "flow",
          8,
          "flow",
          false
        ],
        [
          9,
          "output",
          8,
          "vehId",
          false
        ],
        [
          78,
          "match_1",
          9,
          "flow",
          false
        ],
        [
          78,
          "match_2",
          9,
          "flow",
          false
        ],
        [
          44,
          "vehId",
          9,
          "input",
          false
        ],
        [
          11,
          "flow",
          10,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          10,
          "idtable",
          false
        ],
        [
          13,
          "waypoints",
          10,
          "waypoints",
          false
        ],
        [
          13,
          "laps",
          10,
          "laps",
          false
        ],
        [
          13,
          "aispdmode",
          10,
          "speedMode",
          false
        ],
        [
          13,
          "risk",
          10,
          "risk",
          false
        ],
        [
          13,
          "aispd",
          10,
          "routeSpd",
          false
        ],
        [
          13,
          "wpspd",
          10,
          "wpspd",
          false
        ],
        [
          8,
          "flow",
          11,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          11,
          "idtable",
          false
        ],
        [
          60,
          "flow",
          12,
          "flow",
          false
        ],
        [
          9,
          "output",
          12,
          "vehId",
          false
        ],
        [
          91,
          "flow",
          13,
          "flow",
          false
        ],
        [
          94,
          "efile",
          13,
          "efile",
          false
        ],
        [
          94,
          "seed",
          13,
          "seed",
          false
        ],
        [
          91,
          "val",
          13,
          "opt",
          false
        ],
        [
          197,
          "False",
          14,
          "flow",
          false
        ],
        [
          66,
          "flow",
          15,
          "flow",
          false
        ],
        [
          101,
          "flow",
          15,
          "reset",
          false
        ],
        [
          37,
          "flow",
          16,
          "flow",
          false
        ],
        [
          126,
          "False",
          16,
          "flow",
          false
        ],
        [
          100,
          "False",
          16,
          "flow",
          false
        ],
        [
          54,
          "flow",
          16,
          "flow",
          false
        ],
        [
          86,
          "flow",
          16,
          "flow",
          false
        ],
        [
          20,
          "flow",
          17,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          17,
          "reset",
          false
        ],
        [
          14,
          "flow",
          18,
          "flow",
          false
        ],
        [
          10,
          "flow",
          18,
          "on",
          false
        ],
        [
          33,
          "match_1",
          18,
          "off",
          false
        ],
        [
          17,
          "finished",
          19,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          19,
          "idtable",
          false
        ],
        [
          18,
          "flow",
          20,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          20,
          "reset",
          false
        ],
        [
          18,
          "flow",
          21,
          "flow",
          false
        ],
        [
          58,
          "alltable",
          21,
          "veid",
          false
        ],
        [
          56,
          "flow",
          22,
          "flow",
          false
        ],
        [
          38,
          "leaderboard",
          22,
          "leaderboard",
          false
        ],
        [
          38,
          "times",
          22,
          "times",
          false
        ],
        [
          40,
          "endpos",
          22,
          "endpos",
          false
        ],
        [
          40,
          "winner",
          22,
          "winner",
          false
        ],
        [
          56,
          "started",
          22,
          "started",
          false
        ],
        [
          26,
          "flow",
          23,
          "flow",
          false
        ],
        [
          222,
          "flow",
          24,
          "flow",
          false
        ],
        [
          24,
          "flow",
          25,
          "flow",
          false
        ],
        [
          2,
          "enterState",
          26,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          27,
          "veid",
          false
        ],
        [
          21,
          "status",
          27,
          "status",
          false
        ],
        [
          21,
          "event",
          27,
          "event",
          false
        ],
        [
          21,
          "triggerID",
          27,
          "triggerID",
          false
        ],
        [
          21,
          "triggerName",
          27,
          "triggerName",
          false
        ],
        [
          33,
          "match_3",
          28,
          "flow",
          false
        ],
        [
          59,
          "flow",
          29,
          "flow",
          false
        ],
        [
          40,
          "finished",
          29,
          "condition",
          false
        ],
        [
          31,
          "flow",
          30,
          "flow",
          false
        ],
        [
          29,
          "True",
          31,
          "flow",
          false
        ],
        [
          78,
          "match_1",
          31,
          "reset",
          false
        ],
        [
          78,
          "match_2",
          31,
          "reset",
          false
        ],
        [
          13,
          "flow",
          32,
          "flow",
          false
        ],
        [
          34,
          "flow",
          33,
          "flow",
          false
        ],
        [
          34,
          "val",
          33,
          "value",
          false
        ],
        [
          14,
          "flow",
          34,
          "flow",
          false
        ],
        [
          58,
          "flow",
          35,
          "flow",
          false
        ],
        [
          58,
          "alltable",
          35,
          "racers",
          false
        ],
        [
          13,
          "triggers",
          35,
          "checkpoints",
          false
        ],
        [
          13,
          "laps",
          35,
          "laps",
          false
        ],
        [
          33,
          "match_2",
          36,
          "flow",
          false
        ],
        [
          36,
          "flow",
          37,
          "flow",
          false
        ],
        [
          46,
          "flow",
          38,
          "flow",
          false
        ],
        [
          40,
          "flow",
          39,
          "flow",
          false
        ],
        [
          9,
          "output",
          39,
          "racer",
          false
        ],
        [
          20,
          "flow",
          40,
          "flow",
          false
        ],
        [
          9,
          "output",
          40,
          "racer",
          false
        ],
        [
          16,
          "flow",
          41,
          "flow",
          false
        ],
        [
          33,
          "match_2",
          42,
          "flow",
          false
        ],
        [
          52,
          "flow",
          42,
          "clear",
          false
        ],
        [
          44,
          "vehId",
          42,
          "vehId",
          false
        ],
        [
          13,
          "pspos",
          42,
          "position",
          false
        ],
        [
          13,
          "psrot",
          42,
          "rotation",
          false
        ],
        [
          37,
          "down",
          43,
          "flow",
          false
        ],
        [
          17,
          "finished",
          45,
          "flow",
          false
        ],
        [
          21,
          "update",
          46,
          "flow",
          false
        ],
        [
          21,
          "event",
          46,
          "event",
          false
        ],
        [
          21,
          "triggerName",
          46,
          "trigger",
          false
        ],
        [
          48,
          "flow",
          47,
          "flow",
          false
        ],
        [
          41,
          "flow",
          48,
          "flow",
          false
        ],
        [
          22,
          "strout",
          48,
          "text",
          false
        ],
        [
          33,
          "match_1",
          49,
          "flow",
          false
        ],
        [
          51,
          "flow",
          50,
          "flow",
          false
        ],
        [
          42,
          "stopped",
          51,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          51,
          "reset",
          false
        ],
        [
          37,
          "down",
          51,
          "reset",
          false
        ],
        [
          33,
          "match_3",
          52,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          52,
          "flow",
          false
        ],
        [
          33,
          "match_2",
          52,
          "reset",
          false
        ],
        [
          28,
          "flow",
          53,
          "flow",
          false
        ],
        [
          28,
          "val",
          53,
          "text",
          false
        ],
        [
          53,
          "flow",
          54,
          "flow",
          false
        ],
        [
          72,
          "flow",
          55,
          "flow",
          false
        ],
        [
          2,
          "flow",
          56,
          "flow",
          false
        ],
        [
          49,
          "flow",
          57,
          "flow",
          false
        ],
        [
          62,
          "flow",
          58,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          58,
          "aiveh",
          false
        ],
        [
          9,
          "output",
          58,
          "player",
          false
        ],
        [
          71,
          "flow",
          59,
          "flow",
          false
        ],
        [
          40,
          "time",
          59,
          "value",
          false
        ],
        [
          50,
          "flow",
          60,
          "flow",
          false
        ],
        [
          63,
          "flow",
          61,
          "flow",
          false
        ],
        [
          60,
          "flow",
          62,
          "flow",
          false
        ],
        [
          13,
          "opCount",
          62,
          "count",
          false
        ],
        [
          94,
          "seed",
          62,
          "seed",
          false
        ],
        [
          13,
          "opModels",
          62,
          "models",
          false
        ],
        [
          13,
          "opConfigs",
          62,
          "configs",
          false
        ],
        [
          13,
          "opspos",
          62,
          "pos",
          false
        ],
        [
          13,
          "opsrot",
          62,
          "rot",
          false
        ],
        [
          231,
          "true",
          63,
          "flow",
          false
        ],
        [
          54,
          "down",
          63,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          63,
          "idtable",
          false
        ],
        [
          19,
          "flow",
          64,
          "flow",
          false
        ],
        [
          9,
          "output",
          64,
          "vehId",
          false
        ],
        [
          2,
          "enterState",
          65,
          "flow",
          false
        ],
        [
          2,
          "flow",
          66,
          "flow",
          false
        ],
        [
          101,
          "flow",
          66,
          "on",
          false
        ],
        [
          33,
          "match_1",
          67,
          "flow",
          false
        ],
        [
          94,
          "desc",
          67,
          "text",
          false
        ],
        [
          73,
          "flow",
          68,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          68,
          "reset",
          false
        ],
        [
          73,
          "pos",
          68,
          "position",
          false
        ],
        [
          74,
          "flow",
          69,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          69,
          "reset",
          false
        ],
        [
          75,
          "False",
          69,
          "reset",
          false
        ],
        [
          74,
          "pos",
          69,
          "position",
          false
        ],
        [
          69,
          "flow",
          70,
          "flow",
          false
        ],
        [
          75,
          "False",
          70,
          "flow",
          false
        ],
        [
          40,
          "clap",
          70,
          "cur",
          false
        ],
        [
          13,
          "laps",
          70,
          "max",
          false
        ],
        [
          70,
          "flow",
          71,
          "flow",
          false
        ],
        [
          40,
          "ccpid",
          71,
          "cur",
          false
        ],
        [
          13,
          "cpcount",
          71,
          "max",
          false
        ],
        [
          15,
          "flow",
          72,
          "flow",
          false
        ],
        [
          101,
          "flow",
          72,
          "reset",
          false
        ],
        [
          39,
          "flow",
          73,
          "flow",
          false
        ],
        [
          40,
          "ccp",
          73,
          "name",
          false
        ],
        [
          75,
          "True",
          74,
          "flow",
          false
        ],
        [
          40,
          "ncp",
          74,
          "name",
          false
        ],
        [
          68,
          "flow",
          75,
          "flow",
          false
        ],
        [
          39,
          "useMarker",
          75,
          "condition",
          false
        ],
        [
          87,
          "flow",
          76,
          "flow",
          false
        ],
        [
          94,
          "leadbtn",
          76,
          "condition",
          false
        ],
        [
          172,
          "flow",
          77,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          77,
          "idtable",
          false
        ],
        [
          87,
          "down",
          78,
          "flow",
          false
        ],
        [
          94,
          "status",
          78,
          "value",
          false
        ],
        [
          78,
          "match_3",
          79,
          "flow",
          false
        ],
        [
          94,
          "efile",
          79,
          "efile",
          false
        ],
        [
          94,
          "ppos",
          79,
          "ppos",
          false
        ],
        [
          94,
          "seed",
          79,
          "seed",
          false
        ],
        [
          86,
          "down",
          80,
          "flow",
          false
        ],
        [
          79,
          "flow",
          80,
          "flow",
          false
        ],
        [
          2,
          "flow",
          81,
          "flow",
          false
        ],
        [
          81,
          "flow",
          82,
          "flow",
          false
        ],
        [
          81,
          "flag",
          82,
          "condition",
          false
        ],
        [
          78,
          "match_1",
          83,
          "flow",
          false
        ],
        [
          78,
          "match_2",
          83,
          "flow",
          false
        ],
        [
          82,
          "True",
          84,
          "flow",
          false
        ],
        [
          33,
          "match_1",
          85,
          "flow",
          false
        ],
        [
          33,
          "match_2",
          85,
          "reset",
          false
        ],
        [
          82,
          "True",
          85,
          "reset",
          false
        ],
        [
          33,
          "match_3",
          85,
          "reset",
          false
        ],
        [
          126,
          "True",
          86,
          "flow",
          false
        ],
        [
          100,
          "True",
          87,
          "flow",
          false
        ],
        [
          94,
          "btntxt",
          87,
          "text",
          false
        ],
        [
          76,
          "True",
          88,
          "flow",
          false
        ],
        [
          88,
          "down",
          89,
          "flow",
          false
        ],
        [
          94,
          "leaderboard",
          89,
          "uileaderboard",
          false
        ],
        [
          2,
          "flow",
          90,
          "flow",
          false
        ],
        [
          78,
          "match_2",
          91,
          "flow",
          false
        ],
        [
          78,
          "match_1",
          91,
          "flow",
          false
        ],
        [
          90,
          "flow",
          92,
          "flow",
          false
        ],
        [
          90,
          "flag",
          92,
          "condition",
          false
        ],
        [
          120,
          "flow",
          93,
          "flow",
          false
        ],
        [
          85,
          "flow",
          94,
          "flow",
          false
        ],
        [
          120,
          "flow",
          95,
          "flow",
          false
        ],
        [
          2,
          "flow",
          96,
          "flow",
          false
        ],
        [
          96,
          "flow",
          97,
          "flow",
          false
        ],
        [
          96,
          "flag",
          97,
          "condition",
          false
        ],
        [
          97,
          "False",
          98,
          "flow",
          false
        ],
        [
          97,
          "True",
          98,
          "reset",
          false
        ],
        [
          103,
          "flow",
          99,
          "flow",
          false
        ],
        [
          98,
          "flow",
          99,
          "clear",
          false
        ],
        [
          107,
          "vehId",
          99,
          "vehId",
          false
        ],
        [
          103,
          "pos",
          99,
          "position",
          false
        ],
        [
          103,
          "rot",
          99,
          "rotation",
          false
        ],
        [
          67,
          "flow",
          100,
          "flow",
          false
        ],
        [
          94,
          "hasEvent",
          100,
          "condition",
          false
        ],
        [
          61,
          "flow",
          101,
          "flow",
          false
        ],
        [
          94,
          "seed",
          101,
          "seed",
          false
        ],
        [
          94,
          "cround",
          101,
          "round",
          false
        ],
        [
          38,
          "leaderboard",
          101,
          "leaderboard",
          false
        ],
        [
          38,
          "times",
          101,
          "times",
          false
        ],
        [
          9,
          "output",
          101,
          "pid",
          false
        ],
        [
          35,
          "flow",
          102,
          "flow",
          false
        ],
        [
          9,
          "output",
          102,
          "veid",
          false
        ],
        [
          97,
          "True",
          103,
          "flow",
          false
        ],
        [
          99,
          "stopped",
          104,
          "flow",
          false
        ],
        [
          97,
          "False",
          104,
          "reset",
          false
        ],
        [
          122,
          "flow",
          105,
          "flow",
          false
        ],
        [
          97,
          "True",
          106,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          106,
          "veid",
          false
        ],
        [
          78,
          "match_1",
          108,
          "flow",
          false
        ],
        [
          78,
          "match_2",
          108,
          "flow",
          false
        ],
        [
          78,
          "match_2",
          108,
          "reset",
          false
        ],
        [
          78,
          "match_1",
          108,
          "reset",
          false
        ],
        [
          107,
          "vehId",
          108,
          "vehId",
          false
        ],
        [
          133,
          "flow",
          109,
          "flow",
          false
        ],
        [
          133,
          "output",
          109,
          "data",
          false
        ],
        [
          94,
          "carid",
          109,
          "id",
          false
        ],
        [
          150,
          "flow",
          110,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          110,
          "veid",
          false
        ],
        [
          150,
          "fuel",
          110,
          "fuel",
          false
        ],
        [
          94,
          "flow",
          111,
          "flow",
          false
        ],
        [
          129,
          "flow",
          112,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          112,
          "vehId",
          false
        ],
        [
          112,
          "flow",
          113,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          113,
          "vehId",
          false
        ],
        [
          111,
          "flow",
          114,
          "flow",
          false
        ],
        [
          111,
          "flag",
          114,
          "condition",
          false
        ],
        [
          109,
          "flow",
          115,
          "flow",
          false
        ],
        [
          109,
          "type",
          115,
          "model",
          false
        ],
        [
          109,
          "config",
          115,
          "config",
          false
        ],
        [
          112,
          "position",
          115,
          "pos",
          false
        ],
        [
          112,
          "rotation",
          115,
          "rot",
          false
        ],
        [
          109,
          "paintdata",
          115,
          "paintdata",
          false
        ],
        [
          191,
          "flow",
          116,
          "flow",
          false
        ],
        [
          121,
          "flow",
          116,
          "reset",
          false
        ],
        [
          107,
          "vehId",
          116,
          "vehId",
          false
        ],
        [
          171,
          "flow",
          117,
          "flow",
          false
        ],
        [
          2,
          "flow",
          118,
          "flow",
          false
        ],
        [
          95,
          "flow",
          119,
          "flow",
          false
        ],
        [
          95,
          "val",
          119,
          "message",
          false
        ],
        [
          92,
          "True",
          120,
          "flow",
          false
        ],
        [
          92,
          "False",
          120,
          "reset",
          false
        ],
        [
          104,
          "flow",
          121,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          121,
          "vehId",
          false
        ],
        [
          191,
          "flow",
          122,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          122,
          "vehId",
          false
        ],
        [
          97,
          "True",
          123,
          "flow",
          false
        ],
        [
          121,
          "flow",
          123,
          "on",
          false
        ],
        [
          79,
          "flow",
          124,
          "flow",
          false
        ],
        [
          79,
          "hasRewards",
          124,
          "condition",
          false
        ],
        [
          124,
          "True",
          125,
          "flow",
          false
        ],
        [
          79,
          "rewards",
          125,
          "rewards",
          false
        ],
        [
          136,
          "False",
          126,
          "flow",
          false
        ],
        [
          137,
          "flow",
          126,
          "flow",
          false
        ],
        [
          94,
          "quitbtn",
          126,
          "condition",
          false
        ],
        [
          115,
          "flow",
          127,
          "flow",
          false
        ],
        [
          115,
          "veid",
          127,
          "veid",
          false
        ],
        [
          109,
          "ifile",
          127,
          "file",
          false
        ],
        [
          127,
          "flow",
          128,
          "flow",
          false
        ],
        [
          115,
          "veid",
          128,
          "veid",
          false
        ],
        [
          94,
          "carid",
          128,
          "gid",
          false
        ],
        [
          114,
          "False",
          129,
          "flow",
          false
        ],
        [
          114,
          "True",
          129,
          "reset",
          false
        ],
        [
          161,
          "True",
          130,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          130,
          "veid",
          false
        ],
        [
          156,
          "cap",
          130,
          "mass",
          false
        ],
        [
          156,
          "cap",
          130,
          "cap",
          false
        ],
        [
          2,
          "enterState",
          131,
          "flow",
          false
        ],
        [
          113,
          "flow",
          132,
          "flow",
          false
        ],
        [
          94,
          "carid",
          132,
          "id",
          false
        ],
        [
          132,
          "flow",
          133,
          "flow",
          false
        ],
        [
          132,
          "filename",
          133,
          "filename",
          false
        ],
        [
          152,
          "flow",
          134,
          "flow",
          false
        ],
        [
          137,
          "down",
          135,
          "flow",
          false
        ],
        [
          76,
          "False",
          136,
          "flow",
          false
        ],
        [
          88,
          "flow",
          136,
          "flow",
          false
        ],
        [
          94,
          "tunebtn",
          136,
          "condition",
          false
        ],
        [
          136,
          "True",
          137,
          "flow",
          false
        ],
        [
          149,
          "flow",
          138,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          138,
          "veid",
          false
        ],
        [
          149,
          "fuel",
          138,
          "fuel",
          false
        ],
        [
          2,
          "flow",
          139,
          "flow",
          false
        ],
        [
          139,
          "flow",
          140,
          "flow",
          false
        ],
        [
          139,
          "flag",
          140,
          "condition",
          false
        ],
        [
          140,
          "True",
          141,
          "flow",
          false
        ],
        [
          140,
          "False",
          141,
          "reset",
          false
        ],
        [
          141,
          "flow",
          142,
          "flow",
          false
        ],
        [
          94,
          "carid",
          142,
          "id",
          false
        ],
        [
          142,
          "flow",
          143,
          "flow",
          false
        ],
        [
          142,
          "filename",
          143,
          "filename",
          false
        ],
        [
          143,
          "flow",
          144,
          "flow",
          false
        ],
        [
          143,
          "output",
          144,
          "data",
          false
        ],
        [
          94,
          "carid",
          144,
          "id",
          false
        ],
        [
          144,
          "flow",
          145,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          145,
          "veid",
          false
        ],
        [
          144,
          "ifile",
          145,
          "file",
          false
        ],
        [
          145,
          "flow",
          146,
          "flow",
          false
        ],
        [
          144,
          "config",
          146,
          "filename",
          false
        ],
        [
          146,
          "flow",
          147,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          147,
          "veid",
          false
        ],
        [
          94,
          "carid",
          147,
          "gid",
          false
        ],
        [
          154,
          "flow",
          148,
          "flow",
          false
        ],
        [
          108,
          "flow",
          149,
          "flow",
          false
        ],
        [
          116,
          "flow",
          150,
          "flow",
          false
        ],
        [
          128,
          "flow",
          151,
          "flow",
          false
        ],
        [
          151,
          "flow",
          152,
          "flow",
          false
        ],
        [
          115,
          "veid",
          152,
          "veid",
          false
        ],
        [
          151,
          "fuel",
          152,
          "fuel",
          false
        ],
        [
          147,
          "flow",
          153,
          "flow",
          false
        ],
        [
          153,
          "flow",
          154,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          154,
          "veid",
          false
        ],
        [
          153,
          "fuel",
          154,
          "fuel",
          false
        ],
        [
          2,
          "flow",
          155,
          "flow",
          false
        ],
        [
          158,
          "flow",
          156,
          "flow",
          false
        ],
        [
          107,
          "vehId",
          156,
          "veid",
          false
        ],
        [
          158,
          "hasNos",
          156,
          "hasNos",
          false
        ],
        [
          94,
          "flow",
          157,
          "flow",
          false
        ],
        [
          162,
          "flow",
          158,
          "flow",
          false
        ],
        [
          2,
          "flow",
          159,
          "flow",
          false
        ],
        [
          2,
          "flow",
          160,
          "flow",
          false
        ],
        [
          44,
          "vehId",
          160,
          "veid",
          false
        ],
        [
          110,
          "flow",
          161,
          "flow",
          false
        ],
        [
          138,
          "flow",
          161,
          "flow",
          false
        ],
        [
          158,
          "hasNos",
          161,
          "condition",
          false
        ],
        [
          168,
          "flow",
          162,
          "flow",
          false
        ],
        [
          167,
          "flow",
          162,
          "on",
          false
        ],
        [
          164,
          "flow",
          162,
          "off",
          false
        ],
        [
          157,
          "flow",
          163,
          "flow",
          false
        ],
        [
          94,
          "etime",
          163,
          "time",
          false
        ],
        [
          2,
          "flow",
          164,
          "flow",
          false
        ],
        [
          160,
          "flow",
          165,
          "flow",
          false
        ],
        [
          160,
          "output",
          165,
          "gfetch",
          false
        ],
        [
          2,
          "flow",
          167,
          "flow",
          false
        ],
        [
          2,
          "flow",
          168,
          "flow",
          false
        ],
        [
          195,
          "flow",
          169,
          "flow",
          false
        ],
        [
          165,
          "flow",
          170,
          "flow",
          false
        ],
        [
          165,
          "death",
          170,
          "condition",
          false
        ],
        [
          170,
          "True",
          171,
          "flow",
          false
        ],
        [
          10,
          "flow",
          172,
          "flow",
          false
        ],
        [
          62,
          "spawnids",
          172,
          "idtable",
          false
        ],
        [
          169,
          "flow",
          173,
          "flow",
          false
        ],
        [
          169,
          "money",
          173,
          "money",
          false
        ],
        [
          169,
          "reputation",
          173,
          "rep",
          false
        ],
        [
          169,
          "carCount",
          173,
          "cars",
          false
        ],
        [
          173,
          "flow",
          174,
          "flow",
          false
        ],
        [
          221,
          "flow",
          175,
          "flow",
          false
        ],
        [
          175,
          "flow",
          176,
          "flow",
          false
        ],
        [
          2,
          "enterState",
          177,
          "flow",
          false
        ],
        [
          2,
          "flow",
          178,
          "flow",
          false
        ],
        [
          174,
          "flow",
          178,
          "on",
          false
        ],
        [
          178,
          "flow",
          179,
          "flow",
          false
        ],
        [
          178,
          "flow",
          180,
          "flow",
          false
        ],
        [
          183,
          "true",
          181,
          "flow",
          false
        ],
        [
          181,
          "flow",
          182,
          "flow",
          false
        ],
        [
          178,
          "flow",
          183,
          "flow",
          false
        ],
        [
          184,
          "out",
          183,
          "A",
          false
        ],
        [
          180,
          "flow",
          184,
          "flow",
          false
        ],
        [
          182,
          "flow",
          185,
          "flow",
          false
        ],
        [
          194,
          "flow",
          186,
          "flow",
          false
        ],
        [
          123,
          "flow",
          187,
          "flow",
          false
        ],
        [
          121,
          "flow",
          187,
          "reset",
          false
        ],
        [
          228,
          "flow",
          188,
          "flow",
          false
        ],
        [
          187,
          "flow",
          189,
          "flow",
          false
        ],
        [
          121,
          "flow",
          189,
          "reset",
          false
        ],
        [
          123,
          "flow",
          190,
          "flow",
          false
        ],
        [
          189,
          "flow",
          190,
          "on",
          false
        ],
        [
          121,
          "flow",
          190,
          "off",
          false
        ],
        [
          190,
          "flow",
          191,
          "flow",
          false
        ],
        [
          121,
          "flow",
          191,
          "reset",
          false
        ],
        [
          193,
          "flow",
          192,
          "flow",
          false
        ],
        [
          123,
          "flow",
          193,
          "flow",
          false
        ],
        [
          121,
          "flow",
          193,
          "reset",
          false
        ],
        [
          2,
          "flow",
          194,
          "flow",
          false
        ],
        [
          117,
          "flow",
          194,
          "on",
          false
        ],
        [
          186,
          "flow",
          195,
          "flow",
          false
        ],
        [
          117,
          "flow",
          196,
          "flow",
          false
        ],
        [
          118,
          "flow",
          197,
          "flow",
          false
        ],
        [
          118,
          "flag",
          197,
          "condition",
          false
        ],
        [
          2,
          "enterState",
          198,
          "flow",
          false
        ],
        [
          2,
          "flow",
          199,
          "flow",
          false
        ],
        [
          199,
          "flow",
          200,
          "flow",
          false
        ],
        [
          199,
          "flag",
          200,
          "condition",
          false
        ],
        [
          200,
          "True",
          201,
          "flow",
          false
        ],
        [
          200,
          "False",
          201,
          "reset",
          false
        ],
        [
          201,
          "flow",
          202,
          "flow",
          false
        ],
        [
          2,
          "flow",
          203,
          "flow",
          false
        ],
        [
          2,
          "flow",
          204,
          "flow",
          false
        ],
        [
          207,
          "True",
          204,
          "on",
          false
        ],
        [
          202,
          "flow",
          205,
          "flow",
          false
        ],
        [
          2,
          "flow",
          206,
          "flow",
          false
        ],
        [
          203,
          "flow",
          207,
          "flow",
          false
        ],
        [
          203,
          "flag",
          207,
          "condition",
          false
        ],
        [
          204,
          "flow",
          208,
          "flow",
          false
        ],
        [
          2,
          "flow",
          209,
          "flow",
          false
        ],
        [
          208,
          "completed",
          209,
          "on",
          false
        ],
        [
          209,
          "flow",
          210,
          "flow",
          false
        ],
        [
          210,
          "flow",
          211,
          "flow",
          false
        ],
        [
          211,
          "flow",
          212,
          "flow",
          false
        ],
        [
          204,
          "flow",
          213,
          "flow",
          false
        ],
        [
          213,
          "flow",
          214,
          "flow",
          false
        ],
        [
          2,
          "flow",
          215,
          "flow",
          false
        ],
        [
          215,
          "flow",
          216,
          "flow",
          false
        ],
        [
          215,
          "flag",
          216,
          "condition",
          false
        ],
        [
          2,
          "flow",
          217,
          "flow",
          false
        ],
        [
          216,
          "True",
          217,
          "on",
          false
        ],
        [
          217,
          "flow",
          218,
          "flow",
          false
        ],
        [
          2,
          "flow",
          219,
          "flow",
          false
        ],
        [
          218,
          "completed",
          219,
          "on",
          false
        ],
        [
          219,
          "flow",
          220,
          "flow",
          false
        ],
        [
          220,
          "flow",
          221,
          "flow",
          false
        ],
        [
          2,
          "enterState",
          222,
          "flow",
          false
        ],
        [
          217,
          "flow",
          224,
          "flow",
          false
        ],
        [
          224,
          "flow",
          225,
          "flow",
          false
        ],
        [
          227,
          "flow",
          226,
          "flow",
          false
        ],
        [
          2,
          "flow",
          227,
          "flow",
          false
        ],
        [
          155,
          "flow",
          227,
          "on",
          false
        ],
        [
          226,
          "flow",
          228,
          "flow",
          false
        ],
        [
          155,
          "flow",
          229,
          "flow",
          false
        ],
        [
          208,
          "completed",
          230,
          "flow",
          false
        ],
        [
          229,
          "flow",
          231,
          "flow",
          false
        ],
        [
          229,
          "val",
          231,
          "A",
          false
        ],
        [
          218,
          "completed",
          235,
          "flow",
          false
        ]
      ],
      "name":"New State",
      "nodes":{
        "2":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "dtRaw":true,
              "dtReal":true,
              "dtSim":true,
              "enterState":false,
              "exitState":false,
              "flow":false
            }
          },
          "pos":[
            -1026,
            78
          ],
          "type":"events/onUpdate"
        },
        "8":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1172,
            -384
          ],
          "type":"vehicle/enterVehicle"
        },
        "9":{
          "code":{
            "work":"self.pinOut.output.value = self.pinIn.input.value",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "input":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Value Holder",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "input",
              null,
              ""
            ],
            [
              "out",
              "number",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            346,
            -20
          ],
          "type":"util/customLua"
        },
        "10":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal limits = self.pinIn.limits.value\nlocal idtable = self.pinIn.idtable.value\nlocal laps = self.pinIn.laps.value\nlocal mode = self.pinIn.speedMode.value\nlocal lane = self.pinIn.useLanes.value\nlocal risk = self.pinIn.risk.value\nlocal avoid = self.pinIn.avoid.value == 1\nlocal speed = self.pinIn.routeSpd.value\nlocal codrivability = self.pinIn.codrivability.value\nlocal wpspd = self.pinIn.wpspd.value\nlocal wtable = self.pinIn.waypoints.value\nlocal count = #wtable\nlocal spdtable = {}\nlocal spdsplit = {}\nlocal spdtfirst = false\n\nlocal cwp = \"\"\nlocal clim = 0\n\nlocal args = \"{\"\n\nif laps ~= nil then\nargs = args .. \"noOfLaps = \" .. laps .. \",\"\nend\n\nif lane ~= nil then\nargs = args .. \"driveInLane = \" .. extensions.blrutils.boolToText(lane, \"'on'\", \"'off'\") .. \",\"\nend\n\nif avoid ~= nil then\nargs = args .. \"avoidCars = \" .. extensions.blrutils.boolToText(avoid, \"'on'\", \"'off'\") .. \",\"\nend\n\nif risk ~= nil then\nargs = args .. \"aggression = \" .. risk .. \",\"\nend\n\nif speed ~= nil then\nargs = args .. \"routeSpeed = \" .. speed .. \",\"\nend\n\nif mode ~= nil then\nargs = args .. \"routeSpeedMode = '\" .. mode .. \"',\"\nend\n\nif wpspd ~= nil then\nspdtable = extensions.blrutils.ssplit(wpspd, \",\")\nspdtfirst = true\nargs = args .. \"wpSpeeds = {\"\nfor k,v in pairs(spdtable) do\nspdsplit = extensions.blrutils.ssplit(v, \":\")\nif not spdtfirst then \nargs = args .. \",\"\nelse\nspdtfirst = false\nend\nargs = args .. spdsplit[1] .. \"=\" .. tonumber(spdsplit[2])\nend\nargs = args .. \"},\"\nend\n\nargs = args .. \"wpTargetList = {\"\nfor k,v in ipairs(wtable) do\nargs = args .. \"'\" .. wtable[k] .. \"'\"\nif k ~= count then\nargs = args .. \",\"\nend\nend\nargs = args .. \"}\"\n\nif limits ~= nil then\nargs = args .. \",wpSpeeds = {\"\nfor k,v in ipairs(wtable) do\nargs = args .. wtable[k] .. \"=\" .. ltable[k] \nif k ~= count then\nargs = args .. \",\"\nend\nend\nargs = args .. \"}\"\nend\n\nargs = args .. \"}\"\n\nlocal veh = {}\nfor i=1,#idtable do\nveh = scenetree.findObjectById(idtable[i])\nif veh ~= nil then\nveh:queueLuaCommand(\"ai.setCutOffDrivability(\" .. codrivability .. \")\")\nveh:queueLuaCommand(\"ai.driveUsingPath(\" .. args .. \")\")\nend\nend\n\n\n\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "avoid":{
              "type":"number",
              "value":1
            },
            "codrivability":{
              "type":"number",
              "value":0
            },
            "useLanes":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "avoid":true,
              "codrivability":true,
              "flow":false,
              "idtable":false,
              "laps":false,
              "limits":true,
              "risk":false,
              "routeSpd":false,
              "speedMode":false,
              "useLanes":true,
              "waypoints":false,
              "wpspd":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"AI Custom Path (MULTI VEH)",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "table",
              "waypoints",
              null,
              ""
            ],
            [
              "in",
              "string",
              "limits",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "in",
              "string",
              "speedMode",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "useLanes",
              null,
              ""
            ],
            [
              "in",
              "number",
              "risk",
              null,
              ""
            ],
            [
              "in",
              "number",
              "routeSpd",
              null,
              ""
            ],
            [
              "in",
              "number",
              "avoid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "codrivability",
              null,
              ""
            ],
            [
              "in",
              "string",
              "wpspd",
              null,
              ""
            ]
          ],
          "pos":[
            1410,
            -230
          ],
          "type":"util/customLua"
        },
        "11":{
          "code":{
            "work":"local dtable = self.pinIn.idtable.value\nlocal veh = {}\nfor k,v in pairs(dtable) do\nveh = {}\nif v ~= -1 then\nveh = scenetree.findObjectById(v)\nif veh ~= nil then\ncore_vehicleBridge.executeAction(veh,'setFreeze', self.pinIn.freeze.value)\nend\nend\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Freeze",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "freeze",
              null,
              ""
            ]
          ],
          "pos":[
            1200,
            -118
          ],
          "type":"util/customLua"
        },
        "12":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            864,
            694
          ],
          "type":"vehicle/freeze"
        },
        "13":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal seed = self.pinIn.seed.value\nlocal efile = extensions.blrutils.loadEventWithRandoms(self.pinIn.efile.value, seed)\n\nlocal opModels = {}\nlocal opConfigs = {}\nlocal configData = efile[\"configs\"]\n-- Updated config loading, universal, works with performance class files or old config lists\nlocal loadedConfigs = extensions.blrutils.perfclassConfigLoader(configData)\nopModels = loadedConfigs[\"models\"]\nopConfigs = loadedConfigs[\"configs\"]\n\nlocal waypoints = extensions.blrutils.ssplit(efile[\"waypoints\"],\",\")\nwaypoints[#waypoints+1] = waypoints[1]\nlocal triggers = extensions.blrutils.ssplit(efile[\"triggers\"],\",\")\nlocal scount = tonumber(efile[\"scount\"])\nlocal opCount = math.min(tonumber(efile[\"opcount\"]), self.pinIn.opt.value)\nlocal risk = tonumber(efile[\"risk\"]) or 1.0\nlocal wpspd = efile[\"wpspd\"]\nlocal aispd = tonumber(efile[\"aispd\"]) or 110.0\nlocal aispdmode = efile[\"aispdmode\"] or \"limit\"\n\nlocal laps = tonumber(efile[\"laps\"])\n\nlocal opspos = {}\nlocal opsrot = {}\nlocal pspos = {}\nlocal psrot = {}\n\nmath.randomseed(seed)\nlocal pspawn = math.random(1,opCount+1)\npspos = extensions.blrutils.ssplitnum(efile[\"spos\" .. pspawn],\",\")\npsrot = extensions.blrutils.ssplitnum(efile[\"srot\" .. pspawn],\",\")\n\nlocal padded = false\nfor i=1,opCount do\npadded = i==pspawn or padded\nif not padded then\nopspos[i] = efile[\"spos\" .. i]\nopsrot[i] = efile[\"srot\" .. i]\nelse\nopspos[i] = efile[\"spos\" .. i+1]\nopsrot[i] = efile[\"srot\" .. i+1]\nend\nend\n\nself.pinOut.opModels.value = opModels\nself.pinOut.opConfigs.value = opConfigs\nself.pinOut.pspos.value = pspos\nself.pinOut.psrot.value = psrot\nself.pinOut.waypoints.value = waypoints\nself.pinOut.triggers.value = triggers\nself.pinOut.opCount.value = opCount\nself.pinOut.opspos.value = opspos\nself.pinOut.opsrot.value = opsrot\nself.pinOut.laps.value = laps\nself.pinOut.cpcount.value = #triggers\nself.pinOut.wpspd.value = wpspd\nself.pinOut.aispd.value = aispd\nself.pinOut.aispdmode.value = aispdmode\nself.pinOut.risk.value = risk",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "seed":false,
              "efile":false,
              "flow":false,
              "opt":false
            },
            "p_out":{
              "aispd":false,
              "aispdmode":false,
              "cpcount":false,
              "flow":false,
              "laps":false,
              "opConfigs":false,
              "opCount":false,
              "opModels":false,
              "opspos":false,
              "opsrot":false,
              "pspos":false,
              "psrot":false,
              "risk":false,
              "triggers":false,
              "waypoints":false,
              "wpspd":false
            }
          },
          "name":"BLRTrackRace Loader",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "efile",
              null,
              ""
            ],
            [
              "out",
              "table",
              "opModels",
              null,
              ""
            ],
            [
              "out",
              "table",
              "opConfigs",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "pspos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "psrot",
              null,
              ""
            ],
            [
              "out",
              "table",
              "waypoints",
              null,
              ""
            ],
            [
              "out",
              "table",
              "triggers",
              null,
              ""
            ],
            [
              "out",
              "number",
              "opCount",
              null,
              ""
            ],
            [
              "out",
              "table",
              "opspos",
              null,
              ""
            ],
            [
              "out",
              "table",
              "opsrot",
              null,
              ""
            ],
            [
              "out",
              "number",
              "laps",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cpcount",
              null,
              ""
            ],
            [
              "in",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "opt",
              null,
              ""
            ],
            [
              "out",
              "number",
              "risk",
              null,
              ""
            ],
            [
              "out",
              "string",
              "wpspd",
              null,
              ""
            ],
            [
              "out",
              "number",
              "aispd",
              null,
              ""
            ],
            [
              "out",
              "string",
              "aispdmode",
              null,
              ""
            ]
          ],
          "pos":[
            290,
            -594
          ],
          "type":"util/customLua"
        },
        "14":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "height":{
              "type":"number",
              "value":170
            },
            "posX":{
              "type":"number",
              "value":10
            },
            "posY":{
              "type":"number",
              "value":80
            },
            "title":{
              "type":"string",
              "value":"Race Event Loader"
            },
            "width":{
              "type":"number",
              "value":200
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":true,
              "posX":true,
              "posY":true,
              "title":false,
              "width":true
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            -396,
            64
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "15":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            822,
            -1252
          ],
          "type":"logic/frameDelay"
        },
        "16":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1074,
            8
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "17":{
          "data":{
            "useMessages":false,
            "bigFinishMsg":false,
            "playSounds":true,
            "useImgui":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "countdownMsg":{
              "type":"string",
              "value":"%d"
            },
            "finishMsgDuration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "countdownMsg":true,
              "duration":false,
              "finishMsg":false,
              "finishMsgDuration":true,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "finished":false,
              "flow":false,
              "ongoing":false
            }
          },
          "pos":[
            1410,
            92
          ],
          "type":"gameplay/countdown"
        },
        "18":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            976,
            106
          ],
          "type":"logic/flowSwitch"
        },
        "19":{
          "code":{
            "work":"local dtable = self.pinIn.idtable.value\nlocal veh = {}\nfor k,v in pairs(dtable) do\nveh = {}\nif v ~= -1 then\nveh = scenetree.findObjectById(v)\nif veh ~= nil then\ncore_vehicleBridge.executeAction(veh,'setFreeze', self.pinIn.freeze.value)\nend\nend\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Freeze",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "freeze",
              null,
              ""
            ]
          ],
          "pos":[
            1746,
            120
          ],
          "type":"util/customLua"
        },
        "20":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":30
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1172,
            106
          ],
          "type":"logic/frameDelay"
        },
        "21":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal veidtable = self.pinIn.veid.value\nlocal nid = self.pinIn.nid.value or 0\nlocal af = self.pinIn.af.value\n\nlocal filter = -1\nlocal tdata = {}\nlocal statusTable = {}\nlocal eventTable = {}\nlocal tnameTable = {}\nlocal tidTable = {}\nlocal hasUpdate = false\n\nif not extensions.blrtriggers.isNodeRegistered(nid) then\nextensions.blrtriggers.registerNode(nid)\nend\n\nfor k,v in pairs(veidtable) do\nfilter = v\ntdata = extensions.blrtriggers.poolTriggerData(nid, filter, false)\nif tdata then\nhasUpdate = true\neventTable[filter] = tdata[\"event\"]\ntidTable[filter] = tdata[\"triggerID\"]\ntnameTable[filter] = tdata[\"triggerName\"]\nelse\neventTable[filter] = nil\ntidTable[filter] = nil\ntnameTable[filter] = nil\nend\n\nif af == nil then\nstatusTable[filter] = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, false)\nelseif af[filter] == nil then\nstatusTable[filter] = extensions.blrtriggers.getGlobalTriggerStatus(nid,filter, false)\nelse\nstatusTable[filter] = extensions.blrtriggers.getTriggerStatus(nid,filter, af[filter], false)\nend\n\nend\n\nself.pinOut.status.value = statusTable\nself.pinOut.event.value = eventTable\nself.pinOut.triggerID.value = tidTable\nself.pinOut.triggerName.value = tnameTable\nself.pinOut.update.value = hasUpdate",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "customColor":[
            1,
            0,
            0,
            0.75000000000000000000
          ],
          "customIcon":"simobject_lightning",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "menuMode":{
              "type":"bool",
              "value":false
            },
            "nid":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "af":true,
              "flow":false,
              "menuMode":true,
              "nid":true,
              "veid":false
            },
            "p_out":{
              "event":false,
              "flow":true,
              "status":false,
              "triggerID":false,
              "triggerName":false,
              "update":false
            }
          },
          "name":"Multi VEID Filtered Trigger",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "update",
              null,
              ""
            ],
            [
              "out",
              "table",
              "status",
              null,
              ""
            ],
            [
              "out",
              "table",
              "event",
              null,
              ""
            ],
            [
              "out",
              "table",
              "triggerID",
              null,
              ""
            ],
            [
              "in",
              "string",
              "af",
              null,
              ""
            ],
            [
              "out",
              "table",
              "triggerName",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "menuMode",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nid",
              null,
              ""
            ]
          ],
          "pos":[
            1144,
            344
          ],
          "type":"util/customLua"
        },
        "22":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal leaders = self.pinIn.leaderboard.value\nlocal times = self.pinIn.times.value\nlocal endpos = self.pinIn.endpos.value or -1\nlocal winner = self.pinIn.winner.value or false\nlocal started = self.pinIn.started.value\nlocal toRet = \"\"\nif started then\nif leaders then\nif leaders[1] then\ntoRet = \"Leaderboard\\n\"\nfor i=1,#leaders do\ntoRet = toRet .. \"#\" .. i .. \" - \" .. leaders[i] .. \" in \" .. extensions.blrRaceManager.raceTimeString(extensions.blrRaceManager.msTimeFormat(times[leaders[i]])) .. \"\\n\"\nend\n\nelse\ntoRet = toRet .. \"Waiting for results\"\nend\nelse\ntoRet = \"Race not started\"\nend\nelse\ntoRet = \"Race not started\"\nend\n\nif winner and started then\ntoRet = toRet .. \"\\nYou won the race!\"\nelseif endpos ~= -1 and started then\ntoRet = toRet .. \"\\nYou finished #\" .. endpos\nend\n\nself.pinOut.strout.value = toRet",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "endpos":false,
              "flow":false,
              "leaderboard":false,
              "started":false,
              "times":false,
              "winner":false
            },
            "p_out":{
              "flow":false,
              "strout":false
            }
          },
          "name":"BLRRM Stats",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "leaderboard",
              null,
              ""
            ],
            [
              "in",
              "table",
              "times",
              null,
              ""
            ],
            [
              "in",
              "number",
              "endpos",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "winner",
              null,
              ""
            ],
            [
              "out",
              "string",
              "strout",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "started",
              null,
              ""
            ]
          ],
          "pos":[
            2628,
            -20
          ],
          "type":"util/customLua"
        },
        "23":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrtriggers.blrTriggerInit()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Trigger Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -662,
            -76
          ],
          "type":"util/customLua"
        },
        "24":{
          "code":{
            "work":"local actions = {\"dropPlayerAtCamera\", \"dropPlayerAtCameraNoReset\", \"recover_vehicle\", \"recover_vehicle_alt\", \"recover_to_last_road\", \"reload_vehicle\", \"reload_all_vehicles\", \"loadHome\", \"saveHome\", \"reset_all_physics\", \"goto_checkpoint\", \"set_checkpoint\", \"slower_motion\", \"faster_motion\", \"toggle_slow_motion\", \"nodegrabberAction\", \"nodegrabberGrab\", \"nodegrabberRender\", \"nodegrabberStrength\", \"toggleTraffic\", \"toggleAITraffic\", \"switch_next_vehicle\", \"switch_previous_vehicle\", \"switch_next_vehicle_multiseat\", \"forceField\", \"funBoom\", \"funBreak\", \"funExtinguish\", \"funFire\", \"funHinges\", \"funTires\", \"funRandomTire\", \"toggleWalkingMode\", \"toggleTrackBuilder\", \"toggleBigMap\", \"reset_physics\", \"vehicle_selector\", \"parts_selector\"}\nfor i=1,#actions do\ncore_input_actionFilter.addAction(1, actions[i], true)\nend\n\n-- NOTE: FOR MENU ACTIONS NEED Set UI Layout NODE TO HAVE\n-- menu PIN SET TO scenario OTHERWISE PART EDIT AND VEH SELECT\n-- WILL STILL BE AVAILABLE",
            "_executionStarted":"",
            "_executionStopped":"core_input_actionFilter.clear(1)",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Block Actions",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1096,
            -216
          ],
          "type":"util/customLua"
        },
        "25":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "layout":{
              "type":"string",
              "value":"beamlrtrack"
            },
            "menu":{
              "type":"string",
              "value":"scenario"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gameStateName":true,
              "keepLayout":false,
              "layout":false,
              "menu":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -886,
            -258
          ],
          "type":"ui/setUILayout"
        },
        "26":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrhooks.loadBLRHooks()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "customName":"Load BLR Hooks",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Custom Lua ",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -662,
            -20
          ],
          "type":"util/customLua"
        },
        "27":{
          "code":{
            "work":"local veid = self.pinIn.veid.value\nlocal status = self.pinIn.status.value\nlocal event = self.pinIn.event.value\nlocal triggerID = self.pinIn.triggerID.value\nlocal triggerName = self.pinIn.triggerName.value\n\nlocal cevent = \"\"\nlocal cid = -1\nlocal cname = \"\"\n\nlocal strout = \"\"\n\nfor k,v in pairs(veid) do\nstrout = strout .. \"\\n~~ ID \" .. v .. \" ~~\\n\"\nif status[v] then\nstrout = strout .. \"Status: TRUE \\n\"\nelse\nstrout = strout .. \"Status: FALSE \\n\"\nend\ncevent = event[v] or \"\"\ncid = triggerID[v] or -1\ncname = triggerName[v] or \"\"\nstrout = strout .. \"Event: \" .. cevent .. \"\\n\"\nstrout = strout .. \"triggerID: \" .. cid .. \"\\n\"\nstrout = strout .. \"triggerName: \" .. cname .. \"\\n\"\nend\n\nself.pinOut.strout.value = strout",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "event":false,
              "flow":false,
              "status":false,
              "triggerID":false,
              "triggerName":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "strout":false
            }
          },
          "name":"Multi Table Debug",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "table",
              "status",
              null,
              ""
            ],
            [
              "in",
              "table",
              "event",
              null,
              ""
            ],
            [
              "in",
              "table",
              "triggerID",
              null,
              ""
            ],
            [
              "in",
              "table",
              "triggerName",
              null,
              ""
            ],
            [
              "out",
              "string",
              "strout",
              null,
              ""
            ]
          ],
          "pos":[
            1116,
            582
          ],
          "type":"util/customLua"
        },
        "28":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"racestate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            318,
            -1070
          ],
          "type":"types/genericValue"
        },
        "29":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2754,
            512
          ],
          "type":"logic/branch"
        },
        "30":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"Race finished"
            },
            "varName":{
              "type":"string",
              "value":"racestate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            3174,
            512
          ],
          "type":"types/genericValue"
        },
        "31":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2978,
            526
          ],
          "type":"logic/once"
        },
        "32":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":1
            },
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            500,
            -594
          ],
          "type":"types/genericValue"
        },
        "33":{
          "count":3,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"number",
              "value":0
            },
            "value_2":{
              "type":"number",
              "value":1
            },
            "value_3":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "none":false
            }
          },
          "pos":[
            -172,
            50
          ],
          "type":"logic/switchcase"
        },
        "34":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -368,
            190
          ],
          "type":"types/genericValue"
        },
        "35":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal racers = self.pinIn.racers.value\nlocal checkpoints = self.pinIn.checkpoints.value\nlocal laps = self.pinIn.laps.value\nextensions.blrRaceManager.setRaceParams(racers, checkpoints, laps)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "racers":false,
              "checkpoints":false,
              "flow":false,
              "laps":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Race Setup",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "racers",
              null,
              ""
            ],
            [
              "in",
              "table",
              "checkpoints",
              null,
              ""
            ],
            [
              "in",
              "number",
              "laps",
              null,
              ""
            ]
          ],
          "pos":[
            1368,
            -538
          ],
          "type":"util/customLua"
        },
        "36":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Get in position"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            360,
            218
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "37":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Cancel"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "pos":[
            360,
            316
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "38":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.leaderboard.value = extensions.blrRaceManager.getLeaderboard()\nself.pinOut.times.value = extensions.blrRaceManager.getTimes()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "leaderboard":false,
              "times":false
            }
          },
          "name":"BLRRM Get Leaderboard",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "table",
              "leaderboard",
              null,
              ""
            ],
            [
              "out",
              "table",
              "times",
              null,
              ""
            ]
          ],
          "pos":[
            1396,
            484
          ],
          "type":"util/customLua"
        },
        "39":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal racer = self.pinIn.racer.value\nself.pinOut.useMarker.value = extensions.blrRaceManager.blackMarkerCheck(racer)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "racer":false
            },
            "p_out":{
              "flow":false,
              "useMarker":false
            }
          },
          "name":"BLRRM Black Marker",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "useMarker",
              null,
              ""
            ],
            [
              "in",
              "number",
              "racer",
              null,
              ""
            ]
          ],
          "pos":[
            1718,
            610
          ],
          "type":"util/customLua"
        },
        "40":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal racer = self.pinIn.racer.value\nlocal ccp = extensions.blrRaceManager.getCurrentCheckpoint(racer)\nlocal ncp = extensions.blrRaceManager.getFollowingCheckpoint(racer)\nlocal ccpid = extensions.blrRaceManager.getCCPID(racer)\nlocal clap = extensions.blrRaceManager.getCurrentLap(racer)\nlocal finished = extensions.blrRaceManager.getRacerFinished(racer)\nlocal endpos = extensions.blrRaceManager.getLeaderboardPosition(racer)\nlocal winner = extensions.blrRaceManager.getWinner() == racer\nlocal time = extensions.blrRaceManager.getRacerTime(racer)\nself.pinOut.ccp.value = ccp\nself.pinOut.clap.value = clap\nself.pinOut.finished.value = finished\nself.pinOut.endpos.value = endpos\nself.pinOut.winner.value = winner\nself.pinOut.ncp.value = ncp\nself.pinOut.ccpid.value = ccpid\nself.pinOut.time.value = time/1000.0",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "racer":false
            },
            "p_out":{
              "ccp":false,
              "ccpid":false,
              "clap":false,
              "endpos":false,
              "finished":false,
              "flow":false,
              "ncp":false,
              "time":false,
              "winner":false
            }
          },
          "name":"BLRRM Racer Info",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "racer",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ccp",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ncp",
              null,
              ""
            ],
            [
              "out",
              "number",
              "ccpid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "clap",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "finished",
              null,
              ""
            ],
            [
              "out",
              "number",
              "endpos",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "winner",
              null,
              ""
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ]
          ],
          "pos":[
            1718,
            260
          ],
          "type":"util/customLua"
        },
        "41":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "anchor":{
              "type":"string",
              "value":"TL"
            },
            "height":{
              "type":"number",
              "value":200
            },
            "posX":{
              "type":"number",
              "value":10
            },
            "posY":{
              "type":"number",
              "value":260
            },
            "title":{
              "type":"string",
              "value":"Race Stats"
            },
            "width":{
              "type":"number",
              "value":200
            }
          },
          "hiddenPins":{
            "p_in":{
              "anchor":true,
              "flow":false,
              "height":true,
              "posX":true,
              "posY":true,
              "title":false,
              "width":true
            },
            "p_out":{
              "flow":false,
              "wasClosed":false
            }
          },
          "pos":[
            2082,
            -132
          ],
          "type":"ui/imgui/elemental/imBegin"
        },
        "42":{
          "data":{
            "debug":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color_in":{
              "type":"color",
              "value":[
                0.44597768800000386902,
                1,
                0,
                1
              ]
            },
            "color_out":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "onlyForward":{
              "type":"bool",
              "value":true
            },
            "scale":{
              "type":"vec3",
              "value":[
                3.50000000000000000000,
                5.80000019073486328125,
                10
              ]
            },
            "staticMarkers":{
              "type":"bool",
              "value":false
            },
            "stop_timer":{
              "type":"number",
              "value":1
            },
            "visibleMarkers":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "clear":false,
              "color_in":true,
              "color_out":true,
              "flow":false,
              "onlyForward":true,
              "position":false,
              "rotation":false,
              "scale":false,
              "staticMarkers":true,
              "stop_timer":true,
              "vehId":false,
              "visibleMarkers":true
            },
            "p_out":{
              "dotAngle":false,
              "flow":false,
              "forward":false,
              "forwardDistance":false,
              "forwardDistanceRelative":true,
              "inside":false,
              "outside":false,
              "partlyInside":false,
              "sideDistance":false,
              "sideDistanceRelative":true,
              "stopped":false,
              "stoppedPercent":true,
              "stopping":true
            }
          },
          "pos":[
            318,
            470
          ],
          "type":"scene/rectMarker"
        },
        "43":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            556,
            372
          ],
          "type":"types/genericValue"
        },
        "44":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -172,
            610
          ],
          "type":"scene/getPlayerVehicle"
        },
        "45":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal running = self.pinIn.running.value\nextensions.blrRaceManager.setRaceRunning(running)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "running":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "running":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Set Running",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "running",
              null,
              ""
            ]
          ],
          "pos":[
            1718,
            -76
          ],
          "type":"util/customLua"
        },
        "46":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal event = self.pinIn.event.value\nlocal trigger = self.pinIn.trigger.value\nextensions.blrRaceManager.processTriggerUpdate(event,trigger)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "event":false,
              "flow":false,
              "trigger":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Process Update",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "event",
              null,
              ""
            ],
            [
              "in",
              "table",
              "trigger",
              null,
              ""
            ]
          ],
          "pos":[
            1410,
            344
          ],
          "type":"util/customLua"
        },
        "47":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2460,
            -132
          ],
          "type":"ui/imgui/elemental/imEnd"
        },
        "48":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2292,
            -132
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "49":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cur":true,
              "flow":false,
              "max":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -844,
            442
          ],
          "type":"ui/raceCheckpoints"
        },
        "50":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fadeInTime":{
              "type":"number",
              "value":-1
            },
            "fadeOutTime":{
              "type":"number",
              "value":-1
            },
            "file":{
              "type":"string",
              "value":"event:UI_Checkpoint"
            },
            "pitch":{
              "type":"number",
              "value":1
            },
            "unique":{
              "type":"bool",
              "value":false
            },
            "volume":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "channel":true,
              "fadeInTime":true,
              "fadeOutTime":true,
              "file":false,
              "flow":false,
              "pitch":true,
              "unique":true,
              "volume":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            680
          ],
          "type":"audio/playOnce"
        },
        "51":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            682,
            554
          ],
          "type":"logic/once"
        },
        "52":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            108,
            470
          ],
          "type":"logic/once"
        },
        "53":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -1070
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "54":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"End race"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "pos":[
            654,
            -1098
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "55":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":0
            },
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1046,
            -1098
          ],
          "type":"types/genericValue"
        },
        "56":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal toRet = extensions.blrRaceManager.isRaceStarted()\nself.pinOut.started.value = toRet",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "started":false
            }
          },
          "name":"BLRRM Race Started",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "started",
              null,
              ""
            ]
          ],
          "pos":[
            2376,
            8
          ],
          "type":"util/customLua"
        },
        "57":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cur":true,
              "flow":false,
              "max":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -578,
            442
          ],
          "type":"ui/raceLaps"
        },
        "58":{
          "code":{
            "work":"local toRet = {}\nlocal pid = self.pinIn.player.value\nlocal aiveh = self.pinIn.aiveh.value\nfor k,v in pairs(aiveh) do\ntoRet[k] = v\nend\ntoRet[#toRet+1] = pid\nself.pinOut.alltable.value = toRet",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "aiveh":false,
              "flow":false,
              "player":false
            },
            "p_out":{
              "alltable":false,
              "flow":false
            }
          },
          "name":"All Race Vehicles",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "aiveh",
              null,
              ""
            ],
            [
              "in",
              "number",
              "player",
              null,
              ""
            ],
            [
              "out",
              "table",
              "alltable",
              null,
              ""
            ]
          ],
          "pos":[
            1158,
            -538
          ],
          "type":"util/customLua"
        },
        "59":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "value":false,
              "color":true,
              "flow":false,
              "useGenericMissionDataApp":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2530,
            512
          ],
          "type":"ui/cornerTimer"
        },
        "60":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"number",
              "value":2
            },
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            864,
            568
          ],
          "type":"types/genericValue"
        },
        "61":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal running = self.pinIn.running.value\nextensions.blrRaceManager.setRaceRunning(running)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "running":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "running":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Set Running",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "running",
              null,
              ""
            ]
          ],
          "pos":[
            514,
            -958
          ],
          "type":"util/customLua"
        },
        "62":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal models = self.pinIn.models.value\nlocal configs = self.pinIn.configs.value\nlocal pos = self.pinIn.pos.value\nlocal rot = self.pinIn.rot.value\nlocal count = self.pinIn.count.value\nlocal seed = self.pinIn.seed.value or 1234\nmath.randomseed(seed)\n\nextensions.blrRaceManager.resetIDtable()\n\nlocal pick = 0\nlocal cmodel = \"\"\nlocal cconfig = \"\"\nlocal cpos = {}\nlocal crot = {}\nlocal cpaint = {}\nlocal currentSpawnOptions = {}\nlocal currentVeh = {}\nlocal idtable = {}\nlocal spawnPos = {}\nlocal spawnRot = {}\n\nfor i=1,count do\ncpos = extensions.blrutils.ssplitnum(pos[i], \",\")\nspawnPos = vec3(cpos[1], cpos[2], cpos[3])\ncrot = extensions.blrutils.ssplitnum(rot[i], \",\")\nspawnRot = quat(crot[1], crot[2], crot[3], crot[4])\npick = math.random(1,#models)\ncmodel = models[pick]\ncconfig = configs[pick]\ncpaint = extensions.blrutils.createRandomPaint(seed + i)\n\ncurrentSpawnOptions = {config = cconfig, pos = spawnPos, rot = spawnRot, paint = cpaint}\ncurrentVeh = extensions.core_vehicles.spawnNewVehicle(cmodel, currentSpawnOptions)\n\nidtable[i] = currentVeh:getId()\nextensions.blrRaceManager.setRacerID(idtable[i], i+1)\n\ncurrentVeh.obj.playerUsable=false\nend\n\n\nself.pinOut.spawnids.value = idtable\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "configs":false,
              "count":false,
              "flow":false,
              "models":false,
              "pos":false,
              "rot":false,
              "seed":false
            },
            "p_out":{
              "flow":false,
              "spawnids":false
            }
          },
          "name":"BLRRM Veh Multi Spawn",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "count",
              null,
              ""
            ],
            [
              "in",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "in",
              "table",
              "models",
              null,
              ""
            ],
            [
              "in",
              "table",
              "configs",
              null,
              ""
            ],
            [
              "in",
              "table",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "table",
              "rot",
              null,
              ""
            ],
            [
              "out",
              "table",
              "spawnids",
              null,
              ""
            ]
          ],
          "pos":[
            878,
            -426
          ],
          "type":"util/customLua"
        },
        "63":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local currentObj\nfor _,id in pairs(self.pinIn.idtable.value) do\nif id ~= -1 then\ncurrentObj = scenetree.findObjectById(id)\ncurrentObj:delete()\nend\nend"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Delete Object Table",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ]
          ],
          "pos":[
            318,
            -958
          ],
          "type":"util/customLua"
        },
        "64":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1928,
            8
          ],
          "type":"vehicle/freeze"
        },
        "65":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal running = self.pinIn.running.value\nextensions.blrRaceManager.setRaceRunning(running)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "running":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "running":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Set Running",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "running",
              null,
              ""
            ]
          ],
          "pos":[
            -662,
            -188
          ],
          "type":"util/customLua"
        },
        "66":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            598,
            -1238
          ],
          "type":"logic/flowSwitch"
        },
        "67":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -284,
            -1112
          ],
          "type":"ui/imgui/elemental/imText"
        },
        "68":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":7
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2012,
            316
          ],
          "type":"scene/singleMarker"
        },
        "69":{
          "data":{
            "zOffset":0
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color":{
              "type":"color",
              "value":[
                0.00000099999999700000,
                0,
                0,
                1
              ]
            },
            "radius":{
              "type":"number",
              "value":7
            }
          },
          "hiddenPins":{
            "p_in":{
              "color":true,
              "fadeFarDist":true,
              "fadeNearDist":true,
              "flow":false,
              "markerType":true,
              "position":false,
              "radius":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2446,
            288
          ],
          "type":"scene/singleMarker"
        },
        "70":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cur":false,
              "flow":false,
              "max":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2012,
            512
          ],
          "type":"ui/raceLaps"
        },
        "71":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "cur":false,
              "flow":false,
              "max":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            2236,
            512
          ],
          "type":"ui/raceCheckpoints"
        },
        "72":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1046,
            -1238
          ],
          "type":"logic/once"
        },
        "73":{
          "code":{
            "work":"local myObj = scenetree.findObject(self.pinIn.name.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Name Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ]
          ],
          "pos":[
            2012,
            190
          ],
          "type":"util/customLua"
        },
        "74":{
          "code":{
            "work":"local myObj = scenetree.findObject(self.pinIn.name.value)\nlocal objPos = {}\nif myObj ~= nil then\nobjPos = myObj:getPosition()\nend\nself.pinOut.pos.value = {objPos.x, objPos.y, objPos.z}",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false,
              "pos":false
            }
          },
          "name":"Get Obj Name Pos",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ]
          ],
          "pos":[
            2446,
            176
          ],
          "type":"util/customLua"
        },
        "75":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            2222,
            274
          ],
          "type":"logic/branch"
        },
        "76":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -284,
            -734
          ],
          "type":"logic/branch"
        },
        "77":{
          "code":{
            "work":"local idtable = self.pinIn.idtable.value\nfor k,v in pairs(idtable) do\nscenetree.findObjectById(v):queueLuaCommand(\"extensions.blrVehicleUtils.toggleNitrous()\")\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Toggle Nitrous",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ]
          ],
          "pos":[
            1858,
            -258
          ],
          "type":"util/customLua"
        },
        "78":{
          "count":3,
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "value_1":{
              "type":"string",
              "value":"joined"
            },
            "value_2":{
              "type":"string",
              "value":"started"
            },
            "value_3":{
              "type":"string",
              "value":"finished"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "value":false,
              "value_1":false,
              "value_2":false,
              "value_3":false
            },
            "p_out":{
              "flow":false,
              "match_1":false,
              "match_2":false,
              "match_3":false,
              "none":false
            }
          },
          "pos":[
            -46,
            -944
          ],
          "type":"logic/switchcase"
        },
        "79":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal ppos = self.pinIn.ppos.value\nlocal seed = self.pinIn.seed.value\nlocal efile = self.pinIn.efile.value\n\nlocal rewards = {} -- For UI\nrewards[\"moneyreward\"] = 0\nrewards[\"repreward\"] = 0\nrewards[\"partreward\"] = \"None\"\nrewards[\"carreward\"] = \"None\"\nlocal hasRewards = false -- For UI\n\nif ppos <= 3 then -- No rewards after third position\nhasRewards = true -- For UI\n\nlocal edata = extensions.blrutils.loadEventWithRandoms(efile, seed)\nlocal cdata = extensions.blrutils.loadDataTable(\"beamLR/mainData\")\nlocal idata = extensions.blrutils.loadDataTable(\"beamLR/partInv\")\n\n-- Money reward\nif edata[\"moneyreward\"] ~= \"none\" then\nlocal money = extensions.blrutils.ssplitnum(edata[\"moneyreward\"], \",\")\ncdata[\"money\"] = tonumber(cdata[\"money\"]) + (money[ppos] or 0) -- Should handle 1,2,3 and 1,2 and 1\nrewards[\"moneyreward\"] = (money[ppos] or 0) -- For UI\nend\n\n-- Reputation Reward\nif edata[\"repreward\"] ~= \"none\" then\nlocal reputation = extensions.blrutils.ssplitnum(edata[\"repreward\"], \",\")\ncdata[\"rep\"] = tonumber(cdata[\"rep\"]) + (reputation[ppos] or 0) -- Should handle 1,2,3 and 1,2 and 1\nrewards[\"repreward\"] = (reputation[ppos] or 0) -- For UI\nend\n\nif ppos == 1 then -- Some rewards only for first position\n\n-- Part reward\nif edata[\"partreward\"] ~= \"none\" then \nlocal parts = extensions.blrutils.ssplit(edata[\"partreward\"], \",\")\nrewards[\"partreward\"] = edata[\"partreward\"] -- For UI\nfor k,v in pairs(parts) do\nidata[v] = tonumber(idata[v] or \"0\") + 1 --Adds all parts to inventory\nend\nextensions.blrutils.updateDataTable(\"beamLR/partInv\", idata)\nend\n\n-- Car reward\nif edata[\"carreward\"] ~= \"none\" then\nlocal cars = extensions.blrutils.ssplit(edata[\"carreward\"], \",\")\nlocal cardata = {}\nlocal cfirst = true\nlocal seedoffset = 0\nrewards[\"carreward\"] = \"\"\nfor k,v in pairs(cars) do\ncardata = extensions.blrutils.loadDataTable(\"beamLR/shop/car/\" .. v)\nif not cfirst then\nrewards[\"carreward\"] = rewards[\"carreward\"] .. \", \"\nend\nrewards[\"carreward\"] = rewards[\"carreward\"] .. cardata[\"name\"] -- Using proper car name for reward display\nextensions.blrutils.addShopCarToGarage(v, tonumber(cdata[\"carCount\"] or \"0\"), seed+seedoffset)\ncdata[\"carCount\"] = tonumber(cdata[\"carCount\"] or \"0\") + 1\ncfirst=false\nseedoffset=seedoffset+1\nend\nend\n\nend\n\n\nextensions.blrutils.updateDataTable(\"beamLR/mainData\", cdata)\nend\n\nself.pinOut.rewards.value = rewards\nself.pinOut.hasRewards.value = hasRewards",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "seed":false,
              "efile":false,
              "flow":false,
              "ppos":false
            },
            "p_out":{
              "flow":false,
              "hasRewards":false,
              "rewards":false
            }
          },
          "name":"Process Event Rewards",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "efile",
              null,
              ""
            ],
            [
              "in",
              "number",
              "ppos",
              null,
              ""
            ],
            [
              "in",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "out",
              "table",
              "rewards",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "hasRewards",
              null,
              ""
            ]
          ],
          "pos":[
            1018,
            -958
          ],
          "type":"util/customLua"
        },
        "80":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\ndtable[\"status\"] = \"over\"\nextensions.blrutils.updateDataTable(\"beamLR/currentTrackEvent\", dtable)\nextensions.blrglobals.blrFlagSet(\"re_reloadEventData\", true)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Race Event Over",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            1382,
            -958
          ],
          "type":"util/customLua"
        },
        "81":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"re_reloadEventData"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1208,
            -888
          ],
          "type":"util/customLua"
        },
        "82":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1180,
            -748
          ],
          "type":"logic/branch"
        },
        "83":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":false,
          "global":true,
          "hardcodedPins":{
            "val":{
              "type":"string",
              "value":"Race in progress"
            },
            "varName":{
              "type":"string",
              "value":"racestate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "varName":true,
              "flow":false,
              "suffix":true,
              "val":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            402,
            -720
          ],
          "type":"types/genericValue"
        },
        "84":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"re_reloadEventData"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -970,
            -860
          ],
          "type":"util/customLua"
        },
        "85":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -956,
            -734
          ],
          "type":"logic/once"
        },
        "86":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":false
            },
            "cid":{
              "type":"number",
              "value":1
            },
            "confirm":{
              "type":"bool",
              "value":true
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            },
            "text":{
              "type":"string",
              "value":"Abandon Event"
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -118
          ],
          "type":"util/customLua"
        },
        "87":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal im = ui_imgui\nlocal enabled = self.pinIn.enabled.value and (extensions.blrglobals.blrFlagGet(\"imToggle\") or self.pinIn.ignoreToggle.value)\nlocal avail = im.GetContentRegionAvail()\n-- Confirmable button vars\nlocal confirm = self.pinIn.confirm.value\nlocal cid = self.pinIn.cid.value\nlocal cstate = false\nlocal ccancel = self.pinIn.ccancel.value -- Cancel action linked to a confirmable button to reset confirm state on click\nlocal clink = self.pinIn.clink.value\n-- Mouse states\nlocal down = false\nlocal hold = false\nlocal up = false\n\n-- Button display\nif confirm then\ncstate = extensions.blrutils.getButtonConfirm(cid)\nif cstate then\nim.Button(\"Confirm?\"  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\nelse\nim.Button(tostring(self.pinIn.text.value or \"Button\")  ..'##'.. tostring(self.id), im.ImVec2(avail.x, 0))\nend\n\n-- Button logic\nif enabled then\nif im.IsItemHovered() then\n\ndown = im.IsMouseClicked(0)\nhold = im.IsMouseDown(0)\nup =   im.IsMouseReleased(0)\nif (down or hold or up) then\nif down then hold = false up = false end\nif hold then down = false up = false end\nif up then down = false hold = false end\nend\n\nif confirm then -- Confirmable button\nif cstate then\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nif ccancel and clink then -- Confirmable button cancel link where cancel button is also confirmable\nextensions.blrutils.setButtonConfirm(clink, false)\nend\nend\nelse\nif down then \nextensions.blrutils.cycleButtonConfirm(cid) \nend\nend\n\nelse -- Regular button\nself.pinOut.down.value = down\nself.pinOut.hold.value = hold\nself.pinOut.up.value = up\n\nif down and ccancel and clink then -- Confirmable button cancel link\nextensions.blrutils.setButtonConfirm(clink, false)\nend\n\nend\n\nelse -- Button not hovered\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend\n\nelse -- Button not enabled\nself.pinOut.down.value = false\nself.pinOut.hold.value = false\nself.pinOut.up.value = false\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "ccancel":{
              "type":"bool",
              "value":true
            },
            "clink":{
              "type":"number",
              "value":1
            },
            "confirm":{
              "type":"bool",
              "value":false
            },
            "enabled":{
              "type":"bool",
              "value":true
            },
            "ignoreToggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "ccancel":true,
              "cid":true,
              "clink":true,
              "confirm":true,
              "enabled":true,
              "flow":false,
              "ignoreToggle":true,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "name":"BLR IM Button",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "text",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "down",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "up",
              null,
              ""
            ],
            [
              "out",
              "flow",
              "hold",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "enabled",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "confirm",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cid",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ccancel",
              null,
              ""
            ],
            [
              "in",
              "number",
              "clink",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "ignoreToggle",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -860
          ],
          "type":"util/customLua"
        },
        "88":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Leaderboard"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "pos":[
            -270,
            -608
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "89":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal uileaderboard = self.pinIn.uileaderboard.value\nlocal uidata = extensions.blrRaceManager.getUIData()\nextensions.customGuiStream.toggleTrackEventUI(true)\nextensions.customGuiStream.sendLeaderboard(uileaderboard)\nextensions.customGuiStream.sendEventData(uidata)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "uileaderboard":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Show Leaderboard",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "uileaderboard",
              null,
              ""
            ]
          ],
          "pos":[
            -32,
            -608
          ],
          "type":"util/customLua"
        },
        "90":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"showPenaltyMessage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":true
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -662,
            -1224
          ],
          "type":"util/customLua"
        },
        "91":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"optarget"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            220,
            -706
          ],
          "type":"types/genericValue"
        },
        "92":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -480,
            -1238
          ],
          "type":"logic/branch"
        },
        "93":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"showPenaltyMessage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -74,
            -1182
          ],
          "type":"util/customLua"
        },
        "94":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\nlocal seed = tonumber(dtable[\"seed\"])\nlocal efile = dtable[\"efile\"]\nlocal etable = extensions.blrutils.loadEventWithRandoms(efile, tonumber(seed))\nlocal cmap = extensions.blrutils.getLevelName()\nlocal tmap = etable[\"map\"]\nlocal status = dtable[\"status\"]\nlocal cround = tonumber(dtable[\"cround\"])\nlocal leaderboard = extensions.blrutils.ssplit(dtable[\"ctimes\"], \",\")\nlocal carid = tonumber(dtable[\"carid\"])\n\nlocal opcount = tonumber(etable[\"opcount\"])\nlocal pname = extensions.blrutils.loadDataTable(\"beamLR/playerName\")[\"playerName\"]\n\nlocal pentrigs = {}\nif etable[\"pentrigs\"] ~= \"none\" then\npentrigs = extensions.blrutils.ssplit(etable[\"pentrigs\"], \",\")\nextensions.blrRaceManager.setPenaltyTriggers(pentrigs)\nend\n\n\nlocal pitlane = etable[\"pitlane\"] == \"true\"\nlocal pittrigs = {}\nlocal pitpos = {}\nlocal pitrot = {}\nlocal cpos = 0\nlocal etime = tonumber(etable[\"timeofday\"])\n\nif pitlane then\npittrigs = extensions.blrutils.ssplit(etable[\"pittrigs\"], \",\")\npitpos = extensions.blrutils.ssplitnum(etable[\"pitpos\"], \",\")\npitrot = extensions.blrutils.ssplitnum(etable[\"pitrot\"], \",\")\nextensions.blrRaceManager.setPitData(pitlane, pittrigs, pitpos, pitrot)\nend\n\n\n\nlocal uidata = {}\nuidata[\"title\"] = etable[\"title\"]\nuidata[\"rounds\"] = etable[\"rounds\"]\nuidata[\"cround\"] = cround\nuidata[\"status\"] = status\nuidata[\"moneyreward\"] = etable[\"moneyreward\"]\nuidata[\"repreward\"] = etable[\"repreward\"]\nuidata[\"partreward\"] = etable[\"partreward\"]\nif etable[\"carreward\"] ~= \"none\" then\nlocal csplit = extensions.blrutils.ssplit(etable[\"carreward\"], \",\")\nlocal ctable = {}\nlocal cfirst = true\nuidata[\"carreward\"] = \"\"\nfor k,v in pairs(csplit) do\nctable = extensions.blrutils.loadDataTable(\"beamLR/shop/car/\" .. v)\nif not cfirst then \nuidata[\"carreward\"] = uidata[\"carreward\"] .. \", \"\nend\nuidata[\"carreward\"] = uidata[\"carreward\"] .. ctable[\"name\"]\ncfirst = false\nend\n\nelse\nuidata[\"carreward\"] = \"none\"\nend\n\n\n\nextensions.customGuiStream.sendEventData(uidata)\n\nextensions.blrRaceManager.resetNameTable()\nextensions.blrRaceManager.generateNameTable(seed, opcount+1)\nextensions.blrRaceManager.setPlayerName(pname)\nextensions.blrRaceManager.setUIData(uidata) -- Still needed for first click on leaderboard button, UI isn't ready to receive yet?\n\nlocal ctimesplit = \"\"\nlocal ctime = 0\nlocal ctimeID = 0\nlocal totaltimes = {}\nlocal sortedtimes = {}\nlocal sti = 2\nlocal uileaderboard = {}\nuileaderboard[\"name\"] = {}\nuileaderboard[\"time\"] = {}\n\nif cround == 0 then -- Resets player position display for new event\nextensions.blrRaceManager.setPlayerPosition(0)\nelse -- Load existing leaderboard\n-- Start with player\nctimesplit = extensions.blrutils.ssplit(leaderboard[1], \":\")\nctime = tonumber(ctimesplit[2])\ntotaltimes[1] = (ctime)\nsortedtimes[1] = (ctime)\n\n-- Now deal with AIs\nfor k,v in pairs(leaderboard) do\nctimesplit = extensions.blrutils.ssplit(v, \":\") -- split format op1:323123,op2:23142,...\nif ctimesplit[1] ~= \"player\" then -- Avoid player\nctimeID = tonumber(string.sub(ctimesplit[1], 3))\nctime = tonumber(ctimesplit[2])\ntotaltimes[ctimeID + 1] = (ctime)\nsortedtimes[sti] = (ctime)\nsti=sti+1\nend\nend\n\n-- Calculate positions\ntable.sort(sortedtimes) -- Begin by creating sorted table, times will be in order\nfor k,v in pairs(totaltimes) do -- Loop over RACERID key, TOTALTIME val table \nfor i=1,#sortedtimes do -- Find position in sorted array for current time\nif v == sortedtimes[i] then -- Found racer time\nuileaderboard[\"name\"][i] = extensions.blrRaceManager.getRacerName(k)\nuileaderboard[\"time\"][i] = extensions.blrRaceManager.raceTimeString(extensions.blrRaceManager.msTimeFormat(v))\nif k == 1 then -- Found player position\ncpos = i -- Set cpos value for flowgraph\nend\nend\nend\nend\nend\n\nextensions.customGuiStream.sendLeaderboard(uileaderboard)\n\nlocal desc = etable[\"title\"] .. \"\\n\\n\"\ndesc = desc .. \"Status: \" .. status .. \"\\n\"\nif cpos ~= 0 then\ndesc = desc .. \"Position: \" .. cpos .. \"\\n\"\nend\ndesc = desc .. \"Completed \" .. cround .. \"/\" .. etable[\"rounds\"] .. \" rounds\\n\"\nlocal btntxt = \"\"\nif status == \"joined\" then\nbtntxt = \"Begin Event\"\nelseif status == \"started\" then\nbtntxt = \"Begin Next Round\"\nelseif status == \"finished\" then\nbtntxt = \"Claim Rewards\"\nend\n\nif tmap ~= cmap or status == \"over\" then\ndesc = \"No ongoing event on this map!\"\nend\n\nself.pinOut.efile.value = efile\nself.pinOut.status.value = status\nself.pinOut.cround.value = cround\nself.pinOut.leaderboard.value = uileaderboard\nself.pinOut.carid.value = carid\nself.pinOut.seed.value = seed\nself.pinOut.desc.value = desc\nself.pinOut.btntxt.value = btntxt\nself.pinOut.hasEvent.value = cmap == tmap and status ~= \"over\"\nself.pinOut.leadbtn.value = status ~= \"finished\"\nself.pinOut.quitbtn.value = status ~= \"finished\"\nself.pinOut.tunebtn.value = status ~= \"finished\" and status ~= \"over\"\nself.pinOut.ppos.value = cpos\nself.pinOut.etime.value = etime",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "btntxt":false,
              "carid":false,
              "cround":false,
              "desc":false,
              "efile":false,
              "etime":false,
              "flow":false,
              "hasEvent":false,
              "leadbtn":false,
              "leaderboard":false,
              "ppos":false,
              "quitbtn":false,
              "seed":false,
              "status":false,
              "tunebtn":false
            }
          },
          "name":"Joined Event Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "string",
              "efile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "status",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cround",
              null,
              ""
            ],
            [
              "out",
              "table",
              "leaderboard",
              null,
              ""
            ],
            [
              "out",
              "number",
              "carid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "out",
              "string",
              "desc",
              null,
              ""
            ],
            [
              "out",
              "string",
              "btntxt",
              null,
              ""
            ],
            [
              "out",
              "number",
              "ppos",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "hasEvent",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "leadbtn",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "quitbtn",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "tunebtn",
              null,
              ""
            ],
            [
              "out",
              "number",
              "etime",
              null,
              ""
            ]
          ],
          "pos":[
            -690,
            -1028
          ],
          "type":"util/customLua"
        },
        "95":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.val.value = extensions.blrutils.blrvarGet(self.pinIn.var.value)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "var":{
              "type":"string",
              "value":"penaltyMessage"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "var":false
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "name":"BLR Var Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "var",
              null,
              ""
            ],
            [
              "out",
              "any",
              "val",
              null,
              ""
            ]
          ],
          "pos":[
            -186,
            -1336
          ],
          "type":"util/customLua"
        },
        "96":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"playerPitting"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -704,
            -1700
          ],
          "type":"util/customLua"
        },
        "97":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -508,
            -1700
          ],
          "type":"logic/branch"
        },
        "98":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -270,
            -1658
          ],
          "type":"logic/once"
        },
        "99":{
          "data":{
            "debug":false
          },
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "color_in":{
              "type":"color",
              "value":[
                0,
                1,
                0,
                1
              ]
            },
            "color_out":{
              "type":"color",
              "value":[
                1,
                0,
                0,
                1
              ]
            },
            "onlyForward":{
              "type":"bool",
              "value":true
            },
            "scale":{
              "type":"vec3",
              "value":[
                3.50000000000000000000,
                5.80000019073486328125,
                10
              ]
            },
            "staticMarkers":{
              "type":"bool",
              "value":false
            },
            "stop_timer":{
              "type":"number",
              "value":0.20000000300000000952
            },
            "visibleMarkers":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "clear":false,
              "color_in":true,
              "color_out":true,
              "flow":false,
              "onlyForward":true,
              "position":false,
              "rotation":false,
              "scale":false,
              "staticMarkers":true,
              "stop_timer":true,
              "vehId":false,
              "visibleMarkers":true
            },
            "p_out":{
              "dotAngle":true,
              "flow":false,
              "forward":true,
              "forwardDistance":true,
              "forwardDistanceRelative":true,
              "inside":false,
              "outside":false,
              "partlyInside":false,
              "sideDistance":true,
              "sideDistanceRelative":true,
              "stopped":false,
              "stoppedPercent":true,
              "stopping":true
            }
          },
          "pos":[
            -74,
            -1798
          ],
          "type":"scene/rectMarker"
        },
        "100":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -284,
            -1000
          ],
          "type":"logic/branch"
        },
        "101":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal seed = self.pinIn.seed.value\nlocal dtable = extensions.blrutils.loadDataTable(\"beamLR/currentTrackEvent\")\nlocal etable = extensions.blrutils.loadEventWithRandoms(dtable[\"efile\"], seed)\nlocal ntable = {}\nlocal round = self.pinIn.round.value\nlocal leaderboard = self.pinIn.leaderboard.value\nlocal times = self.pinIn.times.value\nlocal idtable = extensions.blrRaceManager.getIDtable()\nlocal pid = self.pinIn.pid.value\nlocal ctimes = extensions.blrutils.ssplit(dtable[\"ctimes\"], \",\")\nlocal rseed = 0\n\nlocal uidata = {} -- UI leaderboard with name and time, KEY is POSITION for both tables\nuidata[\"name\"] = {}\nuidata[\"time\"] = {}\n\nlocal totaltimes = {}\nlocal sortedtimes = {}\nlocal positions = {}\nlocal ppos = -1\nlocal sti = 2 --Start at 2 for AI loop, player uses 1\n\nlocal finaltimes = {}\nlocal worsttime = 0\nlocal worstfinal = 0\n\n--Find worst time\nfor k,v in pairs(times) do -- VEHID IS KEY, TIME IS VAL\nif v > worsttime then\nworsttime = v\nend\nend\nif worsttime == 0 then -- No one finished, use a base worst time of 1 hour\nworsttime = 3600000\nend\n\n\n--Deal with opponent times\nfinaltimes[1] = 0 -- Need to init player time to avoid nil error during worst time update\nfor k,v in pairs(idtable) do -- VEHID IS KEY, RACERID IS VAL\nif not times[k] and v ~= 1 then -- Detect DNF racer that's not player\nmath.randomseed(seed + (round * 100) + v) -- Offset by 100 each round gives random times for up to 100 racer each round, plenty\nfinaltimes[v] = worsttime + math.random(1000, 60000) -- Add from 1 to 60 seconds to randomize DNF times\nelseif v ~= 1 then -- Racer had finished, use actual time\nfinaltimes[v] = times[k]\nend\nif finaltimes[v] > worstfinal then -- Detects new worst time\nworstfinal = finaltimes[v] -- In case player has DNF to give even worse time than worst AI\nend\nend\n\n-- Deal with player time\nif not times[pid] then\nfinaltimes[1] = worstfinal * 2 -- Player DNF, use worst opponent time * 2\nelse\nfinaltimes[1] = times[pid] -- Player finished, use actual time\nend\n\n\n-- Build updated ctime field for event progress\nlocal ctimestring = \"\"\nlocal ctimesplit = \"\"\nlocal ctimeID = 0\nlocal ctime = 0\n\n-- Start with player\nctimesplit = extensions.blrutils.ssplit(ctimes[1], \":\")\nctime = tonumber(ctimesplit[2])\nctimestring = \"player:\" .. (ctime + finaltimes[1])\ntotaltimes[1] = (ctime + finaltimes[1])\nsortedtimes[1] = (ctime + finaltimes[1])\n\n-- Now deal with AIs\nfor k,v in pairs(ctimes) do\nctimesplit = extensions.blrutils.ssplit(v, \":\") -- split format op1:323123,op2:23142,...\nif ctimesplit[1] ~= \"player\" then -- Avoid player\nctimeID = tonumber(string.sub(ctimesplit[1], 3))\nctime = tonumber(ctimesplit[2])\nctimestring = ctimestring .. \",op\" .. ctimeID .. \":\" .. (ctime + finaltimes[ctimeID + 1]) -- Increment by 1 to find correct time for AI racer\ntotaltimes[ctimeID + 1] = (ctime + finaltimes[ctimeID + 1])\nsortedtimes[sti] = (ctime + finaltimes[ctimeID + 1])\nsti=sti+1\nend\nend\n\n-- Perform current event file updates\nntable[\"ctimes\"] = ctimestring\nntable[\"cround\"] = math.min(round + 1, tonumber(etable[\"rounds\"]))\n\nif round + 1 >= tonumber(etable[\"rounds\"]) then\nntable[\"status\"] = \"finished\"\nelse\nntable[\"status\"] = \"started\"\nend\n\nextensions.blrutils.updateDataTable(\"beamLR/currentTrackEvent\", ntable)\n\n-- Calculate positions\ntable.sort(sortedtimes) -- Begin by creating sorted table, times will be in order\nfor k,v in pairs(totaltimes) do -- Loop over RACERID key, TOTALTIME val table \nfor i=1,#sortedtimes do -- Find position in sorted array for current time\nif v == sortedtimes[i] then -- Found racer time\npositions[k] = i -- Fill position table, RACERID key, POSITION val\nuidata[\"name\"][i] = extensions.blrRaceManager.getRacerName(k)\nuidata[\"time\"][i] = extensions.blrRaceManager.raceTimeString(extensions.blrRaceManager.msTimeFormat(v))\nif k == 1 then -- Found player position\nppos = i -- Set ppos value for flowgraph\nend\nend\nend\nend\n\nextensions.blrRaceManager.setPlayerPosition(ppos)\nextensions.customGuiStream.sendLeaderboard(uidata)\n\nself.pinOut.positions.value = positions\nself.pinOut.ppos.value = ppos",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "leaderboard":false,
              "pid":false,
              "round":false,
              "seed":false,
              "times":false
            },
            "p_out":{
              "flow":false,
              "positions":false,
              "ppos":false
            }
          },
          "name":"Event Round Complete",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "seed",
              null,
              ""
            ],
            [
              "in",
              "number",
              "round",
              null,
              ""
            ],
            [
              "in",
              "table",
              "leaderboard",
              null,
              ""
            ],
            [
              "in",
              "table",
              "times",
              null,
              ""
            ],
            [
              "in",
              "number",
              "pid",
              null,
              ""
            ],
            [
              "out",
              "table",
              "positions",
              null,
              ""
            ],
            [
              "out",
              "number",
              "ppos",
              null,
              ""
            ]
          ],
          "pos":[
            724,
            -958
          ],
          "type":"util/customLua"
        },
        "102":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrRaceManager.setRacerID(self.pinIn.veid.value, 1)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Set PID",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            1606,
            -538
          ],
          "type":"util/customLua"
        },
        "103":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal pdata = extensions.blrRaceManager.getPitMarkerData()\nself.pinOut.pos.value = pdata[\"pos\"]\nself.pinOut.rot.value = pdata[\"rot\"]",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "pos":false,
              "rot":false
            }
          },
          "name":"BLRRM Pit Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "out",
              "quat",
              "rot",
              null,
              ""
            ]
          ],
          "pos":[
            -284,
            -1798
          ],
          "type":"util/customLua"
        },
        "104":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            262,
            -1798
          ],
          "type":"logic/once"
        },
        "105":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            },
            "instant":{
              "type":"bool",
              "value":true
            },
            "message":{
              "type":"string",
              "value":"Vehicle repaired & refueled"
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            1018,
            -1714
          ],
          "type":"ui/flashMessage"
        },
        "106":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal vdata = extensions.blrutils.getVehicleData()\nlocal limit = self.pinIn.spdlimit.value\nlocal racer = self.pinIn.veid.value\nif vdata[\"velocity\"] >= limit then\nextensions.blrRaceManager.onPitOverspeed(racer)\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "spdlimit":{
              "type":"number",
              "value":23
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "spdlimit":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLRRM Pit Penalty",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "spdlimit",
              null,
              ""
            ]
          ],
          "pos":[
            -284,
            -1938
          ],
          "type":"util/customLua"
        },
        "107":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "vehId":false
            }
          },
          "pos":[
            -648,
            -1854
          ],
          "type":"scene/getPlayerVehicle"
        },
        "108":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            332,
            -1378
          ],
          "type":"vehicle/recoverInPlace"
        },
        "109":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])\nself.pinOut.nos.value = tonumber(dtable[\"nos\"]) or 0.000000000001"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":false,
              "config":false,
              "damage":false,
              "flow":false,
              "gas":false,
              "ifile":false,
              "mfile":false,
              "name":true,
              "nos":false,
              "paintdata":false,
              "scrapVal":true,
              "type":false
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nos",
              null,
              ""
            ]
          ],
          "pos":[
            -172,
            -2400
          ],
          "type":"util/customLua"
        },
        "110":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            934,
            -1994
          ],
          "type":"util/customLua"
        },
        "111":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"re_loadedVeh"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -900,
            -2414
          ],
          "type":"util/customLua"
        },
        "112":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "active":true,
              "damage":true,
              "dirVec":true,
              "dirVecUp":true,
              "flow":false,
              "position":false,
              "rotation":false,
              "velocity":true,
              "velocityVector":true
            }
          },
          "pos":[
            -662,
            -2400
          ],
          "type":"vehicle/vehicleMapData"
        },
        "113":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -648,
            -2232
          ],
          "type":"vehicle/removeVehicle"
        },
        "114":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -914,
            -2302
          ],
          "type":"logic/branch"
        },
        "115":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal model = self.pinIn.model.value\nlocal config = self.pinIn.config.value\nlocal pos = vec3(self.pinIn.pos.value)\nlocal rot = quat(self.pinIn.rot.value)\nlocal paintdata = self.pinIn.paintdata.value\nlocal paintA = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintA\"], \",\"))\nif paintdata[\"paintB\"] then\nlocal paintB = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintB\"], \",\"))\nend\nif paintdata[\"paintC\"] then\nlocal paintC = extensions.blrutils.createPaint(extensions.blrutils.ssplit(paintdata[\"paintC\"], \",\"))\nend\nlocal spawnOptions = {config = config, pos = pos, rot = rot, paint=paintA, paint2 = paintB, paint3=paintC}\nlocal veh = extensions.core_vehicles.spawnNewVehicle(model, spawnOptions)\nself.pinOut.veid.value = veh:getId()\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "config":false,
              "flow":false,
              "model":false,
              "paintdata":false,
              "pos":false,
              "rot":false
            },
            "p_out":{
              "flow":false,
              "veid":false
            }
          },
          "name":"BLR Spawn Veh",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "model",
              null,
              ""
            ],
            [
              "in",
              "string",
              "config",
              null,
              ""
            ],
            [
              "in",
              "vec3",
              "pos",
              null,
              ""
            ],
            [
              "in",
              "quat",
              "rot",
              null,
              ""
            ],
            [
              "in",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "number",
              "veid",
              null,
              ""
            ]
          ],
          "pos":[
            52,
            -2400
          ],
          "type":"util/customLua"
        },
        "116":{
          "data":{},
          "dynamicMode":"once",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            738,
            -1854
          ],
          "type":"vehicle/recoverInPlace"
        },
        "117":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "keepLayout":{
              "type":"bool",
              "value":false
            },
            "layout":{
              "type":"string",
              "value":"beamlrgameover"
            },
            "menu":{
              "type":"string",
              "value":"scenario"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gameStateName":true,
              "keepLayout":true,
              "layout":true,
              "menu":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2314,
            -174
          ],
          "type":"ui/setUILayout"
        },
        "118":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -606,
            78
          ],
          "type":"util/customLua"
        },
        "119":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -18,
            -1336
          ],
          "type":"ui/flashMessage"
        },
        "120":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -270,
            -1224
          ],
          "type":"logic/once"
        },
        "121":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            276,
            -1686
          ],
          "type":"vehicle/freeze"
        },
        "122":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "freeze":{
              "type":"bool",
              "value":false
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "freeze":false,
              "vehId":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            976,
            -1854
          ],
          "type":"vehicle/freeze"
        },
        "123":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -1826
          ],
          "type":"logic/flowSwitch"
        },
        "124":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1284,
            -874
          ],
          "type":"logic/branch"
        },
        "125":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.sendRewards(self.pinIn.rewards.value)\nextensions.customGuiStream.toggleTrackEventUI(true)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "rewards":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Show Rewards",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "rewards",
              null,
              ""
            ]
          ],
          "pos":[
            1508,
            -874
          ],
          "type":"util/customLua"
        },
        "126":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -284,
            -244
          ],
          "type":"logic/branch"
        },
        "127":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            52,
            -2176
          ],
          "type":"util/customLua"
        },
        "128":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            262,
            -2400
          ],
          "type":"util/customLua"
        },
        "129":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -900,
            -2162
          ],
          "type":"logic/once"
        },
        "130":{
          "code":{
            "work":"local veid = self.pinIn.veid.value\nlocal cost = self.pinIn.cost.value\nlocal mass = self.pinIn.mass.value\nlocal cap = self.pinIn.cap.value\nlocal fillval = cap - mass\nlocal paid = 0\nlocal ve = scenetree.findObjectById(veid)\nif ve ~= nil then\nve:queueLuaCommand(\"energyStorage.getStorage('mainBottle'):setRemainingMass(\" .. cap .. \")\")\npaid = fillval * cost\nend\n\nself.pinOut.paid.value = paid\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cost":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "cap":false,
              "cost":false,
              "flow":false,
              "mass":false,
              "veid":false
            },
            "p_out":{
              "flow":false,
              "paid":false
            }
          },
          "name":"N2O Refill",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mass",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cap",
              null,
              ""
            ],
            [
              "out",
              "number",
              "paid",
              null,
              ""
            ]
          ],
          "pos":[
            1424,
            -1882
          ],
          "type":"util/customLua"
        },
        "131":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"re_loadedVeh"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -746,
            302
          ],
          "type":"util/customLua"
        },
        "132":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -424,
            -2386
          ],
          "type":"util/customLua"
        },
        "133":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -424,
            -2260
          ],
          "type":"util/customLua"
        },
        "134":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"re_loadedVeh"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            486,
            -2316
          ],
          "type":"util/customLua"
        },
        "135":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal list = {}\nlist = extensions.betterpartmgmt.getTuningUIData(true)\nextensions.customGuiStream.sendTrackTuningData(list)\nlist = extensions.betterpartmgmt.getTuningUIValues()\nextensions.customGuiStream.sendTrackTuningValues(list)\nlocal categories = extensions.betterpartmgmt.getSortedTuningCategories(true)\nextensions.customGuiStream.sendTrackTuningCategories(categories)\nlocal fields = extensions.betterpartmgmt.getSortedTuningFields(true)\nextensions.customGuiStream.sendTrackTuningFields(fields)\n\n\nextensions.customGuiStream.toggleTrackTuningUI(true)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Show Track Tuning UI",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -18,
            -440
          ],
          "type":"util/customLua"
        },
        "136":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -284,
            -482
          ],
          "type":"logic/branch"
        },
        "137":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "text":{
              "type":"string",
              "value":"Tuning"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "text":false
            },
            "p_out":{
              "up":true,
              "down":false,
              "flow":false,
              "hold":true
            }
          },
          "pos":[
            -270,
            -370
          ],
          "type":"ui/imgui/elemental/imButton"
        },
        "138":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            752,
            -1378
          ],
          "type":"util/customLua"
        },
        "139":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"trackPostTuneActionsQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -928,
            -2778
          ],
          "type":"util/customLua"
        },
        "140":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -942,
            -2666
          ],
          "type":"logic/branch"
        },
        "141":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -732,
            -2778
          ],
          "type":"logic/once"
        },
        "142":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"self.pinOut.filename.value = \"beamLR/garage/car\" .. self.pinIn.id.value"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "id":false
            },
            "p_out":{
              "filename":false,
              "flow":false
            }
          },
          "name":"Car Data Filename",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -704,
            -2652
          ],
          "type":"util/customLua"
        },
        "143":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local filedata = readFile(self.pinIn.filename.value)\nlocal dtable = {}\nfor k,v in string.gmatch(filedata, \"([^%c]+)=([^%c]+)\") do\n    dtable[k] = v\nend\nself.pinOut.output.value = dtable"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Load Data Table",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ],
            [
              "out",
              "table",
              "output",
              null,
              ""
            ]
          ],
          "pos":[
            -494,
            -2806
          ],
          "type":"util/customLua"
        },
        "144":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local dtable = self.pinIn.data.value\nself.pinOut.name.value = dtable[\"name\"]\nself.pinOut.type.value = dtable[\"type\"]\nself.pinOut.bsfile.value = \"beamLR/beamstate/car\" .. self.pinIn.id.value .. \".save.json\"\nself.pinOut.config.value = \"beamLR/garage/config/car\" .. self.pinIn.id.value\nself.pinOut.mfile.value = \"beamLR/beamstate/mech/car\" .. self.pinIn.id.value\nself.pinOut.ifile.value = \"beamLR/beamstate/integrity/car\" .. self.pinIn.id.value\nself.pinOut.gas.value = tonumber(dtable[\"gas\"])\nself.pinOut.paintdata.value = {paintA=dtable[\"paintA\"], paintB=dtable[\"paintB\"],paintC=dtable[\"paintC\"] }\nself.pinOut.damage.value = tonumber(dtable[\"damage\"])\nself.pinOut.scrapVal.value = tonumber(dtable[\"scrapval\"])\nself.pinOut.nos.value = tonumber(dtable[\"nos\"]) or 0.000000000001"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "data":false,
              "flow":false,
              "id":false
            },
            "p_out":{
              "bsfile":true,
              "config":false,
              "damage":true,
              "flow":false,
              "gas":true,
              "ifile":false,
              "mfile":true,
              "name":true,
              "nos":true,
              "paintdata":true,
              "scrapVal":true,
              "type":true
            }
          },
          "name":"Get BLR Vehicle Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "table",
              "data",
              null,
              ""
            ],
            [
              "out",
              "string",
              "name",
              null,
              ""
            ],
            [
              "out",
              "string",
              "type",
              null,
              ""
            ],
            [
              "out",
              "string",
              "config",
              null,
              ""
            ],
            [
              "out",
              "string",
              "bsfile",
              null,
              ""
            ],
            [
              "out",
              "string",
              "mfile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "gas",
              null,
              ""
            ],
            [
              "out",
              "table",
              "paintdata",
              null,
              ""
            ],
            [
              "out",
              "string",
              "ifile",
              null,
              ""
            ],
            [
              "out",
              "number",
              "damage",
              null,
              ""
            ],
            [
              "out",
              "number",
              "scrapVal",
              null,
              ""
            ],
            [
              "in",
              "number",
              "id",
              null,
              ""
            ],
            [
              "out",
              "number",
              "nos",
              null,
              ""
            ]
          ],
          "pos":[
            -480,
            -2694
          ],
          "type":"util/customLua"
        },
        "145":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal file = self.pinIn.file.value\nextensions.mechDamageLoader.loadIntegrityFromFile(file,veid)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "file":false,
              "flow":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Integrity Data",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "file",
              null,
              ""
            ]
          ],
          "pos":[
            -270,
            -2820
          ],
          "type":"util/customLua"
        },
        "146":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.betterpartmgmt.saveConfig(self.pinIn.filename.value)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "filename":false,
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Save BLR Veh Config",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "filename",
              null,
              ""
            ]
          ],
          "pos":[
            -256,
            -2666
          ],
          "type":"util/customLua"
        },
        "147":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal veid = self.pinIn.veid.value\nlocal gid = self.pinIn.gid.value\nextensions.blrutils.garagePaintReload(veid, gid)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gid":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Load Garage Paint",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "gid",
              null,
              ""
            ]
          ],
          "pos":[
            -60,
            -2820
          ],
          "type":"util/customLua"
        },
        "148":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"trackPostTuneActionsQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            192,
            -2680
          ],
          "type":"util/customLua"
        },
        "149":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.fuel.value = extensions.betterpartmgmt.getTuningFuelLoad()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "fuel":false
            }
          },
          "name":"Tuning Fuel Load",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            556,
            -1378
          ],
          "type":"util/customLua"
        },
        "150":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.fuel.value = extensions.betterpartmgmt.getTuningFuelLoad()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "fuel":false
            }
          },
          "name":"Tuning Fuel Load",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            738,
            -1980
          ],
          "type":"util/customLua"
        },
        "151":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.fuel.value = extensions.betterpartmgmt.getTuningFuelLoad()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "fuel":false
            }
          },
          "name":"Tuning Fuel Load",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            276,
            -2260
          ],
          "type":"util/customLua"
        },
        "152":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            276,
            -2148
          ],
          "type":"util/customLua"
        },
        "153":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.fuel.value = extensions.betterpartmgmt.getTuningFuelLoad()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "fuel":false
            }
          },
          "name":"Tuning Fuel Load",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            -18,
            -2666
          ],
          "type":"util/customLua"
        },
        "154":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local ve = scenetree.findObjectById(self.pinIn.veid.value)\nlocal newFuelValue = self.pinIn.fuel.value\nve:queueLuaCommand(string.format(\"extensions.blrVehicleUtils.setFuel(%.12f)\", newFuelValue))"
          },
          "customIcon":"local_gas_station",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "fuel":false,
              "veid":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Force Set Fuel",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "number",
              "fuel",
              null,
              ""
            ]
          ],
          "pos":[
            150,
            -2820
          ],
          "type":"util/customLua"
        },
        "155":{
          "data":{
            "blocksOnResetGameplay":true
          },
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "value":true
            }
          },
          "pos":[
            -1690,
            -230
          ],
          "type":"activity/requestAbandon"
        },
        "156":{
          "code":{
            "work":"if self.pinIn.hasNos.value then\nlocal extensions = require(\"extensions\")\nlocal cost = self.pinIn.cost.value\nlocal veid = self.pinIn.veid.value\nlocal ve = scenetree.findObjectById(veid)\nlocal cap = 0\nlocal mass = 0\nif ve ~= nil then\nlocal massFetch = \"energyStorage.getStorage('mainBottle').remainingMass\"\nlocal capFetch = \"energyStorage.getStorage('mainBottle').capacity\"\nlocal mfid = \"nosmass\"\nlocal cfid = \"noscap\"\nlocal mcmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. massFetch .. \",'\" .. mfid .. \"'))\"\nlocal ccmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. capFetch .. \",'\" .. cfid .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(mcmd)\nve:queueLuaCommand(ccmd)\nend\nmass = tonumber(extensions.vluaFetchModule.getVal(mfid)) or 0\ncap = tonumber(extensions.vluaFetchModule.getVal(cfid)) or 0\nend\n\nself.pinOut.mass.value = mass\nself.pinOut.cap.value = cap\nself.pinOut.canFill.value = mass < cap\nself.pinOut.info.value = \"N2O Tank: \" .. string.format(\"%.2f\",mass) .. \"/\" .. string.format(\"%.2f\",cap) .. \" kg\"\nself.pinOut.fillinfo.value = \"Refill N2O ($\" .. string.format(\"%.2f\", (cap-mass) * cost ) .. \")\"\nself.pinOut.fillCost.value = (cap-mass) * cost\nelse\nself.pinOut.mass.value = 0.00001\nself.pinOut.cap.value = 0.00001\nself.pinOut.canFill.value = false\nself.pinOut.info.value = \"No N2O System\"\nself.pinOut.fillinfo.value = \"\"\nself.pinOut.fillCost.value = 0\nend\n\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "cost":{
              "type":"number",
              "value":0
            }
          },
          "hiddenPins":{
            "p_in":{
              "veid":false,
              "cost":true,
              "flow":false,
              "hasNos":false
            },
            "p_out":{
              "canFill":true,
              "cap":false,
              "fillCost":true,
              "fillinfo":true,
              "flow":false,
              "info":true,
              "mass":true
            }
          },
          "name":"N2O Info",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "out",
              "number",
              "mass",
              null,
              ""
            ],
            [
              "out",
              "number",
              "cap",
              null,
              ""
            ],
            [
              "out",
              "string",
              "info",
              null,
              ""
            ],
            [
              "out",
              "string",
              "fillinfo",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cost",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "canFill",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "hasNos",
              null,
              ""
            ],
            [
              "out",
              "number",
              "fillCost",
              null,
              ""
            ]
          ],
          "pos":[
            1102,
            -2218
          ],
          "type":"util/customLua"
        },
        "157":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1544,
            -552
          ],
          "type":"logic/once"
        },
        "158":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.hasNos.value = extensions.betterpartmgmt.getVehicleParts()[\"n2o_system\"] ~= \"\"",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false,
              "hasNos":false
            }
          },
          "name":"N2O Check",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "hasNos",
              null,
              ""
            ]
          ],
          "pos":[
            934,
            -2344
          ],
          "type":"util/customLua"
        },
        "159":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":0.75000000000000388578
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "incomplete":false,
              "complete":false,
              "completed":false,
              "flow":false
            }
          },
          "pos":[
            -928,
            -426
          ],
          "type":"ui/fadeFromBlack"
        },
        "160":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal ve = scenetree.findObjectById(self.pinIn.veid.value)\nif ve ~= nil then\nlocal id = self.pinIn.fetchID.value\nlocal toFetch = self.pinIn.toFetch.value\nlocal vecmd = \"obj:queueGameEngineLua(string.format('extensions.vluaFetchModule.fetch(%s,%q)', \" .. toFetch .. \",'\" .. id .. \"'))\"\nif ve.queueLuaCommand ~= nil then\nve:queueLuaCommand(vecmd)\nself.pinOut.output.value = extensions.vluaFetchModule.getVal(id)\nend\nend"
          },
          "customIcon":"simobject_lightning",
          "customName":"Fetch VLUA Variable",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "fetchID":{
              "type":"string",
              "value":"racegforce"
            },
            "toFetch":{
              "type":"string",
              "value":"extensions.blrVehicleUtils.getForceVectorLength()"
            }
          },
          "hiddenPins":{
            "p_in":{
              "veid":false,
              "fetchID":false,
              "flow":false,
              "toFetch":false
            },
            "p_out":{
              "flow":false,
              "output":false
            }
          },
          "name":"Fetch VLUA Variable",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "in",
              "number",
              "veid",
              null,
              ""
            ],
            [
              "in",
              "string",
              "toFetch",
              null,
              ""
            ],
            [
              "out",
              "string",
              "output",
              null,
              ""
            ],
            [
              "in",
              "string",
              "fetchID",
              null,
              ""
            ]
          ],
          "pos":[
            -2762,
            -48
          ],
          "type":"util/customLua"
        },
        "161":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            1214,
            -1882
          ],
          "type":"logic/branch"
        },
        "162":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            892,
            -2218
          ],
          "type":"logic/flowSwitch"
        },
        "163":{
          "code":{
            "work":"local toset = {}\ntoset[\"time\"] = self.pinIn.time.value\ntoset[\"play\"] = self.pinIn.play.value\ntoset[\"dayScale\"] = self.pinIn.dayScale.value\ntoset[\"nightScale\"] = self.pinIn.nightScale.value\ntoset[\"dayLength\"] = self.pinIn.dayLength.value\ntoset[\"azimuthOverride\"] = self.pinIn.azimuthOverride.value\ncore_environment.setTimeOfDay(toset)",
            "_executionStarted":"local extensions = require(\"extensions\")\nlocal current = core_environment.getTimeOfDay()\nlocal toset = {}\ntoset[\"time\"] = current[\"time\"]\ntoset[\"play\"] = current[\"play\"]\ntoset[\"dayScale\"] = current[\"dayScale\"]\ntoset[\"nightScale\"] = current[\"nightScale\"]\ntoset[\"dayLength\"] = current[\"dayLength\"]\ntoset[\"azimuthOverride\"] = current[\"azimuthOverride\"]\nextensions.blrutils.blrvarSet(\"toddata\", toset)",
            "_executionStopped":"local extensions = require(\"extensions\")\nlocal oldtime = extensions.blrutils.blrvarGet(\"toddata\")\ncore_environment.setTimeOfDay(oldtime)",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "dayScale":true,
              "flow":false,
              "nightScale":true,
              "playing":true,
              "time":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Auto Resetting TOD",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "time",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "playing",
              null,
              ""
            ],
            [
              "in",
              "number",
              "dayScale",
              null,
              ""
            ],
            [
              "in",
              "number",
              "nightScale",
              null,
              ""
            ]
          ],
          "pos":[
            -1376,
            -552
          ],
          "type":"util/customLua"
        },
        "164":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":20
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            696,
            -2344
          ],
          "type":"logic/frameDelay"
        },
        "165":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal gforce = tonumber(self.pinIn.gfetch.value or \"0\")\nlocal death = gforce > self.pinIn.max.value\nself.pinOut.msg.value = \"That was fatal (\" .. gforce .. \")\"\nself.pinOut.death.value = death\n\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "max":{
              "type":"number",
              "value":980
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "gfetch":false,
              "max":false
            },
            "p_out":{
              "death":false,
              "flow":false,
              "msg":false
            }
          },
          "name":"Race Death",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "gfetch",
              null,
              ""
            ],
            [
              "in",
              "number",
              "max",
              null,
              ""
            ],
            [
              "out",
              "bool",
              "death",
              null,
              ""
            ],
            [
              "out",
              "string",
              "msg",
              null,
              ""
            ]
          ],
          "pos":[
            -2524,
            -48
          ],
          "type":"util/customLua"
        },
        "166":{
          "alpha":0.75000000000000000000,
          "backgroundColor":[
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000,
            0.50000000000000000000
          ],
          "borderColor":[
            0.80000001192092895508,
            0.80000001192092895508,
            0.80000001192092895508,
            1
          ],
          "commentSize":[
            200,
            200
          ],
          "commentText":"so only one fetch needed\\nfor N2O information, can\\nturn off flow after that\\n",
          "commentTitle":"Vehicle cannot change",
          "data":{},
          "dynamicMode":"repeat",
          "moveMode":"withoutNodes",
          "pos":[
            896,
            -2086
          ],
          "simple":true,
          "textColor":[
            1,
            1,
            1,
            1
          ],
          "type":"debug/comment"
        },
        "167":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            696,
            -2078
          ],
          "type":"logic/once"
        },
        "168":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            668,
            -2204
          ],
          "type":"logic/frameDelay"
        },
        "169":{
          "code":{
            "_executionStarted":"",
            "_executionStopped":"",
            "work":"local extensions = require(\"extensions\")\nlocal dtable = extensions.blrutils.loadDataTable(\"beamLR/mainData\")\nself.pinOut.money.value = dtable[\"money\"]\nself.pinOut.carCount.value = dtable[\"carCount\"]\nself.pinOut.carUsed.value = tonumber(dtable[\"carUsed\"])\nself.pinOut.health.value = dtable[\"health\"]\nself.pinOut.time.value = tonumber(dtable[\"time\"])\nself.pinOut.reputation.value = tonumber(dtable[\"rep\"])\nself.pinOut.day.value = tonumber(dtable[\"day\"])"
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "carCount":false,
              "carUsed":true,
              "day":true,
              "flow":false,
              "health":true,
              "league":true,
              "money":false,
              "reputation":false,
              "time":true
            }
          },
          "name":"Load Career Data",
          "pins":[
            [
              "in",
              "flow",
              "flow"
            ],
            [
              "out",
              "flow",
              "flow"
            ],
            [
              "out",
              "number",
              "money",
              null,
              ""
            ],
            [
              "out",
              "number",
              "carCount",
              null,
              ""
            ],
            [
              "out",
              "number",
              "carUsed",
              null,
              ""
            ],
            [
              "out",
              "number",
              "health",
              null,
              ""
            ],
            [
              "out",
              "number",
              "time",
              null,
              ""
            ],
            [
              "out",
              "string",
              "league",
              null,
              ""
            ],
            [
              "out",
              "number",
              "reputation",
              null,
              ""
            ],
            [
              "out",
              "number",
              "day",
              null,
              ""
            ]
          ],
          "pos":[
            -2118,
            50
          ],
          "type":"util/customLua"
        },
        "170":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2748,
            120
          ],
          "type":"logic/branch"
        },
        "171":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2524,
            120
          ],
          "type":"logic/once"
        },
        "172":{
          "code":{
            "work":"local idtable = self.pinIn.idtable.value\nlocal automode = self.pinIn.auto.value\nlocal ctime = core_environment.getTimeOfDay().time\nlocal mode = self.pinIn.mode.value -- 0=OFF,1=LOWBEAM,2=HIGHBEAM\n\nif automode then -- Turns on and off at set time (5PM to 7AM)\nif not (ctime >= 0.2083 and ctime <= 0.7916) then\nmode = 0\nend\nend\n\nfor k,v in pairs(idtable) do\nscenetree.findObjectById(v):queueLuaCommand(\"electrics.setLightsState(\" .. mode .. \")\")\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "auto":{
              "type":"bool",
              "value":true
            },
            "mode":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "mode":false,
              "auto":false,
              "flow":false,
              "idtable":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mass Set Lights",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "table",
              "idtable",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mode",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "auto",
              null,
              ""
            ]
          ],
          "pos":[
            1676,
            -258
          ],
          "type":"util/customLua"
        },
        "173":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal tosend = {}\ntosend[\"money\"] = self.pinIn.money.value or 0\ntosend[\"reputation\"] = self.pinIn.rep.value or 0\ntosend[\"cars\"] = self.pinIn.cars.value or 0\nextensions.customGuiStream.sendGameOverCareerStats(tosend)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "rep":false,
              "cars":false,
              "flow":false,
              "money":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Game Over Stats",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "money",
              null,
              ""
            ],
            [
              "in",
              "number",
              "rep",
              null,
              ""
            ],
            [
              "in",
              "number",
              "cars",
              null,
              ""
            ]
          ],
          "pos":[
            -1894,
            -76
          ],
          "type":"util/customLua"
        },
        "174":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.toggleGameOverUI(self.pinIn.toggle.value)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "toggle":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "toggle":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Toggle Death Screen",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "bool",
              "toggle",
              null,
              ""
            ]
          ],
          "pos":[
            -1880,
            106
          ],
          "type":"util/customLua"
        },
        "175":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.resetCareer()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Reset Career",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2076,
            1464
          ],
          "type":"util/customLua"
        },
        "176":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "attempt":false,
              "flow":false
            },
            "p_out":{}
          },
          "pos":[
            -2076,
            1366
          ],
          "type":"activity/activityStop"
        },
        "177":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.setDeathScreenBackOpacity(-100,1.0,0.0)\nextensions.blrutils.setDeathScreenTextOpacity(-100,1.0,0.0)\nextensions.customGuiStream.toggleGameOverUI(false)",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Death Screen Reset",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1040,
            260
          ],
          "type":"util/customLua"
        },
        "178":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2468,
            246
          ],
          "type":"logic/flowSwitch"
        },
        "179":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":5
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":false,
              "flow":false,
              "reset":false
            },
            "p_out":{
              "incomplete":false,
              "complete":false,
              "completed":false,
              "flow":false
            }
          },
          "pos":[
            -2720,
            260
          ],
          "type":"audio/fadeOut"
        },
        "180":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2468,
            400
          ],
          "type":"logic/rateLimit"
        },
        "181":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2482,
            498
          ],
          "type":"logic/frameDelay"
        },
        "182":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "input":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":true,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2230,
            414
          ],
          "type":"logic/rateLimit"
        },
        "183":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "value":true,
              "false":false,
              "flow":false,
              "true":false
            }
          },
          "opSymbol":"==",
          "pos":[
            -2706,
            428
          ],
          "type":"logic/compare"
        },
        "184":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal dx = self.pinIn.dx.value\nlocal mx = self.pinIn.mx.value\nlocal mn = self.pinIn.mn.value\nlocal toRet = extensions.blrutils.setDeathScreenBackOpacity(dx,mx,mn)\nself.pinOut.out.value = toRet",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "dx":{
              "type":"number",
              "value":0.05000000074505820541
            },
            "mn":{
              "type":"number",
              "value":0
            },
            "mx":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "mx":false,
              "dx":false,
              "flow":false,
              "mn":false
            },
            "p_out":{
              "flow":false,
              "out":false
            }
          },
          "name":"Death Screen Back Fade",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "dx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mn",
              null,
              ""
            ],
            [
              "out",
              "number",
              "out",
              null,
              ""
            ]
          ],
          "pos":[
            -2216,
            246
          ],
          "type":"util/customLua"
        },
        "185":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal dx = self.pinIn.dx.value\nlocal mx = self.pinIn.mx.value\nlocal mn = self.pinIn.mn.value\nlocal toRet = extensions.blrutils.setDeathScreenTextOpacity(dx,mx,mn)\nself.pinOut.out.value = toRet",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "dx":{
              "type":"number",
              "value":0.05000000074505820541
            },
            "mn":{
              "type":"number",
              "value":0
            },
            "mx":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "mx":false,
              "dx":false,
              "flow":false,
              "mn":false
            },
            "p_out":{
              "flow":false,
              "out":false
            }
          },
          "name":"Death Screen Text Fade",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "number",
              "dx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mx",
              null,
              ""
            ],
            [
              "in",
              "number",
              "mn",
              null,
              ""
            ],
            [
              "out",
              "number",
              "out",
              null,
              ""
            ]
          ],
          "pos":[
            -2230,
            512
          ],
          "type":"util/customLua"
        },
        "186":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":10
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2342,
            92
          ],
          "type":"logic/frameDelay"
        },
        "187":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "asDuration":{
              "type":"bool",
              "value":true
            },
            "input":{
              "type":"number",
              "value":3
            },
            "reverseHit":{
              "type":"bool",
              "value":true
            }
          },
          "hiddenPins":{
            "p_in":{
              "asDuration":true,
              "dt":true,
              "flow":false,
              "input":true,
              "reset":false,
              "reverseHit":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            472,
            -1700
          ],
          "type":"logic/rateLimit"
        },
        "188":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "attempt":true,
              "flow":false
            },
            "p_out":{}
          },
          "pos":[
            -1334,
            -230
          ],
          "type":"activity/activityStop"
        },
        "189":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            472,
            -1574
          ],
          "type":"logic/frameDelay"
        },
        "190":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            724,
            -1588
          ],
          "type":"logic/flowSwitch"
        },
        "191":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            738,
            -1700
          ],
          "type":"logic/once"
        },
        "192":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":3
            },
            "instant":{
              "type":"bool",
              "value":true
            },
            "message":{
              "type":"string",
              "value":"Now repairing & refuelling"
            }
          },
          "hiddenPins":{
            "p_in":{
              "biggerText":true,
              "duration":false,
              "flow":false,
              "instant":true,
              "message":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            486,
            -1980
          ],
          "type":"ui/flashMessage"
        },
        "193":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            304,
            -1938
          ],
          "type":"logic/once"
        },
        "194":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2314,
            -48
          ],
          "type":"logic/flowSwitch"
        },
        "195":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2090,
            -76
          ],
          "type":"logic/once"
        },
        "196":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":true
            },
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2118,
            -216
          ],
          "type":"util/customLua"
        },
        "197":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -620,
            176
          ],
          "type":"logic/branch"
        },
        "198":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"gameOverScreen"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":true
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -1026,
            330
          ],
          "type":"util/customLua"
        },
        "199":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "customName":"UI INIT REQ",
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"uiInitRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -1152,
            582
          ],
          "type":"util/customLua"
        },
        "200":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -1166,
            694
          ],
          "type":"logic/branch"
        },
        "201":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -956,
            694
          ],
          "type":"logic/once"
        },
        "202":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.customGuiStream.gameOverUIinitreload()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Death Screen UI Init",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -816,
            596
          ],
          "type":"util/customLua"
        },
        "203":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"restartQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2720,
            736
          ],
          "type":"util/customLua"
        },
        "204":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2734,
            848
          ],
          "type":"logic/flowSwitch"
        },
        "205":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"uiInitRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -746,
            694
          ],
          "type":"util/customLua"
        },
        "206":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.disableQuickAccess()",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Disable QuickAccess",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1278,
            288
          ],
          "type":"util/customLua"
        },
        "207":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2524,
            750
          ],
          "type":"logic/branch"
        },
        "208":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":true,
              "flow":false,
              "reset":true
            },
            "p_out":{
              "incomplete":true,
              "complete":true,
              "completed":false,
              "flow":true
            }
          },
          "pos":[
            -2524,
            890
          ],
          "type":"ui/fadeToBlack"
        },
        "209":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2734,
            1002
          ],
          "type":"logic/flowSwitch"
        },
        "210":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2538,
            1002
          ],
          "type":"logic/frameDelay"
        },
        "211":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            1016
          ],
          "type":"logic/once"
        },
        "212":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nlocal missionID = extensions.gameplay_missions_missionManager.getForegroundMissionId()\nif missionID then\nlocal missionData = gameplay_missions_missions.getMissionById(missionID)\nextensions.gameplay_missions_missionManager.startFromWithinMission(missionData, {})\nelse\nself.graph.mgr:queueForRestart()\nend",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Mission Restart",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -2104,
            974
          ],
          "type":"util/customLua"
        },
        "213":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            792
          ],
          "type":"logic/once"
        },
        "214":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"restartQueued"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2118,
            792
          ],
          "type":"util/customLua"
        },
        "215":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nself.pinOut.flag.value = extensions.blrglobals.blrFlagGet(self.pinIn.name.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "name":{
              "type":"string",
              "value":"careerResetRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "name":false
            },
            "p_out":{
              "flag":false,
              "flow":false
            }
          },
          "name":"BLR Flag Get",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "out",
              "bool",
              "flag",
              null,
              ""
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ]
          ],
          "pos":[
            -2706,
            1198
          ],
          "type":"util/customLua"
        },
        "216":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "condition":false,
              "flow":false
            },
            "p_out":{
              "False":false,
              "True":false,
              "flow":true
            }
          },
          "pos":[
            -2496,
            1212
          ],
          "type":"logic/branch"
        },
        "217":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2706,
            1310
          ],
          "type":"logic/flowSwitch"
        },
        "218":{
          "data":{},
          "dynamicMode":"once",
          "hardcodedPins":{
            "duration":{
              "type":"number",
              "value":1
            }
          },
          "hiddenPins":{
            "p_in":{
              "duration":true,
              "flow":false,
              "reset":true
            },
            "p_out":{
              "incomplete":true,
              "complete":true,
              "completed":false,
              "flow":true
            }
          },
          "pos":[
            -2496,
            1338
          ],
          "type":"ui/fadeToBlack"
        },
        "219":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2706,
            1450
          ],
          "type":"logic/flowSwitch"
        },
        "220":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":100
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2496,
            1450
          ],
          "type":"logic/frameDelay"
        },
        "221":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2258,
            1464
          ],
          "type":"logic/once"
        },
        "222":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrutils.setGameOption(\"restrictScenarios\", true)\nextensions.blrutils.setGameOption(\"trafficEnableSwitching\", false)",
            "_executionStarted":"",
            "_executionStopped":"local extensions = require(\"extensions\")\nextensions.blrutils.resetGameOptions()",
            "onPreRender":""
          },
          "customName":"SET GAME OPTIONS",
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"Auto Resetting Game Options",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ]
          ],
          "pos":[
            -1166,
            -90
          ],
          "type":"util/customLua"
        },
        "224":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2286,
            1240
          ],
          "type":"logic/once"
        },
        "225":{
          "code":{
            "work":"local extensions = require(\"extensions\")\nextensions.blrglobals.blrFlagSet(self.pinIn.name.value, self.pinIn.flag.value)\n",
            "_executionStarted":"",
            "_executionStopped":"",
            "onPreRender":""
          },
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "flag":{
              "type":"bool",
              "value":false
            },
            "name":{
              "type":"string",
              "value":"careerResetRequest"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flag":true,
              "flow":false,
              "name":false
            },
            "p_out":{
              "flow":false
            }
          },
          "name":"BLR Flag Set",
          "pins":[
            [
              "in",
              "flow",
              "flow",
              null,
              "Inflow for this node.",
              true
            ],
            [
              "out",
              "flow",
              "flow",
              null,
              "Outflow for this node.",
              true
            ],
            [
              "in",
              "string",
              "name",
              null,
              ""
            ],
            [
              "in",
              "bool",
              "flag",
              null,
              ""
            ]
          ],
          "pos":[
            -2118,
            1240
          ],
          "type":"util/customLua"
        },
        "226":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "frames":{
              "type":"number",
              "value":20
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "frames":true,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1474,
            -118
          ],
          "type":"logic/frameDelay"
        },
        "227":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "off":false,
              "on":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1670,
            -118
          ],
          "type":"logic/flowSwitch"
        },
        "228":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "reset":false
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -1508,
            -230
          ],
          "type":"logic/once"
        },
        "229":{
          "data":{},
          "dynamicMode":"repeat",
          "getter":true,
          "global":true,
          "hardcodedPins":{
            "varName":{
              "type":"string",
              "value":"uistate"
            }
          },
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "suffix":true,
              "varName":true
            },
            "p_out":{
              "flow":false,
              "val":false
            }
          },
          "pos":[
            -1684,
            -356
          ],
          "type":"types/genericValue"
        },
        "230":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2300,
            904
          ],
          "type":"vehicle/beamstate/reset"
        },
        "231":{
          "data":{},
          "dynamicMode":"repeat",
          "hardcodedPins":{
            "B":{
              "type":"number",
              "value":2
            }
          },
          "hiddenPins":{
            "p_in":{
              "A":false,
              "B":false,
              "flow":false
            },
            "p_out":{
              "value":true,
              "false":false,
              "flow":false,
              "true":false
            }
          },
          "opSymbol":"==",
          "pos":[
            -1508,
            -384
          ],
          "type":"logic/compare"
        },
        "235":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false,
              "vehId":true
            },
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -2272,
            1352
          ],
          "type":"vehicle/beamstate/reset"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{
        "customVariableOrder":{},
        "list":{}
      },
      "viewPos":[
        -970.15051269531250000000,
        -397.52050781250000000000
      ],
      "viewZoom":0.74999982118606567383
    },
    "3":{
      "description":"This is the description for graph States",
      "dirty":false,
      "isStateGraph":true,
      "links":[
        [
          5,
          "flow",
          4,
          "flow",
          false
        ],
        [
          4,
          "success",
          6,
          "flow",
          false
        ],
        [
          4,
          "fail",
          6,
          "flow",
          false
        ]
      ],
      "name":"States",
      "nodes":{
        "4":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{
              "fail":false,
              "success":false
            }
          },
          "pins":[
            [
              "out",
              "state",
              "success",
              null,
              "This is a flow pin."
            ],
            [
              "out",
              "state",
              "fail",
              null,
              "This is a flow pin."
            ],
            [
              "in",
              "state",
              "flow",
              null,
              "This is a flow pin."
            ]
          ],
          "pos":[
            374,
            -6
          ],
          "targetGraphId":1,
          "type":"states/stateNode"
        },
        "5":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{},
            "p_out":{
              "flow":false
            }
          },
          "pos":[
            -4,
            -6
          ],
          "type":"states/stateEntry"
        },
        "6":{
          "data":{},
          "dynamicMode":"repeat",
          "hiddenPins":{
            "p_in":{
              "flow":false
            },
            "p_out":{}
          },
          "pins":[
            [
              "in",
              "state",
              "flow",
              null,
              "This is a flow pin."
            ]
          ],
          "pos":[
            794,
            -6
          ],
          "transitionName":"",
          "type":"states/stateExit"
        }
      },
      "showTab":true,
      "type":"graph",
      "variables":{
        "customVariableOrder":{},
        "list":{}
      },
      "viewPos":[
        -127.90475463867187500000,
        -1000.50683593750000000000
      ],
      "viewZoom":0.75000000000000000000
    }
  },
  "isScenario":true,
  "macros":{},
  "name":"BeamLR Track Event",
  "savedDir":"/gameplay/missions/BLRTrackEventAutomationTestTrack/",
  "savedFilename":"project.flow.json",
  "stateGraphId":3,
  "variables":{
    "customVariableOrder":[
      "uistate",
      "racestate",
      "optarget",
      "playerPosition"
    ],
    "list":[
      {
        "index":4,
        "mergeStrat":"max",
        "name":"playerPosition",
        "type":"number",
        "value":0
      },
      {
        "index":1,
        "mergeStrat":"last",
        "name":"uistate",
        "type":"number",
        "value":0
      },
      {
        "index":3,
        "mergeStrat":"max",
        "name":"optarget",
        "type":"number",
        "value":10
      },
      {
        "index":2,
        "mergeStrat":"last",
        "name":"racestate",
        "type":"string",
        "value":"Race in progress"
      }
    ]
  },
  "version":0.20000000000000001110
}